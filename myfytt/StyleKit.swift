//
//  StyleKit.swift
//  myfytt
//
//  Created on Sep 13, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// APP- use Client
    
    class func drawTrainerProfileMenuOpen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 842), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 842), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 842)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu-Trainer
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// profile_map-view copy
        // Warning: New symbols are not supported.
        
        /// My name is Pawel ”Pa
        let myNameIsPawelPa = NSMutableAttributedString(string: "My name is Pawel ”Pablo” Krupa and I am professional dancer/choreographer/teacher as well as Personal Trainer living and working in Stockholm. I have been connected with dance for more than 20 years starting from ballroom, modern and recently working with house and hip hop dance. I have been blessed to work with the best in Sweden and in the world by: taking classes and workshops and being part of productions like: Striving to Achieve; Ninja (Richfam); American Idiot (musical) or 5 degrees. I also joined many street dance battles with successes.")
        myNameIsPawelPa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: myNameIsPawelPa.length))
        myNameIsPawelPa.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: myNameIsPawelPa.length))
        context.saveGState()
        myNameIsPawelPa.draw(in: CGRect(x: 35, y: 227, width: 304, height: 205))
        context.restoreGState()
        
        /// Menu
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 30)
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 246, height: 782))
            context.saveGState()
            UIColor.white.setFill()
            rectangle2.fill()
            context.saveGState()
            UIRectClip(rectangle2.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.beginTransparencyLayer(in: rectangle2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                rectangle2.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: rectangle2.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -246, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 246.5, y: -0.5)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    rectangle2.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            
            /// icn-burgermenu
            // Warning: New symbols are not supported.
            
            
            /// Path 4
            let path4 = UIBezierPath()
            path4.move(to: CGPoint(x: 0, y: 1))
            path4.addLine(to: CGPoint(x: 154.63, y: 1))
            context.saveGState()
            context.translateBy(x: 53, y: 122)
            path4.lineWidth = 0.5
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            path4.stroke()
            context.restoreGState()
            
            
            /// Condition & Terms
            let conditionTerms = NSMutableAttributedString(string: "Condition & Terms")
            conditionTerms.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: conditionTerms.length))
            conditionTerms.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: 16))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                conditionTerms.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: conditionTerms.length))
            }
            conditionTerms.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: conditionTerms.length))
            context.saveGState()
            conditionTerms.draw(at: CGPoint(x: 74, y: 176))
            context.restoreGState()
            
            
            /// Edit Profile
            let editProfile = NSMutableAttributedString(string: "Edit Profile")
            editProfile.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: editProfile.length))
            editProfile.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: 11))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                editProfile.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: editProfile.length))
            }
            editProfile.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: editProfile.length))
            context.saveGState()
            editProfile.draw(at: CGPoint(x: 98, y: 195))
            context.restoreGState()
            
            
            /// Recommend to a Frien
            let recommendToAFrien = NSMutableAttributedString(string: "Recommend to a Friend")
            recommendToAFrien.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: recommendToAFrien.length))
            recommendToAFrien.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: 20))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                recommendToAFrien.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: recommendToAFrien.length))
            }
            recommendToAFrien.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: recommendToAFrien.length))
            context.saveGState()
            recommendToAFrien.draw(at: CGPoint(x: 57, y: 233))
            context.restoreGState()
            
            
            /// Reports
            let reports = NSMutableAttributedString(string: "Reports")
            reports.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: reports.length))
            reports.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: reports.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                reports.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: reports.length))
            }
            reports.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: reports.length))
            context.saveGState()
            reports.draw(at: CGPoint(x: 106.5, y: 214))
            context.restoreGState()
            
            
            /// Log Out
            let logOut = NSMutableAttributedString(string: "Log Out")
            logOut.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: logOut.length))
            logOut.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                logOut.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: logOut.length))
            }
            logOut.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: logOut.length))
            context.saveGState()
            logOut.draw(at: CGPoint(x: 104, y: 253))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawTrainerProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1014), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1014), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1014)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 1019)
            
            // Empty.
            
            context.restoreGState()
        }
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// profile_map-view copy
        // Warning: New symbols are not supported.
        
        /// UPCOMMING SESSIONS
        let uPCOMMINGSESSIONS = NSMutableAttributedString(string: "UPCOMMING SESSIONS")
        uPCOMMINGSESSIONS.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 26)!, range: NSRange(location: 0, length: uPCOMMINGSESSIONS.length))
        uPCOMMINGSESSIONS.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: uPCOMMINGSESSIONS.length))
        context.saveGState()
        uPCOMMINGSESSIONS.draw(at: CGPoint(x: 48, y: 400))
        context.restoreGState()
        
        /// REQUESTED BOOKINGS
        let rEQUESTEDBOOKINGS = NSMutableAttributedString(string: "REQUESTED BOOKINGS")
        rEQUESTEDBOOKINGS.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 26)!, range: NSRange(location: 0, length: rEQUESTEDBOOKINGS.length))
        rEQUESTEDBOOKINGS.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: rEQUESTEDBOOKINGS.length))
        context.saveGState()
        rEQUESTEDBOOKINGS.draw(at: CGPoint(x: 50, y: 644))
        context.restoreGState()
        
        /// box_booking-requested copy 3
        // Warning: New symbols are not supported.
        
        /// More Bookings
        let moreBookings = NSMutableAttributedString(string: "More Bookings")
        moreBookings.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: moreBookings.length))
        moreBookings.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: moreBookings.length))
        context.saveGState()
        moreBookings.draw(at: CGPoint(x: 132, y: 911))
        context.restoreGState()
        
        /// My name is Pawel ”Pa
        let myNameIsPawelPa = NSMutableAttributedString(string: "My name is Pawel ”Pablo” Krupa and I am professional dancer/choreographer/teacher as well as Personal Trainer living and working in Stockholm. I have been connected with dance for more than 20 years starting from ballroom, modern and recently working with house and hip hop dance. I have been blessed to work with the best in Sweden and in the world by: taking classes and workshops and being part of productions like: Striving to Achieve; Ninja (Richfam); American Idiot (musical) or 5 degrees. I also joined many street dance battles with successes.")
        myNameIsPawelPa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: myNameIsPawelPa.length))
        myNameIsPawelPa.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: myNameIsPawelPa.length))
        context.saveGState()
        myNameIsPawelPa.draw(in: CGRect(x: 35, y: 183, width: 304, height: 203))
        context.restoreGState()
        
        /// box_booking-My-Bookings-Trainer
        // Warning: New symbols are not supported.
        
        /// Menu/quickmenu-Trainer
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawFYTTAppSignInKeyboard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// System / Keyboards / iPhone X / Light - Alphabetic
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// Login_btn
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button Copy
        // Warning: New symbols are not supported.
        
        /// password
        do {
            context.saveGState()
            context.translateBy(x: 33, y: 336)
            
            /// input_txtfield
            // Warning: New symbols are not supported.
            
            
            /// Oval 3
            let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 19, y: 16)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy
            let oval3Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 35, y: 16)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 2
            let oval3Copy2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 51, y: 16)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy2.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 3
            let oval3Copy3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 67, y: 16)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 4
            let oval3Copy4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 83, y: 16)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy4.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 5
            let oval3Copy5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 99, y: 16)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy5.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 6
            let oval3Copy6 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 114, y: 16)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy6.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Username
        do {
            context.saveGState()
            context.translateBy(x: 33, y: 288)
            
            /// input_txtfield
            // Warning: New symbols are not supported.
            
            
            /// lars.gadeby@whatwedo
            let larsgadebywhatwedo = NSMutableAttributedString(string: "lars.gadeby@whatwedo.se")
            larsgadebywhatwedo.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: larsgadebywhatwedo.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                larsgadebywhatwedo.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: larsgadebywhatwedo.length))
            }
            larsgadebywhatwedo.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: larsgadebywhatwedo.length))
            context.saveGState()
            larsgadebywhatwedo.draw(at: CGPoint(x: 18, y: 12))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Logo
        do {
            context.saveGState()
            context.translateBy(x: 135, y: 65)
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 20.73)
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 105.48, y: 0))
                clip2.addLine(to: CGPoint(x: 105.48, y: 143.83))
                clip2.addLine(to: CGPoint(x: 0, y: 143.83))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.3)
                context.restoreGState()
                
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.apply(CGAffineTransform(translationX: 0, y: 0.3))
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 52.82, y: 48.63))
                fill1.addLine(to: CGPoint(x: 71.82, y: 9.19))
                fill1.addCurve(to: CGPoint(x: 86.74, y: 0), controlPoint1: CGPoint(x: 74.51, y: 3.58), controlPoint2: CGPoint(x: 80.34, y: 0))
                fill1.addLine(to: CGPoint(x: 89.86, y: 0))
                fill1.addCurve(to: CGPoint(x: 103.59, y: 22.22), controlPoint1: CGPoint(x: 101.67, y: 0), controlPoint2: CGPoint(x: 109.2, y: 12.19))
                fill1.addLine(to: CGPoint(x: 71.32, y: 79.95))
                fill1.addLine(to: CGPoint(x: 71.32, y: 125.97))
                fill1.addCurve(to: CGPoint(x: 52.82, y: 143.83), controlPoint1: CGPoint(x: 71.32, y: 135.84), controlPoint2: CGPoint(x: 63.04, y: 143.83))
                fill1.addCurve(to: CGPoint(x: 34.33, y: 125.97), controlPoint1: CGPoint(x: 42.61, y: 143.83), controlPoint2: CGPoint(x: 34.33, y: 135.84))
                fill1.addLine(to: CGPoint(x: 34.33, y: 81.03))
                fill1.addLine(to: CGPoint(x: 1.85, y: 22.15))
                fill1.addCurve(to: CGPoint(x: 15.62, y: 0), controlPoint1: CGPoint(x: -3.68, y: 12.11), controlPoint2: CGPoint(x: 3.85, y: 0))
                fill1.addLine(to: CGPoint(x: 19.06, y: 0))
                fill1.addCurve(to: CGPoint(x: 34, y: 9.23), controlPoint1: CGPoint(x: 25.48, y: 0), controlPoint2: CGPoint(x: 31.31, y: 3.61))
                fill1.addLine(to: CGPoint(x: 52.82, y: 48.63))
                fill1.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.3)
                fill1.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill1.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 36.83, y: 0)
                
                /// Clip 5
                let clip5 = UIBezierPath()
                clip5.move(to: CGPoint.zero)
                clip5.addLine(to: CGPoint(x: 30.86, y: 0))
                clip5.addLine(to: CGPoint(x: 30.86, y: 52.6))
                clip5.addLine(to: CGPoint(x: 0, y: 52.6))
                clip5.addLine(to: CGPoint.zero)
                clip5.close()
                context.saveGState()
                context.translateBy(x: 0.47, y: 0.08)
                context.restoreGState()
                
                
                /// Clip 5 (Outline Mask)
                context.saveGState()
                clip5.apply(CGAffineTransform(translationX: 0.47, y: 0.08))
                clip5.addClip()
                
                /// Fill 4
                let fill4 = UIBezierPath()
                fill4.move(to: CGPoint(x: 15.43, y: 0))
                fill4.addCurve(to: CGPoint(x: 29.59, y: 20.79), controlPoint1: CGPoint(x: 26.51, y: 0), controlPoint2: CGPoint(x: 33.97, y: 10.95))
                fill4.addLine(to: CGPoint(x: 15.43, y: 52.6))
                fill4.addLine(to: CGPoint(x: 1.27, y: 20.79))
                fill4.addCurve(to: CGPoint(x: 15.43, y: 0), controlPoint1: CGPoint(x: -3.11, y: 10.95), controlPoint2: CGPoint(x: 4.36, y: 0))
                context.saveGState()
                context.translateBy(x: 0.47, y: 0.08)
                fill4.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill4.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 5 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// Logoname
        do {
            context.saveGState()
            context.translateBy(x: 155, y: 240)
            
            /// Group 9
            do {
                context.saveGState()
                
                /// Clip 8
                let clip8 = UIBezierPath()
                clip8.move(to: CGPoint.zero)
                clip8.addLine(to: CGPoint(x: 17, y: 0))
                clip8.addLine(to: CGPoint(x: 17, y: 26.71))
                clip8.addLine(to: CGPoint(x: 0, y: 26.71))
                clip8.addLine(to: CGPoint.zero)
                clip8.close()
                context.saveGState()
                context.translateBy(x: 0.73, y: 0.29)
                context.restoreGState()
                
                
                /// Clip 8 (Outline Mask)
                context.saveGState()
                clip8.apply(CGAffineTransform(translationX: 0.73, y: 0.29))
                clip8.addClip()
                
                /// Fill 7
                let fill7 = UIBezierPath()
                fill7.move(to: CGPoint(x: 3.83, y: 26.71))
                fill7.addCurve(to: CGPoint(x: 0, y: 23.16), controlPoint1: CGPoint(x: 1.71, y: 26.71), controlPoint2: CGPoint(x: 0, y: 25.12))
                fill7.addLine(to: CGPoint(x: 0, y: 2.49))
                fill7.addCurve(to: CGPoint(x: 2.69, y: 0), controlPoint1: CGPoint(x: 0, y: 1.12), controlPoint2: CGPoint(x: 1.2, y: 0))
                fill7.addLine(to: CGPoint(x: 17, y: 0))
                fill7.addLine(to: CGPoint(x: 17, y: 5.79))
                fill7.addLine(to: CGPoint(x: 7.66, y: 5.79))
                fill7.addLine(to: CGPoint(x: 7.66, y: 10.89))
                fill7.addLine(to: CGPoint(x: 13.16, y: 10.89))
                fill7.addCurve(to: CGPoint(x: 16.28, y: 13.79), controlPoint1: CGPoint(x: 14.88, y: 10.89), controlPoint2: CGPoint(x: 16.28, y: 12.19))
                fill7.addCurve(to: CGPoint(x: 13.16, y: 16.68), controlPoint1: CGPoint(x: 16.28, y: 15.39), controlPoint2: CGPoint(x: 14.88, y: 16.68))
                fill7.addLine(to: CGPoint(x: 7.66, y: 16.68))
                fill7.addLine(to: CGPoint(x: 7.66, y: 23.16))
                fill7.addCurve(to: CGPoint(x: 3.83, y: 26.71), controlPoint1: CGPoint(x: 7.66, y: 25.12), controlPoint2: CGPoint(x: 5.94, y: 26.71))
                context.saveGState()
                context.translateBy(x: 0.73, y: 0.29)
                fill7.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill7.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 8 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 12
            do {
                context.saveGState()
                context.translateBy(x: 10.99, y: 0)
                
                /// Clip 11
                let clip11 = UIBezierPath()
                clip11.move(to: CGPoint.zero)
                clip11.addLine(to: CGPoint(x: 26.25, y: 0))
                clip11.addLine(to: CGPoint(x: 26.25, y: 26.71))
                clip11.addLine(to: CGPoint(x: 0, y: 26.71))
                clip11.addLine(to: CGPoint.zero)
                clip11.close()
                context.saveGState()
                context.translateBy(x: 0.74, y: 0.29)
                context.restoreGState()
                
                
                /// Clip 11 (Outline Mask)
                context.saveGState()
                clip11.apply(CGAffineTransform(translationX: 0.74, y: 0.29))
                clip11.addClip()
                
                /// Fill 10
                let fill10 = UIBezierPath()
                fill10.move(to: CGPoint(x: 13.13, y: 9.9))
                fill10.addLine(to: CGPoint(x: 16.99, y: 2.03))
                fill10.addCurve(to: CGPoint(x: 20.36, y: 0), controlPoint1: CGPoint(x: 17.6, y: 0.79), controlPoint2: CGPoint(x: 18.91, y: 0))
                fill10.addLine(to: CGPoint(x: 26.25, y: 0))
                fill10.addLine(to: CGPoint(x: 16.97, y: 16.28))
                fill10.addLine(to: CGPoint(x: 16.97, y: 23.16))
                fill10.addCurve(to: CGPoint(x: 13.21, y: 26.71), controlPoint1: CGPoint(x: 16.97, y: 25.12), controlPoint2: CGPoint(x: 15.29, y: 26.71))
                fill10.addLine(to: CGPoint(x: 13.04, y: 26.71))
                fill10.addCurve(to: CGPoint(x: 9.28, y: 23.16), controlPoint1: CGPoint(x: 10.96, y: 26.71), controlPoint2: CGPoint(x: 9.28, y: 25.12))
                fill10.addLine(to: CGPoint(x: 9.28, y: 16.5))
                fill10.addLine(to: CGPoint.zero)
                fill10.addLine(to: CGPoint(x: 5.92, y: 0))
                fill10.addCurve(to: CGPoint(x: 9.29, y: 2.04), controlPoint1: CGPoint(x: 7.37, y: 0), controlPoint2: CGPoint(x: 8.69, y: 0.8))
                fill10.addLine(to: CGPoint(x: 13.13, y: 9.9))
                fill10.close()
                context.saveGState()
                context.translateBy(x: 0.74, y: 0.29)
                fill10.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill10.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 11 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 15
            do {
                context.saveGState()
                context.translateBy(x: 31.13, y: 0)
                
                /// Clip 14
                let clip14 = UIBezierPath()
                clip14.move(to: CGPoint.zero)
                clip14.addLine(to: CGPoint(x: 19.79, y: 0))
                clip14.addLine(to: CGPoint(x: 19.79, y: 26.71))
                clip14.addLine(to: CGPoint(x: 0, y: 26.71))
                clip14.addLine(to: CGPoint.zero)
                clip14.close()
                context.saveGState()
                context.translateBy(x: 0.71, y: 0.29)
                context.restoreGState()
                
                
                /// Clip 14 (Outline Mask)
                context.saveGState()
                clip14.apply(CGAffineTransform(translationX: 0.71, y: 0.29))
                clip14.addClip()
                
                /// Fill 13
                let fill13 = UIBezierPath()
                fill13.move(to: CGPoint(x: 9.2, y: 26.71))
                fill13.addLine(to: CGPoint(x: 9.09, y: 26.71))
                fill13.addCurve(to: CGPoint(x: 5.35, y: 23.16), controlPoint1: CGPoint(x: 7.02, y: 26.71), controlPoint2: CGPoint(x: 5.35, y: 25.12))
                fill13.addLine(to: CGPoint(x: 5.35, y: 5.9))
                fill13.addLine(to: CGPoint(x: 0, y: 5.9))
                fill13.addLine(to: CGPoint.zero)
                fill13.addLine(to: CGPoint(x: 19.79, y: 0))
                fill13.addLine(to: CGPoint(x: 19.79, y: 5.9))
                fill13.addLine(to: CGPoint(x: 12.94, y: 5.9))
                fill13.addLine(to: CGPoint(x: 12.94, y: 23.16))
                fill13.addCurve(to: CGPoint(x: 9.2, y: 26.71), controlPoint1: CGPoint(x: 12.94, y: 25.12), controlPoint2: CGPoint(x: 11.27, y: 26.71))
                context.saveGState()
                context.translateBy(x: 0.71, y: 0.29)
                fill13.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill13.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 14 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 18
            do {
                context.saveGState()
                context.translateBy(x: 43.94, y: 0)
                
                /// Clip 17
                let clip17 = UIBezierPath()
                clip17.move(to: CGPoint.zero)
                clip17.addLine(to: CGPoint(x: 21.06, y: 0))
                clip17.addLine(to: CGPoint(x: 21.06, y: 27))
                clip17.addLine(to: CGPoint(x: 0, y: 27))
                clip17.addLine(to: CGPoint.zero)
                clip17.close()
                
                
                /// Clip 17 (Outline Mask)
                context.saveGState()
                clip17.addClip()
                
                /// Fill 16
                let fill16 = UIBezierPath()
                fill16.move(to: CGPoint(x: 10.59, y: 27))
                fill16.addLine(to: CGPoint(x: 10.48, y: 27))
                fill16.addCurve(to: CGPoint(x: 6.78, y: 23.41), controlPoint1: CGPoint(x: 8.44, y: 27), controlPoint2: CGPoint(x: 6.78, y: 25.39))
                fill16.addLine(to: CGPoint(x: 6.78, y: 5.96))
                fill16.addLine(to: CGPoint(x: 0, y: 5.96))
                fill16.addLine(to: CGPoint.zero)
                fill16.addLine(to: CGPoint(x: 18.04, y: 0))
                fill16.addCurve(to: CGPoint(x: 21.06, y: 2.93), controlPoint1: CGPoint(x: 19.71, y: 0), controlPoint2: CGPoint(x: 21.06, y: 1.31))
                fill16.addLine(to: CGPoint(x: 21.06, y: 3.04))
                fill16.addCurve(to: CGPoint(x: 18.04, y: 5.96), controlPoint1: CGPoint(x: 21.06, y: 4.66), controlPoint2: CGPoint(x: 19.71, y: 5.96))
                fill16.addLine(to: CGPoint(x: 14.29, y: 5.96))
                fill16.addLine(to: CGPoint(x: 14.29, y: 23.41))
                fill16.addCurve(to: CGPoint(x: 10.59, y: 27), controlPoint1: CGPoint(x: 14.29, y: 25.39), controlPoint2: CGPoint(x: 12.64, y: 27))
                context.saveGState()
                fill16.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill16.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 17 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawFYTTAppStartScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// Group 13
        do {
            context.saveGState()
            context.translateBy(x: 112, y: 334)
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 18.94, y: 70))
            fill1.addLine(to: CGPoint(x: 5.65, y: 70))
            fill1.addCurve(to: CGPoint(x: 0, y: 64.44), controlPoint1: CGPoint(x: 2.53, y: 70), controlPoint2: CGPoint(x: 0, y: 67.51))
            fill1.addLine(to: CGPoint.zero)
            fill1.addLine(to: CGPoint(x: 42.07, y: 0))
            fill1.addLine(to: CGPoint(x: 50, y: 15.18))
            fill1.addLine(to: CGPoint(x: 18.94, y: 15.18))
            fill1.addLine(to: CGPoint(x: 18.94, y: 28.54))
            fill1.addLine(to: CGPoint(x: 32.55, y: 28.54))
            fill1.addCurve(to: CGPoint(x: 40.27, y: 36.13), controlPoint1: CGPoint(x: 36.81, y: 28.54), controlPoint2: CGPoint(x: 40.27, y: 31.93))
            fill1.addCurve(to: CGPoint(x: 32.55, y: 43.71), controlPoint1: CGPoint(x: 40.27, y: 40.32), controlPoint2: CGPoint(x: 36.81, y: 43.71))
            fill1.addLine(to: CGPoint(x: 18.94, y: 43.71))
            fill1.addLine(to: CGPoint(x: 18.94, y: 70))
            fill1.close()
            context.saveGState()
            context.translateBy(x: 0, y: 22)
            fill1.usesEvenOddFillRule = true
            UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
            fill1.fill()
            context.restoreGState()
            
            
            /// Fill 3
            let fill3 = UIBezierPath()
            fill3.move(to: CGPoint(x: 43.87, y: 70))
            fill3.addLine(to: CGPoint(x: 24.87, y: 70))
            fill3.addLine(to: CGPoint(x: 24.87, y: 15.46))
            fill3.addLine(to: CGPoint(x: 0, y: 15.46))
            fill3.addLine(to: CGPoint(x: 7.69, y: 0))
            fill3.addLine(to: CGPoint(x: 61, y: 0))
            fill3.addLine(to: CGPoint(x: 61, y: 15.46))
            fill3.addLine(to: CGPoint(x: 43.87, y: 15.46))
            fill3.addLine(to: CGPoint(x: 43.87, y: 70))
            fill3.close()
            context.saveGState()
            context.translateBy(x: 61, y: 22)
            fill3.usesEvenOddFillRule = true
            UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
            fill3.fill()
            context.restoreGState()
            
            
            /// Group 7
            do {
                context.saveGState()
                context.translateBy(x: 101, y: 22)
                
                /// Clip 6
                let clip6 = UIBezierPath()
                clip6.move(to: CGPoint.zero)
                clip6.addLine(to: CGPoint(x: 51.37, y: 0))
                clip6.addLine(to: CGPoint(x: 51.37, y: 70))
                clip6.addLine(to: CGPoint(x: 0, y: 70))
                clip6.addLine(to: CGPoint.zero)
                clip6.close()
                context.saveGState()
                context.translateBy(x: 0.23, y: 0)
                context.restoreGState()
                
                
                /// Clip 6 (Outline Mask)
                context.saveGState()
                clip6.apply(CGAffineTransform(translationX: 0.23, y: 0))
                clip6.addClip()
                
                /// Fill 5
                let fill5 = UIBezierPath()
                fill5.move(to: CGPoint(x: 30.84, y: 70))
                fill5.addLine(to: CGPoint(x: 17.31, y: 70))
                fill5.addLine(to: CGPoint(x: 17.31, y: 15.46))
                fill5.addLine(to: CGPoint(x: 0, y: 15.46))
                fill5.addLine(to: CGPoint.zero)
                fill5.addLine(to: CGPoint(x: 43.54, y: 0))
                fill5.addCurve(to: CGPoint(x: 51.37, y: 7.73), controlPoint1: CGPoint(x: 47.87, y: 0), controlPoint2: CGPoint(x: 51.37, y: 3.46))
                fill5.addCurve(to: CGPoint(x: 43.54, y: 15.46), controlPoint1: CGPoint(x: 51.37, y: 12), controlPoint2: CGPoint(x: 47.87, y: 15.46))
                fill5.addLine(to: CGPoint(x: 36.47, y: 15.46))
                fill5.addLine(to: CGPoint(x: 36.47, y: 64.44))
                fill5.addCurve(to: CGPoint(x: 30.84, y: 70), controlPoint1: CGPoint(x: 36.47, y: 67.51), controlPoint2: CGPoint(x: 33.95, y: 70))
                context.saveGState()
                context.translateBy(x: 0.23, y: 0)
                fill5.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill5.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 6 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 10
            do {
                context.saveGState()
                context.translateBy(x: 30, y: 12)
                
                /// Clip 9
                let clip9 = UIBezierPath()
                clip9.move(to: CGPoint.zero)
                clip9.addLine(to: CGPoint(x: 56.5, y: 0))
                clip9.addLine(to: CGPoint(x: 56.5, y: 80.15))
                clip9.addLine(to: CGPoint(x: 0, y: 80.15))
                clip9.addLine(to: CGPoint.zero)
                clip9.close()
                context.saveGState()
                context.translateBy(x: 0.25, y: 0.12)
                context.restoreGState()
                
                
                /// Clip 9 (Outline Mask)
                context.saveGState()
                clip9.apply(CGAffineTransform(translationX: 0.25, y: 0.12))
                clip9.addClip()
                
                /// Fill 8
                let fill8 = UIBezierPath()
                fill8.move(to: CGPoint(x: 28.29, y: 27.1))
                fill8.addLine(to: CGPoint(x: 38.46, y: 5.12))
                fill8.addCurve(to: CGPoint(x: 46.46, y: 0), controlPoint1: CGPoint(x: 39.91, y: 2), controlPoint2: CGPoint(x: 43.03, y: 0))
                fill8.addLine(to: CGPoint(x: 48.13, y: 0))
                fill8.addCurve(to: CGPoint(x: 55.48, y: 12.38), controlPoint1: CGPoint(x: 54.46, y: 0), controlPoint2: CGPoint(x: 58.49, y: 6.79))
                fill8.addLine(to: CGPoint(x: 38.2, y: 44.55))
                fill8.addLine(to: CGPoint(x: 38.2, y: 73.37))
                fill8.addCurve(to: CGPoint(x: 31.45, y: 80.15), controlPoint1: CGPoint(x: 38.2, y: 77.12), controlPoint2: CGPoint(x: 35.18, y: 80.15))
                fill8.addLine(to: CGPoint(x: 25.14, y: 80.15))
                fill8.addCurve(to: CGPoint(x: 18.39, y: 73.37), controlPoint1: CGPoint(x: 21.41, y: 80.15), controlPoint2: CGPoint(x: 18.39, y: 77.12))
                fill8.addLine(to: CGPoint(x: 18.39, y: 45.15))
                fill8.addLine(to: CGPoint(x: 0.99, y: 12.34))
                fill8.addCurve(to: CGPoint(x: 8.37, y: 0), controlPoint1: CGPoint(x: -1.97, y: 6.75), controlPoint2: CGPoint(x: 2.06, y: 0))
                fill8.addLine(to: CGPoint(x: 10.21, y: 0))
                fill8.addCurve(to: CGPoint(x: 18.21, y: 5.15), controlPoint1: CGPoint(x: 13.65, y: 0), controlPoint2: CGPoint(x: 16.77, y: 2.01))
                fill8.addLine(to: CGPoint(x: 28.29, y: 27.1))
                fill8.close()
                context.saveGState()
                context.translateBy(x: 0.25, y: 0.12)
                fill8.usesEvenOddFillRule = true
                UIColor(hue: 0.578, saturation: 0.718, brightness: 0.933, alpha: 1).setFill()
                fill8.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 9 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Fill 11
            let fill11 = UIBezierPath()
            fill11.move(to: CGPoint(x: 8.5, y: 0))
            fill11.addCurve(to: CGPoint(x: 16.3, y: 11.85), controlPoint1: CGPoint(x: 14.6, y: 0), controlPoint2: CGPoint(x: 18.71, y: 6.25))
            fill11.addLine(to: CGPoint(x: 8.5, y: 30))
            fill11.addLine(to: CGPoint(x: 0.7, y: 11.85))
            fill11.addCurve(to: CGPoint(x: 8.5, y: 0), controlPoint1: CGPoint(x: -1.71, y: 6.25), controlPoint2: CGPoint(x: 2.4, y: 0))
            context.saveGState()
            context.translateBy(x: 50, y: 0)
            fill11.usesEvenOddFillRule = true
            UIColor(hue: 0.578, saturation: 0.718, brightness: 0.933, alpha: 1).setFill()
            fill11.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// FIND YOUR TRAINER TO
        let fINDYOURTRAINERTO = NSMutableAttributedString(string: "FIND YOUR TRAINER TODAY")
        fINDYOURTRAINERTO.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: fINDYOURTRAINERTO.length))
        fINDYOURTRAINERTO.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: fINDYOURTRAINERTO.length))
        context.saveGState()
        fINDYOURTRAINERTO.draw(in: CGRect(x: 109, y: 439, width: 158, height: 16))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawFYTTAppSignIn(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// lars.gadeby@whatwedo
        let larsgadebywhatwedo = NSMutableAttributedString(string: "lars.gadeby@whatwedo.se")
        larsgadebywhatwedo.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: larsgadebywhatwedo.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            larsgadebywhatwedo.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: larsgadebywhatwedo.length))
        }
        larsgadebywhatwedo.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: larsgadebywhatwedo.length))
        context.saveGState()
        larsgadebywhatwedo.draw(at: CGPoint(x: 51, y: 517))
        context.restoreGState()
        
        /// password_dots
        do {
            context.saveGState()
            context.translateBy(x: 52, y: 565)
            
            /// Oval 3
            let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy
            let oval3Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 16, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 2
            let oval3Copy2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 32, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy2.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 3
            let oval3Copy3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 48, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 4
            let oval3Copy4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 64, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy4.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 5
            let oval3Copy5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 80, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy5.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 6
            let oval3Copy6 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 95, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy6.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Logo
        do {
            context.saveGState()
            context.translateBy(x: 121, y: 172)
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 26.35)
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 134.34, y: 0))
                clip2.addLine(to: CGPoint(x: 134.34, y: 182.82))
                clip2.addLine(to: CGPoint(x: 0, y: 182.82))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.38)
                context.restoreGState()
                
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.apply(CGAffineTransform(translationX: 0, y: 0.38))
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 67.28, y: 61.82))
                fill1.addLine(to: CGPoint(x: 91.46, y: 11.68))
                fill1.addCurve(to: CGPoint(x: 110.47, y: 0), controlPoint1: CGPoint(x: 94.9, y: 4.56), controlPoint2: CGPoint(x: 102.31, y: 0))
                fill1.addLine(to: CGPoint(x: 114.44, y: 0))
                fill1.addCurve(to: CGPoint(x: 131.93, y: 28.25), controlPoint1: CGPoint(x: 129.49, y: 0), controlPoint2: CGPoint(x: 139.08, y: 15.49))
                fill1.addLine(to: CGPoint(x: 90.83, y: 101.62))
                fill1.addLine(to: CGPoint(x: 90.83, y: 160.12))
                fill1.addCurve(to: CGPoint(x: 67.28, y: 182.82), controlPoint1: CGPoint(x: 90.83, y: 172.66), controlPoint2: CGPoint(x: 80.28, y: 182.82))
                fill1.addCurve(to: CGPoint(x: 43.72, y: 160.12), controlPoint1: CGPoint(x: 54.27, y: 182.82), controlPoint2: CGPoint(x: 43.72, y: 172.66))
                fill1.addLine(to: CGPoint(x: 43.72, y: 102.99))
                fill1.addLine(to: CGPoint(x: 2.36, y: 28.15))
                fill1.addCurve(to: CGPoint(x: 19.9, y: 0), controlPoint1: CGPoint(x: -4.69, y: 15.4), controlPoint2: CGPoint(x: 4.9, y: 0))
                fill1.addLine(to: CGPoint(x: 24.28, y: 0))
                fill1.addCurve(to: CGPoint(x: 43.31, y: 11.74), controlPoint1: CGPoint(x: 32.45, y: 0), controlPoint2: CGPoint(x: 39.88, y: 4.58))
                fill1.addLine(to: CGPoint(x: 67.28, y: 61.82))
                fill1.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.38)
                fill1.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill1.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 46.91, y: 0)
                
                /// Clip 5
                let clip5 = UIBezierPath()
                clip5.move(to: CGPoint.zero)
                clip5.addLine(to: CGPoint(x: 39.31, y: 0))
                clip5.addLine(to: CGPoint(x: 39.31, y: 66.86))
                clip5.addLine(to: CGPoint(x: 0, y: 66.86))
                clip5.addLine(to: CGPoint.zero)
                clip5.close()
                context.saveGState()
                context.translateBy(x: 0.6, y: 0.1)
                context.restoreGState()
                
                
                /// Clip 5 (Outline Mask)
                context.saveGState()
                clip5.apply(CGAffineTransform(translationX: 0.6, y: 0.1))
                clip5.addClip()
                
                /// Fill 4
                let fill4 = UIBezierPath()
                fill4.move(to: CGPoint(x: 19.65, y: 0))
                fill4.addCurve(to: CGPoint(x: 37.69, y: 26.42), controlPoint1: CGPoint(x: 33.76, y: 0), controlPoint2: CGPoint(x: 43.26, y: 13.92))
                fill4.addLine(to: CGPoint(x: 19.65, y: 66.86))
                fill4.addLine(to: CGPoint(x: 1.62, y: 26.42))
                fill4.addCurve(to: CGPoint(x: 19.65, y: 0), controlPoint1: CGPoint(x: -3.95, y: 13.92), controlPoint2: CGPoint(x: 5.55, y: 0))
                context.saveGState()
                context.translateBy(x: 0.6, y: 0.1)
                fill4.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill4.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 5 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// Logoname
        do {
            context.saveGState()
            context.translateBy(x: 146, y: 394)
            
            /// Group 9
            do {
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                
                /// Clip 8
                let clip8 = UIBezierPath()
                clip8.move(to: CGPoint.zero)
                clip8.addLine(to: CGPoint(x: 21.71, y: 0))
                clip8.addLine(to: CGPoint(x: 21.71, y: 33.64))
                clip8.addLine(to: CGPoint(x: 0, y: 33.64))
                clip8.addLine(to: CGPoint.zero)
                clip8.close()
                context.saveGState()
                context.translateBy(x: 0.93, y: 0.36)
                context.restoreGState()
                
                
                /// Clip 8 (Outline Mask)
                context.saveGState()
                clip8.apply(CGAffineTransform(translationX: 0.93, y: 0.36))
                clip8.addClip()
                
                /// Fill 7
                let fill7 = UIBezierPath()
                fill7.move(to: CGPoint(x: 4.89, y: 33.64))
                fill7.addCurve(to: CGPoint(x: 0, y: 29.16), controlPoint1: CGPoint(x: 2.19, y: 33.64), controlPoint2: CGPoint(x: 0, y: 31.63))
                fill7.addLine(to: CGPoint(x: 0, y: 3.14))
                fill7.addCurve(to: CGPoint(x: 3.43, y: 0), controlPoint1: CGPoint(x: 0, y: 1.41), controlPoint2: CGPoint(x: 1.54, y: 0))
                fill7.addLine(to: CGPoint(x: 21.71, y: 0))
                fill7.addLine(to: CGPoint(x: 21.71, y: 7.29))
                fill7.addLine(to: CGPoint(x: 9.78, y: 7.29))
                fill7.addLine(to: CGPoint(x: 9.78, y: 13.71))
                fill7.addLine(to: CGPoint(x: 16.8, y: 13.71))
                fill7.addCurve(to: CGPoint(x: 20.78, y: 17.36), controlPoint1: CGPoint(x: 19, y: 13.71), controlPoint2: CGPoint(x: 20.78, y: 15.35))
                fill7.addCurve(to: CGPoint(x: 16.8, y: 21.01), controlPoint1: CGPoint(x: 20.78, y: 19.37), controlPoint2: CGPoint(x: 19, y: 21.01))
                fill7.addLine(to: CGPoint(x: 9.78, y: 21.01))
                fill7.addLine(to: CGPoint(x: 9.78, y: 29.16))
                fill7.addCurve(to: CGPoint(x: 4.89, y: 33.64), controlPoint1: CGPoint(x: 9.78, y: 31.63), controlPoint2: CGPoint(x: 7.59, y: 33.64))
                context.saveGState()
                context.translateBy(x: 0.93, y: 0.36)
                fill7.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill7.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 8 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 12
            do {
                context.saveGState()
                context.translateBy(x: 14.03, y: 0)
                
                /// Clip 11
                let clip11 = UIBezierPath()
                clip11.move(to: CGPoint.zero)
                clip11.addLine(to: CGPoint(x: 33.52, y: 0))
                clip11.addLine(to: CGPoint(x: 33.52, y: 33.64))
                clip11.addLine(to: CGPoint(x: 0, y: 33.64))
                clip11.addLine(to: CGPoint.zero)
                clip11.close()
                context.saveGState()
                context.translateBy(x: 0.94, y: 0.36)
                context.restoreGState()
                
                
                /// Clip 11 (Outline Mask)
                context.saveGState()
                clip11.apply(CGAffineTransform(translationX: 0.94, y: 0.36))
                clip11.addClip()
                
                /// Fill 10
                let fill10 = UIBezierPath()
                fill10.move(to: CGPoint(x: 16.76, y: 12.47))
                fill10.addLine(to: CGPoint(x: 21.7, y: 2.56))
                fill10.addCurve(to: CGPoint(x: 25.99, y: 0), controlPoint1: CGPoint(x: 22.47, y: 1), controlPoint2: CGPoint(x: 24.15, y: 0))
                fill10.addLine(to: CGPoint(x: 33.52, y: 0))
                fill10.addLine(to: CGPoint(x: 21.66, y: 20.5))
                fill10.addLine(to: CGPoint(x: 21.66, y: 29.16))
                fill10.addCurve(to: CGPoint(x: 16.87, y: 33.64), controlPoint1: CGPoint(x: 21.66, y: 31.63), controlPoint2: CGPoint(x: 19.52, y: 33.64))
                fill10.addLine(to: CGPoint(x: 16.65, y: 33.64))
                fill10.addCurve(to: CGPoint(x: 11.86, y: 29.16), controlPoint1: CGPoint(x: 14, y: 33.64), controlPoint2: CGPoint(x: 11.86, y: 31.63))
                fill10.addLine(to: CGPoint(x: 11.86, y: 20.78))
                fill10.addLine(to: CGPoint.zero)
                fill10.addLine(to: CGPoint(x: 7.56, y: 0))
                fill10.addCurve(to: CGPoint(x: 11.87, y: 2.57), controlPoint1: CGPoint(x: 9.41, y: 0), controlPoint2: CGPoint(x: 11.09, y: 1))
                fill10.addLine(to: CGPoint(x: 16.76, y: 12.47))
                fill10.close()
                context.saveGState()
                context.translateBy(x: 0.94, y: 0.36)
                fill10.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill10.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 11 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 15
            do {
                context.saveGState()
                context.translateBy(x: 39.75, y: 0)
                
                /// Clip 14
                let clip14 = UIBezierPath()
                clip14.move(to: CGPoint.zero)
                clip14.addLine(to: CGPoint(x: 25.27, y: 0))
                clip14.addLine(to: CGPoint(x: 25.27, y: 33.64))
                clip14.addLine(to: CGPoint(x: 0, y: 33.64))
                clip14.addLine(to: CGPoint.zero)
                clip14.close()
                context.saveGState()
                context.translateBy(x: 0.91, y: 0.36)
                context.restoreGState()
                
                
                /// Clip 14 (Outline Mask)
                context.saveGState()
                clip14.apply(CGAffineTransform(translationX: 0.91, y: 0.36))
                clip14.addClip()
                
                /// Fill 13
                let fill13 = UIBezierPath()
                fill13.move(to: CGPoint(x: 11.75, y: 33.64))
                fill13.addLine(to: CGPoint(x: 11.6, y: 33.64))
                fill13.addCurve(to: CGPoint(x: 6.83, y: 29.16), controlPoint1: CGPoint(x: 8.96, y: 33.64), controlPoint2: CGPoint(x: 6.83, y: 31.63))
                fill13.addLine(to: CGPoint(x: 6.83, y: 7.43))
                fill13.addLine(to: CGPoint(x: 0, y: 7.43))
                fill13.addLine(to: CGPoint.zero)
                fill13.addLine(to: CGPoint(x: 25.27, y: 0))
                fill13.addLine(to: CGPoint(x: 25.27, y: 7.43))
                fill13.addLine(to: CGPoint(x: 16.53, y: 7.43))
                fill13.addLine(to: CGPoint(x: 16.53, y: 29.16))
                fill13.addCurve(to: CGPoint(x: 11.75, y: 33.64), controlPoint1: CGPoint(x: 16.53, y: 31.63), controlPoint2: CGPoint(x: 14.39, y: 33.64))
                context.saveGState()
                context.translateBy(x: 0.91, y: 0.36)
                fill13.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill13.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 14 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 18
            do {
                context.saveGState()
                context.translateBy(x: 56.11, y: 0)
                
                /// Clip 17
                let clip17 = UIBezierPath()
                clip17.move(to: CGPoint.zero)
                clip17.addLine(to: CGPoint(x: 26.89, y: 0))
                clip17.addLine(to: CGPoint(x: 26.89, y: 34))
                clip17.addLine(to: CGPoint(x: 0, y: 34))
                clip17.addLine(to: CGPoint.zero)
                clip17.close()
                
                
                /// Clip 17 (Outline Mask)
                context.saveGState()
                clip17.addClip()
                
                /// Fill 16
                let fill16 = UIBezierPath()
                fill16.move(to: CGPoint(x: 13.53, y: 34))
                fill16.addLine(to: CGPoint(x: 13.38, y: 34))
                fill16.addCurve(to: CGPoint(x: 8.66, y: 29.48), controlPoint1: CGPoint(x: 10.78, y: 34), controlPoint2: CGPoint(x: 8.66, y: 31.97))
                fill16.addLine(to: CGPoint(x: 8.66, y: 7.51))
                fill16.addLine(to: CGPoint(x: 0, y: 7.51))
                fill16.addLine(to: CGPoint.zero)
                fill16.addLine(to: CGPoint(x: 23.04, y: 0))
                fill16.addCurve(to: CGPoint(x: 26.89, y: 3.69), controlPoint1: CGPoint(x: 25.16, y: 0), controlPoint2: CGPoint(x: 26.89, y: 1.65))
                fill16.addLine(to: CGPoint(x: 26.89, y: 3.83))
                fill16.addCurve(to: CGPoint(x: 23.04, y: 7.51), controlPoint1: CGPoint(x: 26.89, y: 5.86), controlPoint2: CGPoint(x: 25.16, y: 7.51))
                fill16.addLine(to: CGPoint(x: 18.25, y: 7.51))
                fill16.addLine(to: CGPoint(x: 18.25, y: 29.48))
                fill16.addCurve(to: CGPoint(x: 13.53, y: 34), controlPoint1: CGPoint(x: 18.25, y: 31.97), controlPoint2: CGPoint(x: 16.14, y: 34))
                context.saveGState()
                fill16.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill16.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 17 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawFindTrainingFilterMenu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// Rectangle 5
        let rectangle5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 728))
        context.saveGState()
        context.translateBy(x: 0, y: 44)
        UIColor.white.setFill()
        rectangle5.fill()
        context.restoreGState()
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// MAP
        let mAP = NSMutableAttributedString(string: "MAP")
        mAP.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: mAP.length))
        mAP.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: mAP.length))
        context.saveGState()
        mAP.draw(at: CGPoint(x: 172, y: 294))
        context.restoreGState()
        
        /// Filter
        let filter = NSMutableAttributedString(string: "Filter")
        filter.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 26)!, range: NSRange(location: 0, length: filter.length))
        filter.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: filter.length))
        context.saveGState()
        filter.draw(at: CGPoint(x: 35, y: 72))
        context.restoreGState()
        
        /// icn/training/crossfit-circel
        // Warning: New symbols are not supported.
        
        /// icn/training/fighting-circel
        // Warning: New symbols are not supported.
        
        /// icn/training/gym-circel
        // Warning: New symbols are not supported.
        
        /// icn/training/running-circel
        // Warning: New symbols are not supported.
        
        /// icn/training/yoga-circel
        // Warning: New symbols are not supported.
        
        /// Crossfit
        let crossfit = NSMutableAttributedString(string: "Crossfit")
        crossfit.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: crossfit.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            crossfit.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: crossfit.length))
        }
        crossfit.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: crossfit.length))
        context.saveGState()
        crossfit.draw(at: CGPoint(x: 34, y: 211))
        context.restoreGState()
        
        /// Type of training
        let typeOfTraining = NSMutableAttributedString(string: "Type of training")
        typeOfTraining.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: typeOfTraining.length))
        typeOfTraining.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: typeOfTraining.length))
        context.saveGState()
        typeOfTraining.draw(at: CGPoint(x: 38, y: 126))
        context.restoreGState()
        
        /// Area
        let area = NSMutableAttributedString(string: "Area")
        area.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: area.length))
        area.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: area.length))
        context.saveGState()
        area.draw(at: CGPoint(x: 32, y: 254))
        context.restoreGState()
        
        /// Price per session
        let pricePerSession = NSMutableAttributedString(string: "Price per session")
        pricePerSession.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: pricePerSession.length))
        pricePerSession.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: pricePerSession.length))
        context.saveGState()
        pricePerSession.draw(at: CGPoint(x: 32, y: 441))
        context.restoreGState()
        
        /// City
        let city = NSMutableAttributedString(string: "City")
        city.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: city.length))
        city.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: city.length))
        context.saveGState()
        city.draw(at: CGPoint(x: 32, y: 343))
        context.restoreGState()
        
        /// Boxing
        let boxing = NSMutableAttributedString(string: "Boxing")
        boxing.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: boxing.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            boxing.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: boxing.length))
        }
        boxing.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: boxing.length))
        context.saveGState()
        boxing.draw(at: CGPoint(x: 100, y: 211))
        context.restoreGState()
        
        /// Gym
        let gym = NSMutableAttributedString(string: "Gym")
        gym.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: gym.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            gym.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gym.length))
        }
        gym.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: gym.length))
        context.saveGState()
        gym.draw(at: CGPoint(x: 173, y: 211))
        context.restoreGState()
        
        /// Running
        let running = NSMutableAttributedString(string: "Running")
        running.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: running.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            running.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: running.length))
        }
        running.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: running.length))
        context.saveGState()
        running.draw(at: CGPoint(x: 229, y: 211))
        context.restoreGState()
        
        /// Yoga
        let yoga = NSMutableAttributedString(string: "Yoga")
        yoga.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: yoga.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            yoga.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: yoga.length))
        }
        yoga.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: yoga.length))
        context.saveGState()
        yoga.draw(at: CGPoint(x: 305, y: 211))
        context.restoreGState()
        
        /// Cells/Slider
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy
        // Warning: New symbols are not supported.
        
        /// 5 km
        let _5Km = NSMutableAttributedString(string: "5 km")
        _5Km.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _5Km.length))
        _5Km.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _5Km.length))
        context.saveGState()
        _5Km.draw(at: CGPoint(x: 32, y: 311))
        context.restoreGState()
        
        /// 500 SEK
        let _500SEK = NSMutableAttributedString(string: "500 SEK")
        _500SEK.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _500SEK.length))
        _500SEK.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _500SEK.length))
        context.saveGState()
        _500SEK.draw(at: CGPoint(x: 32, y: 509))
        context.restoreGState()
        
        /// 50 km
        let _50Km = NSMutableAttributedString(string: "50 km")
        _50Km.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _50Km.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            _50Km.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _50Km.length))
        }
        _50Km.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _50Km.length))
        context.saveGState()
        _50Km.draw(at: CGPoint(x: 309, y: 311))
        context.restoreGState()
        
        /// 2000 SEK
        let _2000SEK = NSMutableAttributedString(string: "2000 SEK")
        _2000SEK.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _2000SEK.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            _2000SEK.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _2000SEK.length))
        }
        _2000SEK.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _2000SEK.length))
        context.saveGState()
        _2000SEK.draw(at: CGPoint(x: 292, y: 509))
        context.restoreGState()
        
        /// 25 km
        let _25Km = NSMutableAttributedString(string: " 25 km")
        _25Km.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _25Km.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _25Km.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _25Km.length))
        }
        _25Km.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _25Km.length))
        context.saveGState()
        _25Km.draw(at: CGPoint(x: 162, y: 268))
        context.restoreGState()
        
        /// 1000 SEK
        let _1000SEK = NSMutableAttributedString(string: "1000 SEK")
        _1000SEK.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _1000SEK.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _1000SEK.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1000SEK.length))
        }
        _1000SEK.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _1000SEK.length))
        context.saveGState()
        _1000SEK.draw(at: CGPoint(x: 156, y: 466))
        context.restoreGState()
        
        /// input_txtfield copy 5
        // Warning: New symbols are not supported.
        
        /// Stockholm
        let stockholm = NSMutableAttributedString(string: "Stockholm")
        stockholm.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: stockholm.length))
        stockholm.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: stockholm.length))
        context.saveGState()
        stockholm.draw(at: CGPoint(x: 38, y: 384))
        context.restoreGState()
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawFindTraining(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// MAP
        do {
            context.saveGState()
            context.translateBy(x: -5, y: 44)
            
            /// Mask
            let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 386, height: 735))
            context.saveGState()
            UIColor(hue: 0.655, saturation: 0.14, brightness: 0.213, alpha: 1).setFill()
            mask.fill()
            context.restoreGState()
            
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Bitmap
            // Warning: Image layers are not supported.
            
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn/filter
        // Warning: New symbols are not supported.
        
        /// MAP
        let mAP2 = NSMutableAttributedString(string: "MAP")
        mAP2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: mAP2.length))
        mAP2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: mAP2.length))
        context.saveGState()
        mAP2.draw(at: CGPoint(x: 172, y: 314))
        context.restoreGState()
        
        /// Trainer_pin
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 4
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 11
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 5
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 6
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 7
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 12
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 8
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 9
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 2
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 3
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 10
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawFindTrainingTrainerSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// MAP
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 44)
            
            /// Mask
            let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 528))
            context.saveGState()
            UIColor(hue: 0.655, saturation: 0.14, brightness: 0.213, alpha: 1).setFill()
            mask.fill()
            context.restoreGState()
            
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Bitmap
            // Warning: Image layers are not supported.
            
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// bg plate
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 559)
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 163.6, y: 12.9))
            combinedShape.addCurve(to: CGPoint(x: 175.03, y: 6.37), controlPoint1: CGPoint(x: 168.17, y: 12.45), controlPoint2: CGPoint(x: 172.42, y: 10.16))
            combinedShape.addCurve(to: CGPoint(x: 187.17, y: 0), controlPoint1: CGPoint(x: 177.67, y: 2.53), controlPoint2: CGPoint(x: 182.12, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 199.32, y: 6.37), controlPoint1: CGPoint(x: 192.22, y: 0), controlPoint2: CGPoint(x: 196.68, y: 2.53))
            combinedShape.addCurve(to: CGPoint(x: 210.74, y: 12.9), controlPoint1: CGPoint(x: 201.93, y: 10.16), controlPoint2: CGPoint(x: 206.18, y: 12.45))
            combinedShape.addLine(to: CGPoint(x: 375, y: 12.9))
            combinedShape.addLine(to: CGPoint(x: 375, y: 252.9))
            combinedShape.addLine(to: CGPoint(x: 0, y: 252.9))
            combinedShape.addLine(to: CGPoint(x: 0, y: 12.9))
            combinedShape.addLine(to: CGPoint(x: 163.6, y: 12.9))
            combinedShape.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0.1)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(combinedShape.cgPath)
            context.addRect(combinedShape.bounds.insetBy(dx: -20, dy: -22))
            context.clip(using: .evenOdd)
            context.translateBy(x: -396, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 396, y: -2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 20 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            combinedShape.fill()
            context.restoreGState()
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            
            /// ico_swipe_up
            // Warning: New symbols are not supported.
            
            
            /// Swipe up for more
            let swipeUpForMore = NSMutableAttributedString(string: "Swipe up for more")
            swipeUpForMore.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: swipeUpForMore.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                swipeUpForMore.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: swipeUpForMore.length))
            }
            swipeUpForMore.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: swipeUpForMore.length))
            context.saveGState()
            swipeUpForMore.draw(at: CGPoint(x: 146, y: 16))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn/filter
        // Warning: New symbols are not supported.
        
        /// MAP
        let mAP2 = NSMutableAttributedString(string: "MAP")
        mAP2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: mAP2.length))
        mAP2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: mAP2.length))
        context.saveGState()
        mAP2.draw(at: CGPoint(x: 172, y: 314))
        context.restoreGState()
        
        /// Trainer_pin
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 4
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 11
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 5
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 6
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 7
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 12
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 8
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 9
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 2
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 3
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 10
        // Warning: New symbols are not supported.
        
        /// profile_map-view
        // Warning: New symbols are not supported.
        
        /// My name is Pawel ”Pa
        let myNameIsPawelPa = NSMutableAttributedString(string: "My name is Pawel ”Pablo” Krupa and I am professional dancer/choreographer/teacher as well as Personal Trainer living and … more")
        myNameIsPawelPa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: myNameIsPawelPa.length))
        myNameIsPawelPa.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: myNameIsPawelPa.length))
        context.saveGState()
        myNameIsPawelPa.draw(in: CGRect(x: 142, y: 643, width: 197, height: 80))
        context.restoreGState()
        
        /// icn_fighting
        do {
            context.saveGState()
            context.translateBy(x: 141, y: 606)
            
            /// Rectangle 3
            let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 31, height: 18.48), cornerRadius: 29)
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangle3.fill()
            context.restoreGState()
            
            
            /// icn/fighting
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// icn/burgermenu/close
        // Warning: New symbols are not supported.
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 144, y: 726)
            
            /// Group
            do {
                context.saveGState()
                
                /// Oval 2
                let oval2 = UIBezierPath()
                oval2.move(to: CGPoint(x: 5, y: 16.55))
                oval2.addCurve(to: CGPoint(x: 10, y: 5), controlPoint1: CGPoint(x: 5, y: 16.55), controlPoint2: CGPoint(x: 10, y: 7.76))
                oval2.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.24), controlPoint2: CGPoint(x: 7.76, y: 0))
                oval2.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.24))
                oval2.addCurve(to: CGPoint(x: 5, y: 16.55), controlPoint1: CGPoint(x: 0, y: 7.76), controlPoint2: CGPoint(x: 5, y: 16.55))
                oval2.close()
                context.saveGState()
                oval2.lineJoinStyle = .round
                oval2.lineCapStyle = .round
                oval2.lineWidth = 1
                UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setStroke()
                oval2.stroke()
                context.restoreGState()
                
                
                /// Oval
                let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 6.8, height: 6.8))
                context.saveGState()
                context.translateBy(x: 1.6, y: 1.6)
                UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
                oval.fill()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            /// View trainer on map
            let viewTrainerOnMap = NSMutableAttributedString(string: "View trainer on map")
            viewTrainerOnMap.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: viewTrainerOnMap.length))
            viewTrainerOnMap.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: viewTrainerOnMap.length))
            context.saveGState()
            viewTrainerOnMap.draw(at: CGPoint(x: 14, y: 0))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// icn_gym
        do {
            context.saveGState()
            context.translateBy(x: 179, y: 606)
            
            /// Rectangle 3
            let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 31, height: 18.48), cornerRadius: 29)
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangle10.fill()
            context.restoreGState()
            
            
            /// icn/gym
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// ico_swipe_up
        // Warning: New symbols are not supported.
        
        /// ico_swipe_up copy
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawBooking(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Group 7
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 738)
            
            /// Path 2
            let path2 = UIBezierPath()
            path2.move(to: CGPoint.zero)
            path2.addLine(to: CGPoint(x: 10, y: 10.29))
            path2.addLine(to: CGPoint(x: 0, y: 20))
            context.saveGState()
            context.translateBy(x: 326, y: 0)
            path2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            path2.stroke()
            context.restoreGState()
            
            
            /// Path 2 Copy
            let path2Copy = UIBezierPath()
            path2Copy.move(to: CGPoint.zero)
            path2Copy.addLine(to: CGPoint(x: 10, y: 10.29))
            path2Copy.addLine(to: CGPoint(x: 0, y: 20))
            context.saveGState()
            context.translateBy(x: 5, y: 10)
            context.rotate(by: 540 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -10)
            path2Copy.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            path2Copy.stroke()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// My name is Pawel ”Pa
        let myNameIsPawelPa = NSMutableAttributedString(string: "My name is Pawel ”Pablo” Krupa and I am professional dancer/choreographer/teacher as well as Personal Trainer living and working in Stockholm. I have been connected with dance for more than 20 years starting from ballroom, modern and recently working with house and hip hop dance. I have been blessed to work with the best in Sweden and in the world by: taking classes and workshops and being part of productions like: Striving to Achieve; Ninja (Richfam).")
        myNameIsPawelPa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: myNameIsPawelPa.length))
        myNameIsPawelPa.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: myNameIsPawelPa.length))
        context.saveGState()
        myNameIsPawelPa.draw(in: CGRect(x: 35, y: 234, width: 304, height: 173))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 30, y: 406)
            
            /// Pick Date
            let pickDate = NSMutableAttributedString(string: "Pick Date")
            pickDate.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: pickDate.length))
            pickDate.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pickDate.length))
            context.saveGState()
            pickDate.draw(in: CGRect(x: 0, y: 0, width: 96, height: 20))
            context.restoreGState()
            
            
            /// Pick Time
            let pickTime = NSMutableAttributedString(string: "Pick Time")
            pickTime.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: pickTime.length))
            pickTime.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pickTime.length))
            context.saveGState()
            pickTime.draw(in: CGRect(x: 0, y: 53, width: 96, height: 20))
            context.restoreGState()
            
            
            /// ico_swipe_up
            // Warning: New symbols are not supported.
            
            
            /// ico_swipe_up copy
            // Warning: New symbols are not supported.
            
            
            /// Path 3
            let path3 = UIBezierPath()
            path3.move(to: CGPoint(x: 0, y: 1))
            path3.addLine(to: CGPoint(x: 300.99, y: 1))
            context.saveGState()
            context.translateBy(x: -0, y: 22)
            path3.lineWidth = 0.5
            UIColor(white: 0.21, alpha: 1).setStroke()
            path3.stroke()
            context.restoreGState()
            
            
            /// Path 3 Copy
            let path3Copy = UIBezierPath()
            path3Copy.move(to: CGPoint(x: 0, y: 1))
            path3Copy.addLine(to: CGPoint(x: 300.99, y: 1))
            context.saveGState()
            context.translateBy(x: -0, y: 73)
            path3Copy.lineWidth = 0.5
            UIColor(white: 0.21, alpha: 1).setStroke()
            path3Copy.stroke()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 204, y: 679)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 148, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Book now
            let bookNow = NSMutableAttributedString(string: "Book now")
            bookNow.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: bookNow.length))
            bookNow.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: bookNow.length))
            context.saveGState()
            bookNow.draw(at: CGPoint(x: 45, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group 6 Copy
        do {
            context.saveGState()
            context.translateBy(x: 31, y: 679)
            
            /// Rectangle 8
            let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 148, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangle10.fill()
            context.restoreGState()
            
            
            /// Cancel
            let cancel = NSMutableAttributedString(string: "Cancel")
            cancel.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cancel.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                cancel.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancel.length))
            }
            cancel.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: cancel.length))
            context.saveGState()
            cancel.draw(at: CGPoint(x: 55, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Next trainer
        let nextTrainer = NSMutableAttributedString(string: "Next trainer")
        nextTrainer.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: nextTrainer.length))
        nextTrainer.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: nextTrainer.length))
        context.saveGState()
        nextTrainer.draw(at: CGPoint(x: 160, y: 740))
        context.restoreGState()
        
        /// profile_map-view copy
        // Warning: New symbols are not supported.
        
        /// at 24/7 - Kungsträdg
        let at247Kungstradg = NSMutableAttributedString(string: "at 24/7 -  Kungsträdgården")
        at247Kungstradg.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: at247Kungstradg.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            at247Kungstradg.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: at247Kungstradg.length))
        }
        at247Kungstradg.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: at247Kungstradg.length))
        context.saveGState()
        at247Kungstradg.draw(in: CGRect(x: 171, y: 210, width: 163.63, height: 17))
        context.restoreGState()
        
        /// Package deals
        let packageDeals = NSMutableAttributedString(string: "Package deals")
        packageDeals.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: packageDeals.length))
        packageDeals.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: packageDeals.length))
        context.saveGState()
        packageDeals.draw(in: CGRect(x: 30, y: 582, width: 158, height: 20))
        context.restoreGState()
        
        /// btn_workoutgroups_selectable copy 3
        // Warning: New symbols are not supported.
        
        /// btn_workoutgroups_selectable copy 4
        // Warning: New symbols are not supported.
        
        /// btn_workoutgroups_selectable copy 5
        // Warning: New symbols are not supported.
        
        /// Pick type of trainin
        let pickTypeOfTrainin = NSMutableAttributedString(string: "Pick type of training")
        pickTypeOfTrainin.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: pickTypeOfTrainin.length))
        pickTypeOfTrainin.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pickTypeOfTrainin.length))
        context.saveGState()
        pickTypeOfTrainin.draw(in: CGRect(x: 30, y: 499, width: 158, height: 20))
        context.restoreGState()
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 30, y: 537)
            
            /// icn_crossfit
            // Warning: New symbols are not supported.
            
            
            /// icn_gym
            // Warning: New symbols are not supported.
            
            
            /// icn_yoga copy
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// +
        let layer = NSMutableAttributedString(string: "+")
        layer.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 42)!, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        layer.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(at: CGPoint(x: 60, y: 77))
        context.restoreGState()
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 35, y: 209)
            
            /// Group
            do {
                context.saveGState()
                
                /// Oval 2
                let oval2 = UIBezierPath()
                oval2.move(to: CGPoint(x: 5, y: 16.55))
                oval2.addCurve(to: CGPoint(x: 10, y: 5), controlPoint1: CGPoint(x: 5, y: 16.55), controlPoint2: CGPoint(x: 10, y: 7.76))
                oval2.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 10, y: 2.24), controlPoint2: CGPoint(x: 7.76, y: 0))
                oval2.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 2.24, y: 0), controlPoint2: CGPoint(x: 0, y: 2.24))
                oval2.addCurve(to: CGPoint(x: 5, y: 16.55), controlPoint1: CGPoint(x: 0, y: 7.76), controlPoint2: CGPoint(x: 5, y: 16.55))
                oval2.close()
                context.saveGState()
                oval2.lineJoinStyle = .round
                oval2.lineCapStyle = .round
                oval2.lineWidth = 1
                UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setStroke()
                oval2.stroke()
                context.restoreGState()
                
                
                /// Oval
                let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 6.8, height: 6.8))
                context.saveGState()
                context.translateBy(x: 1.6, y: 1.6)
                UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
                oval.fill()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            /// View on map
            let viewOnMap = NSMutableAttributedString(string: "View on map")
            viewOnMap.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: viewOnMap.length))
            viewOnMap.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: viewOnMap.length))
            context.saveGState()
            viewOnMap.draw(at: CGPoint(x: 14, y: 0))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Add to favourites
        let addToFavourites = NSMutableAttributedString(string: "Add to\nfavourites")
        addToFavourites.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: addToFavourites.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 11
            paragraphStyle.minimumLineHeight = 11
            addToFavourites.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: addToFavourites.length))
        }
        addToFavourites.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: addToFavourites.length))
        context.saveGState()
        addToFavourites.draw(at: CGPoint(x: 43, y: 128))
        context.restoreGState()
        
        /// Recommend this train
        let recommendThisTrain = NSMutableAttributedString(string: "Recommend\nthis trainer")
        recommendThisTrain.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: recommendThisTrain.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 11
            paragraphStyle.minimumLineHeight = 11
            recommendThisTrain.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: recommendThisTrain.length))
        }
        recommendThisTrain.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: recommendThisTrain.length))
        context.saveGState()
        recommendThisTrain.draw(at: CGPoint(x: 265, y: 128))
        context.restoreGState()
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 287, y: 94)
            
            /// Oval 4
            let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 28, height: 28))
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setFill()
            oval4.fill()
            context.restoreGState()
            
            
            /// Group 5
            do {
                context.saveGState()
                context.translateBy(x: 6.79, y: 5.94)
                
                /// Stroke 3
                let stroke3 = UIBezierPath()
                stroke3.move(to: CGPoint(x: 5.03, y: 4.95))
                stroke3.addLine(to: CGPoint(x: 9.88, y: 4.95))
                stroke3.addCurve(to: CGPoint(x: 11, y: 6.1), controlPoint1: CGPoint(x: 10.5, y: 4.95), controlPoint2: CGPoint(x: 11, y: 5.46))
                stroke3.addCurve(to: CGPoint(x: 9.88, y: 7.26), controlPoint1: CGPoint(x: 11, y: 6.74), controlPoint2: CGPoint(x: 10.5, y: 7.26))
                stroke3.addLine(to: CGPoint(x: 8.81, y: 7.26))
                stroke3.addLine(to: CGPoint(x: 10.37, y: 7.26))
                stroke3.addCurve(to: CGPoint(x: 11.59, y: 8.42), controlPoint1: CGPoint(x: 11.04, y: 7.26), controlPoint2: CGPoint(x: 11.59, y: 7.78))
                stroke3.addCurve(to: CGPoint(x: 10.37, y: 9.58), controlPoint1: CGPoint(x: 11.59, y: 9.06), controlPoint2: CGPoint(x: 11.04, y: 9.58))
                stroke3.addLine(to: CGPoint(x: 8.78, y: 9.58))
                stroke3.addLine(to: CGPoint(x: 10.04, y: 9.58))
                stroke3.addCurve(to: CGPoint(x: 11.25, y: 10.75), controlPoint1: CGPoint(x: 10.71, y: 9.58), controlPoint2: CGPoint(x: 11.25, y: 10.1))
                stroke3.addCurve(to: CGPoint(x: 10.04, y: 11.92), controlPoint1: CGPoint(x: 11.25, y: 11.4), controlPoint2: CGPoint(x: 10.71, y: 11.92))
                stroke3.addLine(to: CGPoint(x: 8.94, y: 11.92))
                stroke3.addCurve(to: CGPoint(x: 10.16, y: 13.17), controlPoint1: CGPoint(x: 9.61, y: 11.92), controlPoint2: CGPoint(x: 10.16, y: 12.48))
                stroke3.addCurve(to: CGPoint(x: 8.94, y: 14.42), controlPoint1: CGPoint(x: 10.16, y: 13.86), controlPoint2: CGPoint(x: 9.61, y: 14.42))
                stroke3.addLine(to: CGPoint(x: 7.3, y: 14.42))
                stroke3.addLine(to: CGPoint(x: 4.08, y: 14.42))
                stroke3.addCurve(to: CGPoint(x: 2.93, y: 14.3), controlPoint1: CGPoint(x: 3.7, y: 14.42), controlPoint2: CGPoint(x: 3.31, y: 14.38))
                stroke3.addCurve(to: CGPoint(x: 0, y: 13.1), controlPoint1: CGPoint(x: 1.96, y: 14.1), controlPoint2: CGPoint(x: 0.16, y: 13.64))
                stroke3.addLine(to: CGPoint(x: 0, y: 4.87))
                stroke3.addCurve(to: CGPoint(x: 4.34, y: 2.25), controlPoint1: CGPoint(x: 0, y: 4.87), controlPoint2: CGPoint(x: 3.91, y: 3.15))
                stroke3.addCurve(to: CGPoint(x: 4.8, y: 0.92), controlPoint1: CGPoint(x: 4.5, y: 1.93), controlPoint2: CGPoint(x: 4.66, y: 1.43))
                stroke3.addCurve(to: CGPoint(x: 7.04, y: 0.69), controlPoint1: CGPoint(x: 5.09, y: -0.18), controlPoint2: CGPoint(x: 6.58, y: -0.34))
                stroke3.addCurve(to: CGPoint(x: 7.19, y: 2.16), controlPoint1: CGPoint(x: 7.22, y: 1.09), controlPoint2: CGPoint(x: 7.3, y: 1.58))
                stroke3.addCurve(to: CGPoint(x: 5.91, y: 4.95), controlPoint1: CGPoint(x: 6.75, y: 4.4), controlPoint2: CGPoint(x: 5.91, y: 4.95))
                context.saveGState()
                context.translateBy(x: 3.69, y: 0)
                stroke3.usesEvenOddFillRule = true
                UIColor.white.setFill()
                stroke3.fill()
                stroke3.lineJoinStyle = .round
                stroke3.lineCapStyle = .round
                stroke3.lineWidth = 1
                UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setStroke()
                stroke3.stroke()
                context.restoreGState()
                
                
                /// Stroke 1
                let stroke1 = UIBezierPath()
                stroke1.move(to: CGPoint(x: 2.94, y: 10.15))
                stroke1.addLine(to: CGPoint(x: 0, y: 10.15))
                stroke1.addLine(to: CGPoint.zero)
                stroke1.addLine(to: CGPoint(x: 2.94, y: 0))
                stroke1.addCurve(to: CGPoint(x: 4.21, y: 1.25), controlPoint1: CGPoint(x: 3.64, y: 0), controlPoint2: CGPoint(x: 4.21, y: 0.56))
                stroke1.addLine(to: CGPoint(x: 4.21, y: 8.9))
                stroke1.addCurve(to: CGPoint(x: 2.94, y: 10.15), controlPoint1: CGPoint(x: 4.21, y: 9.59), controlPoint2: CGPoint(x: 3.64, y: 10.15))
                stroke1.close()
                context.saveGState()
                context.translateBy(x: -0, y: 4.27)
                stroke1.usesEvenOddFillRule = true
                UIColor.white.setFill()
                stroke1.fill()
                stroke1.lineWidth = 1
                UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setStroke()
                stroke1.stroke()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawCheckInUser(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 92, y: 657)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 192, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Check In
            let checkIn = NSMutableAttributedString(string: "Check In")
            checkIn.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: checkIn.length))
            checkIn.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: checkIn.length))
            context.saveGState()
            checkIn.draw(at: CGPoint(x: 71, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Rectangle 12
        let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 175, height: 175))
        context.saveGState()
        context.translateBy(x: 100, y: 236)
        context.saveGState()
        rectangle12.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle12.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle12.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 153.5, y: 68.5))
        combinedShape.addLine(to: CGPoint(x: 222, y: 68.5))
        combinedShape.addLine(to: CGPoint(x: 222, y: 153.5))
        combinedShape.addLine(to: CGPoint(x: 153.5, y: 153.5))
        combinedShape.addLine(to: CGPoint(x: 153.5, y: 222))
        combinedShape.addLine(to: CGPoint(x: 68.5, y: 222))
        combinedShape.addLine(to: CGPoint(x: 68.5, y: 153.5))
        combinedShape.addLine(to: CGPoint(x: 0, y: 153.5))
        combinedShape.addLine(to: CGPoint(x: 0, y: 68.5))
        combinedShape.addLine(to: CGPoint(x: 68.5, y: 68.5))
        combinedShape.addLine(to: CGPoint(x: 68.5, y: 0))
        combinedShape.addLine(to: CGPoint(x: 153.5, y: 0))
        combinedShape.addLine(to: CGPoint(x: 153.5, y: 68.5))
        combinedShape.close()
        context.saveGState()
        context.translateBy(x: 77, y: 212)
        combinedShape.usesEvenOddFillRule = true
        UIColor.white.setFill()
        combinedShape.fill()
        context.restoreGState()
        
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.translateBy(x: 145, y: 280)
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawConditionAndTerms(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// Condition & Terms
        let conditionTerms = NSMutableAttributedString(string: "Condition & Terms")
        conditionTerms.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 26)!, range: NSRange(location: 0, length: conditionTerms.length))
        conditionTerms.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: conditionTerms.length))
        context.saveGState()
        conditionTerms.draw(at: CGPoint(x: 66, y: 73))
        context.restoreGState()
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// THIS NEEDS TO BE REP
        let tHISNEEDSTOBEREP = NSMutableAttributedString(string: "THIS NEEDS TO BE REPLACED WITH PROPER TEXT!\nYou can reset your vibration from a negative one to a positive one by simply choosing different words and different thoughts. It’s as easy as asking yourself, “So what do I want?” As I’ve said before, when you talk about what you don’t want and then talk about what you do want the words change. When the words change the vibration changes and you can only hold one vibration at a time. In other words, you are resetting your vibration. The best news of all is that the Law of Attraction doesn’t remember what vibration you were sending out five minutes ago, five days ago, five months ago or 50 years ago. And the Law of Attraction doesn’t keep score of how long you may have been sending out or emitting a vibration. It’s only checking on the vibration you are offering right now in this very moment and matching it with more of the same.\n\nRemember, the Law of Attraction always matches vibrations in the current moment (hence the expression, the point of power is in the present.) You are always at choice as to whether you want to reset your vibration or keep it as it is. If you like what you’re getting, celebrate it and in your celebration you’ll get more of the same from the Law of Attraction. If you don’t like what you are getting, use your reset button to change your vibration which will change the results you are experiencing.")
        tHISNEEDSTOBEREP.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: tHISNEEDSTOBEREP.length))
        context.saveGState()
        tHISNEEDSTOBEREP.draw(in: CGRect(x: 41, y: 141, width: 289, height: 401))
        context.restoreGState()
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawMenuOpen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// iPhone X/Status Bars/Status Bar (Black)
            // Warning: New symbols are not supported.
            
            
            /// img_profiles
            // Warning: New symbols are not supported.
            
            
            /// John Doe
            let johnDoe = NSMutableAttributedString(string: "John Doe")
            johnDoe.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: johnDoe.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                johnDoe.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: johnDoe.length))
            }
            johnDoe.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
            context.saveGState()
            johnDoe.draw(in: CGRect(x: 126, y: 66, width: 123, height: 49))
            context.restoreGState()
            
            
            /// Level
            do {
                context.saveGState()
                context.translateBy(x: 75, y: 243)
                
                /// Rectangle 9
                let rectangle9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 226, height: 20))
                context.saveGState()
                context.setAlpha(0.5)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.saveGState()
                    UIRectClip(rectangle9.bounds)
                    context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                    context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                    do {
                        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                        rectangle9.fill()
                        context.setBlendMode(.destinationOut)
                        context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                        do {
                            context.translateBy(x: -226, y: 0)
                            do {
                                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 226, y: 1)).applying(baseTransform)
                                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                            }
                            UIColor.black.setFill()
                            rectangle9.fill()
                        }
                        context.endTransparencyLayer()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    context.saveGState()
                    rectangle9.lineWidth = 2
                    context.beginPath()
                    context.addPath(rectangle9.cgPath)
                    context.clip(using: .evenOdd)
                    UIColor(white: 0.81, alpha: 1).setStroke()
                    rectangle9.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                
                /// Rectangle 9
                let rectangle10 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 113, height: 20))
                context.saveGState()
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                rectangle10.fill()
                context.saveGState()
                UIRectClip(rectangle10.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.beginTransparencyLayer(in: rectangle10.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                    rectangle10.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle10.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -113, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 113, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle10.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            /// icn_running copy
            // Warning: New symbols are not supported.
            
            
            /// icn_crossfit copy
            // Warning: New symbols are not supported.
            
            
            /// icn_gym copy
            // Warning: New symbols are not supported.
            
            
            /// 50/50
            let _5050 = NSMutableAttributedString(string: "50/50")
            _5050.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 30)!, range: NSRange(location: 0, length: _5050.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _5050.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5050.length))
            }
            _5050.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _5050.length))
            context.saveGState()
            _5050.draw(at: CGPoint(x: 148, y: 195))
            context.restoreGState()
            
            
            /// 34
            let _34 = NSMutableAttributedString(string: "34 ")
            _34.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 15)!, range: NSRange(location: 0, length: _34.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _34.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _34.length))
            }
            _34.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _34.length))
            context.saveGState()
            _34.draw(at: CGPoint(x: 238, y: 70))
            context.restoreGState()
            
            
            /// Loose weight Gain Mu
            let looseWeightGainMu = NSMutableAttributedString(string: "Loose weight\nGain Muscles\nCardio")
            looseWeightGainMu.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: looseWeightGainMu.length))
            looseWeightGainMu.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: looseWeightGainMu.length))
            context.saveGState()
            looseWeightGainMu.draw(in: CGRect(x: 138, y: 95, width: 179, height: 63))
            context.restoreGState()
            
            
            /// box_latestsessions
            // Warning: New symbols are not supported.
            
            
            /// Misc/Big Button
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Menu
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 30)
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 246, height: 782))
            context.saveGState()
            UIColor.white.setFill()
            rectangle2.fill()
            context.saveGState()
            UIRectClip(rectangle2.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.beginTransparencyLayer(in: rectangle2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                rectangle2.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: rectangle2.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -246, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 246.5, y: -0.5)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    rectangle2.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            
            /// icn-burgermenu
            // Warning: New symbols are not supported.
            
            
            /// Path 4
            let path4 = UIBezierPath()
            path4.move(to: CGPoint(x: 0, y: 1))
            path4.addLine(to: CGPoint(x: 154.63, y: 1))
            context.saveGState()
            context.translateBy(x: 53, y: 122)
            path4.lineWidth = 0.5
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            path4.stroke()
            context.restoreGState()
            
            
            /// Payment method
            let paymentMethod2 = NSMutableAttributedString(string: "Payment method")
            paymentMethod2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: paymentMethod2.length))
            paymentMethod2.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: 13))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paymentMethod2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: paymentMethod2.length))
            }
            paymentMethod2.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: paymentMethod2.length))
            context.saveGState()
            paymentMethod2.draw(at: CGPoint(x: 77, y: 156))
            context.restoreGState()
            
            
            /// Condition & Terms
            let conditionTerms = NSMutableAttributedString(string: "Condition & Terms")
            conditionTerms.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: conditionTerms.length))
            conditionTerms.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: 16))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                conditionTerms.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: conditionTerms.length))
            }
            conditionTerms.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: conditionTerms.length))
            context.saveGState()
            conditionTerms.draw(at: CGPoint(x: 74, y: 176))
            context.restoreGState()
            
            
            /// Edit Profile
            let editProfile = NSMutableAttributedString(string: "Edit Profile")
            editProfile.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: editProfile.length))
            editProfile.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: 11))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                editProfile.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: editProfile.length))
            }
            editProfile.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: editProfile.length))
            context.saveGState()
            editProfile.draw(at: CGPoint(x: 98, y: 195))
            context.restoreGState()
            
            
            /// Recommend to a Frien
            let recommendToAFrien = NSMutableAttributedString(string: "Recommend to a Friend")
            recommendToAFrien.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: recommendToAFrien.length))
            recommendToAFrien.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: 20))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                recommendToAFrien.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: recommendToAFrien.length))
            }
            recommendToAFrien.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: recommendToAFrien.length))
            context.saveGState()
            recommendToAFrien.draw(at: CGPoint(x: 57, y: 215))
            context.restoreGState()
            
            
            /// Log Out
            let logOut = NSMutableAttributedString(string: "Log Out")
            logOut.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: logOut.length))
            logOut.addAttribute(.kern, value: -0.23, range: NSRange(location: 0, length: 6))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                logOut.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: logOut.length))
            }
            logOut.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: logOut.length))
            context.saveGState()
            logOut.draw(at: CGPoint(x: 104, y: 235))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawUserrMyBookings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 47, y: 52)
            
            /// My Bookings
            let myBookings = NSMutableAttributedString(string: "My Bookings")
            myBookings.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 26)!, range: NSRange(location: 0, length: myBookings.length))
            myBookings.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: myBookings.length))
            context.saveGState()
            myBookings.draw(at: CGPoint.zero)
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// box_latestsessions copy
        do {
            context.saveGState()
            context.translateBy(x: 28, y: 118)
            
            /// Background
            let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 319.01, height: 188))
            context.saveGState()
            context.translateBy(x: 1, y: 0)
            UIColor.white.setFill()
            background.fill()
            context.saveGState()
            UIRectClip(background.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                background.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -319.01, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 319.01, y: -1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    background.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            
            /// Upcomming Session wi
            let upcommingSessionWi = NSMutableAttributedString(string: "Upcomming Session")
            upcommingSessionWi.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: upcommingSessionWi.length))
            upcommingSessionWi.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: upcommingSessionWi.length))
            context.saveGState()
            upcommingSessionWi.draw(in: CGRect(x: 18.94, y: 7.82, width: 136.57, height: 21))
            context.restoreGState()
            
            
            /// 2018-09-13 15.00
            let _201809131500 = NSMutableAttributedString(string: "2018-09-13")
            _201809131500.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _201809131500.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _201809131500.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _201809131500.length))
            }
            _201809131500.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _201809131500.length))
            context.saveGState()
            _201809131500.draw(in: CGRect(x: 239.25, y: 33.55, width: 60.81, height: 19))
            context.restoreGState()
            
            
            /// at Medborgarplatsen
            let atMedborgarplatsen = NSMutableAttributedString(string: "at Medborgarplatsen")
            atMedborgarplatsen.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: atMedborgarplatsen.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                atMedborgarplatsen.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: atMedborgarplatsen.length))
            }
            atMedborgarplatsen.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: atMedborgarplatsen.length))
            context.saveGState()
            atMedborgarplatsen.draw(in: CGRect(x: 182.43, y: 48.39, width: 117.63, height: 19))
            context.restoreGState()
            
            
            /// view on map
            let viewOnMap = NSMutableAttributedString(string: "view on map")
            viewOnMap.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: viewOnMap.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                viewOnMap.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: viewOnMap.length))
            }
            viewOnMap.addAttribute(.foregroundColor, value: UIColor(hue: 0.558, saturation: 0.652, brightness: 0.992, alpha: 1), range: NSRange(location: 0, length: viewOnMap.length))
            context.saveGState()
            viewOnMap.draw(in: CGRect(x: 201, y: 68.72, width: 99.07, height: 19))
            context.restoreGState()
            
            
            /// icn/training/running-circel
            // Warning: New symbols are not supported.
            
            
            /// img_profiles
            // Warning: New symbols are not supported.
            
            
            /// Pawel Krupa
            let pawelKrupa = NSMutableAttributedString(string: "Pawel Krupa")
            pawelKrupa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: pawelKrupa.length))
            context.saveGState()
            pawelKrupa.draw(in: CGRect(x: 81.75, y: 36.54, width: 58.82, height: 16))
            context.restoreGState()
            
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 172.46, y: 112.8)
                
                /// Rectangle 8
                let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 147.54, height: 41.56), cornerRadius: 100)
                context.saveGState()
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                rectangle8.fill()
                context.restoreGState()
                
                
                /// Message Trainer
                let messageTrainer = NSMutableAttributedString(string: "Message Trainer")
                messageTrainer.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: messageTrainer.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    messageTrainer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: messageTrainer.length))
                }
                messageTrainer.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: messageTrainer.length))
                context.saveGState()
                messageTrainer.draw(in: CGRect(x: 26.92, y: 12.77, width: 94.7, height: 19))
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            /// Group 6 Copy
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 112.8)
                
                /// Rectangle 8
                let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 147.54, height: 41.56), cornerRadius: 100)
                context.saveGState()
                UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                rectangle10.fill()
                context.restoreGState()
                
                
                /// Cancel Booking
                let cancelBooking = NSMutableAttributedString(string: "Cancel Booking")
                cancelBooking.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cancelBooking.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    cancelBooking.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancelBooking.length))
                }
                cancelBooking.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: cancelBooking.length))
                context.saveGState()
                cancelBooking.draw(in: CGRect(x: 29.91, y: 12.77, width: 88.72, height: 19))
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// box_latestsessions copy 2
        do {
            context.saveGState()
            context.translateBy(x: 28, y: 334)
            
            /// Background
            let background2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 319.01, height: 188))
            context.saveGState()
            context.translateBy(x: 1, y: 0)
            UIColor.white.setFill()
            background2.fill()
            context.saveGState()
            UIRectClip(background2.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.beginTransparencyLayer(in: background2.bounds, auxiliaryInfo: nil)
            do {
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                background2.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: background2.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -319.01, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 319.01, y: -1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    background2.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            
            /// Upcomming Session wi
            let upcommingSessionWi2 = NSMutableAttributedString(string: "Upcomming Session")
            upcommingSessionWi2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: upcommingSessionWi2.length))
            upcommingSessionWi2.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: upcommingSessionWi2.length))
            context.saveGState()
            upcommingSessionWi2.draw(in: CGRect(x: 18.94, y: 7.82, width: 136.57, height: 21))
            context.restoreGState()
            
            
            /// 2018-09-13 15.00
            let _2 = NSMutableAttributedString(string: "2018-09-13")
            _2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _2.length))
            }
            _2.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _2.length))
            context.saveGState()
            _2.draw(in: CGRect(x: 239.25, y: 33.55, width: 60.81, height: 19))
            context.restoreGState()
            
            
            /// at Medborgarplatsen
            let atMedborgarplatsen2 = NSMutableAttributedString(string: "at Medborgarplatsen")
            atMedborgarplatsen2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: atMedborgarplatsen2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                atMedborgarplatsen2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: atMedborgarplatsen2.length))
            }
            atMedborgarplatsen2.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: atMedborgarplatsen2.length))
            context.saveGState()
            atMedborgarplatsen2.draw(in: CGRect(x: 182.43, y: 48.39, width: 117.63, height: 19))
            context.restoreGState()
            
            
            /// view on map
            let viewOnMap2 = NSMutableAttributedString(string: "view on map")
            viewOnMap2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: viewOnMap2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                viewOnMap2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: viewOnMap2.length))
            }
            viewOnMap2.addAttribute(.foregroundColor, value: UIColor(hue: 0.558, saturation: 0.652, brightness: 0.992, alpha: 1), range: NSRange(location: 0, length: viewOnMap2.length))
            context.saveGState()
            viewOnMap2.draw(in: CGRect(x: 209, y: 68.72, width: 91.07, height: 19))
            context.restoreGState()
            
            
            /// icn/training/running-circel
            // Warning: New symbols are not supported.
            
            
            /// img_profiles
            // Warning: New symbols are not supported.
            
            
            /// Pawel Krupa
            let pawelKrupa2 = NSMutableAttributedString(string: "Pawel Krupa")
            pawelKrupa2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: pawelKrupa2.length))
            context.saveGState()
            pawelKrupa2.draw(in: CGRect(x: 81.75, y: 36.54, width: 58.82, height: 16))
            context.restoreGState()
            
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 172.46, y: 112.8)
                
                /// Rectangle 8
                let rectangle11 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 147.54, height: 41.56), cornerRadius: 100)
                context.saveGState()
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                rectangle11.fill()
                context.restoreGState()
                
                
                /// Message Trainer
                let messageTrainer2 = NSMutableAttributedString(string: "Message Trainer")
                messageTrainer2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: messageTrainer2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    messageTrainer2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: messageTrainer2.length))
                }
                messageTrainer2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: messageTrainer2.length))
                context.saveGState()
                messageTrainer2.draw(in: CGRect(x: 26.92, y: 12.77, width: 94.7, height: 19))
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            /// Group 6 Copy
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 112.8)
                
                /// Rectangle 8
                let rectangle16 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 147.54, height: 41.56), cornerRadius: 100)
                context.saveGState()
                UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                rectangle16.fill()
                context.restoreGState()
                
                
                /// Cancel Booking
                let cancelBooking2 = NSMutableAttributedString(string: "Cancel Booking")
                cancelBooking2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cancelBooking2.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    cancelBooking2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancelBooking2.length))
                }
                cancelBooking2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: cancelBooking2.length))
                context.saveGState()
                cancelBooking2.draw(in: CGRect(x: 29.91, y: 12.77, width: 88.72, height: 19))
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// box_latestsessions copy 3
        do {
            context.saveGState()
            context.translateBy(x: 28, y: 541)
            
            /// Background
            let background3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 319.01, height: 188))
            context.saveGState()
            context.translateBy(x: 1, y: 0)
            UIColor.white.setFill()
            background3.fill()
            context.saveGState()
            UIRectClip(background3.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
            do {
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                background3.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: background3.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -319.01, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 319.01, y: -1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    background3.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            
            /// Upcomming Session wi
            let upcommingSessionWi3 = NSMutableAttributedString(string: "Upcomming Session")
            upcommingSessionWi3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: upcommingSessionWi3.length))
            upcommingSessionWi3.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: upcommingSessionWi3.length))
            context.saveGState()
            upcommingSessionWi3.draw(in: CGRect(x: 18.94, y: 7.82, width: 136.57, height: 21))
            context.restoreGState()
            
            
            /// 2018-09-13 15.00
            let _4 = NSMutableAttributedString(string: "2018-09-13")
            _4.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _4.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _4.length))
            }
            _4.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _4.length))
            context.saveGState()
            _4.draw(in: CGRect(x: 239.25, y: 33.55, width: 60.81, height: 19))
            context.restoreGState()
            
            
            /// at Medborgarplatsen
            let atMedborgarplatsen3 = NSMutableAttributedString(string: "at Medborgarplatsen")
            atMedborgarplatsen3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: atMedborgarplatsen3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                atMedborgarplatsen3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: atMedborgarplatsen3.length))
            }
            atMedborgarplatsen3.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: atMedborgarplatsen3.length))
            context.saveGState()
            atMedborgarplatsen3.draw(in: CGRect(x: 182.43, y: 48.39, width: 117.63, height: 19))
            context.restoreGState()
            
            
            /// view on map
            let viewOnMap3 = NSMutableAttributedString(string: "view on map")
            viewOnMap3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: viewOnMap3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                viewOnMap3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: viewOnMap3.length))
            }
            viewOnMap3.addAttribute(.foregroundColor, value: UIColor(hue: 0.558, saturation: 0.652, brightness: 0.992, alpha: 1), range: NSRange(location: 0, length: viewOnMap3.length))
            context.saveGState()
            viewOnMap3.draw(in: CGRect(x: 212, y: 67.72, width: 88.07, height: 19))
            context.restoreGState()
            
            
            /// icn/training/running-circel
            // Warning: New symbols are not supported.
            
            
            /// img_profiles
            // Warning: New symbols are not supported.
            
            
            /// Pawel Krupa
            let pawelKrupa3 = NSMutableAttributedString(string: "Pawel Krupa")
            pawelKrupa3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: pawelKrupa3.length))
            context.saveGState()
            pawelKrupa3.draw(in: CGRect(x: 81.75, y: 36.54, width: 58.82, height: 16))
            context.restoreGState()
            
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 172.46, y: 112.8)
                
                /// Rectangle 8
                let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 147.54, height: 41.56), cornerRadius: 100)
                context.saveGState()
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                rectangle17.fill()
                context.restoreGState()
                
                
                /// Message Trainer
                let messageTrainer3 = NSMutableAttributedString(string: "Message Trainer")
                messageTrainer3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: messageTrainer3.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    messageTrainer3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: messageTrainer3.length))
                }
                messageTrainer3.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: messageTrainer3.length))
                context.saveGState()
                messageTrainer3.draw(in: CGRect(x: 26.92, y: 12.77, width: 94.7, height: 19))
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            /// Group 6 Copy
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 112.8)
                
                /// Rectangle 8
                let rectangle18 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 147.54, height: 41.56), cornerRadius: 100)
                context.saveGState()
                UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                rectangle18.fill()
                context.restoreGState()
                
                
                /// Cancel Booking
                let cancelBooking3 = NSMutableAttributedString(string: "Cancel Booking")
                cancelBooking3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cancelBooking3.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    cancelBooking3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancelBooking3.length))
                }
                cancelBooking3.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: cancelBooking3.length))
                context.saveGState()
                cancelBooking3.draw(in: CGRect(x: 29.91, y: 12.77, width: 88.72, height: 19))
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawUserTrainingJournal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1295), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1295), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1295)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// box_latestsessions copy 2
        // Warning: New symbols are not supported.
        
        /// box_latestsessions copy 3
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 47, y: 52)
            
            /// Training Journal.
            let trainingJournal = NSMutableAttributedString(string: "Training Journal.")
            trainingJournal.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 26)!, range: NSRange(location: 0, length: trainingJournal.length))
            trainingJournal.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: trainingJournal.length))
            context.saveGState()
            trainingJournal.draw(at: CGPoint.zero)
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// box_latestsessions copy
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawUserProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: johnDoe.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            johnDoe.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: johnDoe.length))
        }
        johnDoe.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
        context.saveGState()
        johnDoe.draw(in: CGRect(x: 126, y: 66, width: 123, height: 49))
        context.restoreGState()
        
        /// Level
        do {
            context.saveGState()
            context.translateBy(x: 75, y: 215)
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 226, height: 20))
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                UIRectClip(rectangle9.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.setAlpha(0.2)
                context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 1).setFill()
                    rectangle9.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -226, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 226, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle9.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                rectangle9.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle9.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.81, alpha: 1).setStroke()
                rectangle9.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            
            /// Rectangle 9
            let rectangle10 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 113, height: 20))
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle10.fill()
            context.saveGState()
            UIRectClip(rectangle10.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.2)
            context.beginTransparencyLayer(in: rectangle10.bounds, auxiliaryInfo: nil)
            do {
                UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 1).setFill()
                rectangle10.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: rectangle10.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -113, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 113, y: 1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    rectangle10.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// 10
        let _10 = NSMutableAttributedString(string: "10")
        _10.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 36)!, range: NSRange(location: 0, length: _10.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
        }
        _10.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _10.length))
        context.saveGState()
        _10.draw(at: CGPoint(x: 167, y: 163))
        context.restoreGState()
        
        /// 34
        let _34 = NSMutableAttributedString(string: "34 ")
        _34.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 15)!, range: NSRange(location: 0, length: _34.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _34.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _34.length))
        }
        _34.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _34.length))
        context.saveGState()
        _34.draw(at: CGPoint(x: 238, y: 70))
        context.restoreGState()
        
        /// Loose weight Gain Mu
        let looseWeightGainMu = NSMutableAttributedString(string: "Loose weight\nGain Muscles\nCardio")
        looseWeightGainMu.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: looseWeightGainMu.length))
        looseWeightGainMu.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: looseWeightGainMu.length))
        context.saveGState()
        looseWeightGainMu.draw(in: CGRect(x: 138, y: 95, width: 179, height: 63))
        context.restoreGState()
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// box_latestsessions
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// icn_crossfit copy
        // Warning: New symbols are not supported.
        
        /// Fitness Level
        let fitnessLevel = NSMutableAttributedString(string: "Fitness Level")
        fitnessLevel.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: fitnessLevel.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            fitnessLevel.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: fitnessLevel.length))
        }
        fitnessLevel.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: fitnessLevel.length))
        context.saveGState()
        fitnessLevel.draw(at: CGPoint(x: 148, y: 240))
        context.restoreGState()
        
        /// Path 6
        let path6 = UIBezierPath()
        path6.move(to: CGPoint(x: 0, y: 1))
        path6.addLine(to: CGPoint(x: 275, y: 1))
        context.saveGState()
        context.translateBy(x: 49, y: 274)
        path6.lineWidth = 1
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setStroke()
        path6.stroke()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawPaymentMethod(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Card
        let card = NSMutableAttributedString(string: "Card")
        card.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: card.length))
        card.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: card.length))
        context.saveGState()
        card.draw(at: CGPoint(x: 31, y: 322))
        context.restoreGState()
        
        /// Name Of Cardholder
        let nameOfCardholder = NSMutableAttributedString(string: "Name Of Cardholder")
        nameOfCardholder.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: nameOfCardholder.length))
        nameOfCardholder.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: nameOfCardholder.length))
        context.saveGState()
        nameOfCardholder.draw(at: CGPoint(x: 31, y: 79))
        context.restoreGState()
        
        /// Adress
        let adress = NSMutableAttributedString(string: "Adress")
        adress.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: adress.length))
        adress.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: adress.length))
        context.saveGState()
        adress.draw(at: CGPoint(x: 31, y: 155))
        context.restoreGState()
        
        /// Country
        let country = NSMutableAttributedString(string: "Country")
        country.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: country.length))
        country.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: country.length))
        context.saveGState()
        country.draw(at: CGPoint(x: 31, y: 237))
        context.restoreGState()
        
        /// Cardnumber
        let cardnumber = NSMutableAttributedString(string: "Cardnumber")
        cardnumber.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: cardnumber.length))
        cardnumber.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: cardnumber.length))
        context.saveGState()
        cardnumber.draw(at: CGPoint(x: 31, y: 398))
        context.restoreGState()
        
        /// Valid Thru
        let validThru = NSMutableAttributedString(string: "Valid Thru")
        validThru.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: validThru.length))
        validThru.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: validThru.length))
        context.saveGState()
        validThru.draw(at: CGPoint(x: 31, y: 482))
        context.restoreGState()
        
        /// CCV
        let cCV = NSMutableAttributedString(string: "CCV")
        cCV.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: cCV.length))
        cCV.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: cCV.length))
        context.saveGState()
        cCV.draw(at: CGPoint(x: 188, y: 482))
        context.restoreGState()
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// ico_swipe_up
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 4
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 5
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 6
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 2
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 3
        // Warning: New symbols are not supported.
        
        /// Visa
        let visa = NSMutableAttributedString(string: "Visa")
        visa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: visa.length))
        visa.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: visa.length))
        context.saveGState()
        visa.draw(at: CGPoint(x: 44, y: 358))
        context.restoreGState()
        
        /// John Doe Copy
        let johnDoeCopy = NSMutableAttributedString(string: "John Doe")
        johnDoeCopy.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: johnDoeCopy.length))
        johnDoeCopy.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: johnDoeCopy.length))
        context.saveGState()
        johnDoeCopy.draw(at: CGPoint(x: 44, y: 115))
        context.restoreGState()
        
        /// John Doe Copy 2
        let johnDoeCopy2 = NSMutableAttributedString(string: "John Doe")
        johnDoeCopy2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: johnDoeCopy2.length))
        johnDoeCopy2.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: johnDoeCopy2.length))
        context.saveGState()
        johnDoeCopy2.draw(at: CGPoint(x: 44, y: 191))
        context.restoreGState()
        
        /// John Doe Copy 3
        let johnDoeCopy3 = NSMutableAttributedString(string: "John Doe")
        johnDoeCopy3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: johnDoeCopy3.length))
        johnDoeCopy3.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: johnDoeCopy3.length))
        context.saveGState()
        johnDoeCopy3.draw(at: CGPoint(x: 44, y: 273))
        context.restoreGState()
        
        /// xxxxxxxxxx
        let xxxxxxxxxx = NSMutableAttributedString(string: "xxxxxxxxxx")
        xxxxxxxxxx.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: xxxxxxxxxx.length))
        xxxxxxxxxx.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: xxxxxxxxxx.length))
        context.saveGState()
        xxxxxxxxxx.draw(at: CGPoint(x: 44, y: 433))
        context.restoreGState()
        
        /// 15/15
        let _1515 = NSMutableAttributedString(string: "15/15")
        _1515.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: _1515.length))
        _1515.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: _1515.length))
        context.saveGState()
        _1515.draw(at: CGPoint(x: 44, y: 516))
        context.restoreGState()
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// 333
        let _333 = NSMutableAttributedString(string: "333")
        _333.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: _333.length))
        _333.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: _333.length))
        context.saveGState()
        _333.draw(at: CGPoint(x: 198, y: 516))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawEditUserProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 888), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 888), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 888)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 375, resizedFrame.height / 888)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Physique
        let physique = NSMutableAttributedString(string: "Physique")
        physique.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: physique.length))
        physique.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: physique.length))
        context.saveGState()
        physique.draw(at: CGPoint(x: 34, y: 401))
        context.restoreGState()
        
        /// Notifications
        let notifications = NSMutableAttributedString(string: "Notifications")
        notifications.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: notifications.length))
        notifications.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: notifications.length))
        context.saveGState()
        notifications.draw(at: CGPoint(x: 31, y: 586))
        context.restoreGState()
        
        /// Fit
        let fit = NSMutableAttributedString(string: "Fit")
        fit.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: fit.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            fit.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: fit.length))
        }
        fit.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: fit.length))
        context.saveGState()
        fit.draw(at: CGPoint(x: 330, y: 474))
        context.restoreGState()
        
        /// Just starting
        let justStarting = NSMutableAttributedString(string: "Just starting")
        justStarting.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: justStarting.length))
        justStarting.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: justStarting.length))
        context.saveGState()
        justStarting.draw(at: CGPoint(x: 33, y: 474))
        context.restoreGState()
        
        /// Name
        let name = NSMutableAttributedString(string: "Name")
        name.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: name.length))
        name.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: name.length))
        context.saveGState()
        name.draw(at: CGPoint(x: 31, y: 152))
        context.restoreGState()
        
        /// Age
        let age = NSMutableAttributedString(string: "Age")
        age.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: age.length))
        age.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: age.length))
        context.saveGState()
        age.draw(at: CGPoint(x: 31, y: 228))
        context.restoreGState()
        
        /// Height
        let height = NSMutableAttributedString(string: "Height")
        height.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: height.length))
        height.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: height.length))
        context.saveGState()
        height.draw(at: CGPoint(x: 31, y: 312))
        context.restoreGState()
        
        /// cm
        let cm = NSMutableAttributedString(string: "cm")
        cm.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: cm.length))
        cm.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: cm.length))
        context.saveGState()
        cm.draw(at: CGPoint(x: 135, y: 362))
        context.restoreGState()
        
        /// kg
        let kg = NSMutableAttributedString(string: "kg")
        kg.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: kg.length))
        kg.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: kg.length))
        context.saveGState()
        kg.draw(at: CGPoint(x: 292, y: 362))
        context.restoreGState()
        
        /// Weight
        let weight = NSMutableAttributedString(string: "Weight")
        weight.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: weight.length))
        weight.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: weight.length))
        context.saveGState()
        weight.draw(at: CGPoint(x: 188, y: 312))
        context.restoreGState()
        
        /// Goals
        let goals = NSMutableAttributedString(string: "Goals")
        goals.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: goals.length))
        goals.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: goals.length))
        context.saveGState()
        goals.draw(at: CGPoint(x: 31, y: 508))
        context.restoreGState()
        
        /// - Describe your goal
        let describeYourGoal = NSMutableAttributedString(string: "- Describe your goals with your training")
        describeYourGoal.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: describeYourGoal.length))
        describeYourGoal.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: describeYourGoal.length))
        context.saveGState()
        describeYourGoal.draw(at: CGPoint(x: 72, y: 508))
        context.restoreGState()
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 5
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 2
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 3
        // Warning: New symbols are not supported.
        
        /// Cells/Slider
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: johnDoe.length))
        johnDoe.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
        context.saveGState()
        johnDoe.draw(at: CGPoint(x: 44, y: 188))
        context.restoreGState()
        
        /// 34
        let _34 = NSMutableAttributedString(string: "34")
        _34.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: _34.length))
        _34.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: _34.length))
        context.saveGState()
        _34.draw(at: CGPoint(x: 44, y: 263))
        context.restoreGState()
        
        /// 186
        let _186 = NSMutableAttributedString(string: "186")
        _186.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: _186.length))
        _186.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: _186.length))
        context.saveGState()
        _186.draw(at: CGPoint(x: 44, y: 346))
        context.restoreGState()
        
        /// (Loose weight, gain
        let looseWeightGain = NSMutableAttributedString(string: "(Loose weight, gain muscles, cardio etc.)")
        looseWeightGain.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: looseWeightGain.length))
        looseWeightGain.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: looseWeightGain.length))
        context.saveGState()
        looseWeightGain.draw(at: CGPoint(x: 44, y: 542))
        context.restoreGState()
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// 90
        let _90 = NSMutableAttributedString(string: "90")
        _90.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: _90.length))
        _90.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: _90.length))
        context.saveGState()
        _90.draw(at: CGPoint(x: 198, y: 346))
        context.restoreGState()
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// + Add payment method
        let addPaymentMethod = NSMutableAttributedString(string: "+ Add  payment method")
        addPaymentMethod.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: addPaymentMethod.length))
        addPaymentMethod.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: addPaymentMethod.length))
        context.saveGState()
        addPaymentMethod.draw(at: CGPoint(x: 29, y: 669))
        context.restoreGState()
        
        /// - Delete account
        let deleteAccount = NSMutableAttributedString(string: "- Delete account")
        deleteAccount.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: deleteAccount.length))
        deleteAccount.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: deleteAccount.length))
        context.saveGState()
        deleteAccount.draw(at: CGPoint(x: 29, y: 699))
        context.restoreGState()
        
        /// Rectangle 6
        let rectangle6 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 69, height: 32), cornerRadius: 21.5)
        context.saveGState()
        context.translateBy(x: 59, y: 612)
        UIColor.white.setFill()
        rectangle6.fill()
        context.saveGState()
        UIRectClip(rectangle6.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.2)
        context.beginTransparencyLayer(in: rectangle6.bounds, auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 1).setFill()
            rectangle6.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: rectangle6.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -69, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 69, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                rectangle6.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        rectangle6.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle6.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.11).setStroke()
        rectangle6.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 25, height: 25))
        context.saveGState()
        context.translateBy(x: 62, y: 615)
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -13, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -49, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 49, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.2).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -12, dy: -13))
        context.clip(using: .evenOdd)
        context.translateBy(x: -48, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 48, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.2).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -47, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 47, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.2).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        UIColor(hue: 0.558, saturation: 0.652, brightness: 0.992, alpha: 1).setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.2).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// OFF
        let oFF = NSMutableAttributedString(string: "OFF")
        oFF.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: oFF.length))
        oFF.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: oFF.length))
        context.saveGState()
        oFF.draw(at: CGPoint(x: 135, y: 617))
        context.restoreGState()
        
        /// ON
        let oN = NSMutableAttributedString(string: "ON")
        oN.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: oN.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            oN.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: oN.length))
        }
        oN.addAttribute(.foregroundColor, value: UIColor(hue: 0.558, saturation: 0.652, brightness: 0.992, alpha: 1), range: NSRange(location: 0, length: oN.length))
        context.saveGState()
        oN.draw(at: CGPoint(x: 31, y: 617))
        context.restoreGState()
        
        /// Group
        context.saveGState()
        context.setShadow(
            offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
            blur: 4 * resizedShadowScale,
            color: UIColor(white: 0, alpha: 0.5).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 146, y: 68)
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 82, height: 82))
            context.saveGState()
            UIColor(hue: 0.611, saturation: 0.15, brightness: 0.235, alpha: 0.4).setFill()
            oval.fill()
            context.restoreGState()
            
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 15.07, y: 9.93))
            combinedShape.addLine(to: CGPoint(x: 25, y: 9.93))
            combinedShape.addLine(to: CGPoint(x: 25, y: 15.07))
            combinedShape.addLine(to: CGPoint(x: 15.07, y: 15.07))
            combinedShape.addLine(to: CGPoint(x: 15.07, y: 25))
            combinedShape.addLine(to: CGPoint(x: 9.93, y: 25))
            combinedShape.addLine(to: CGPoint(x: 9.93, y: 15.07))
            combinedShape.addLine(to: CGPoint(x: 0, y: 15.07))
            combinedShape.addLine(to: CGPoint(x: 0, y: 9.93))
            combinedShape.addLine(to: CGPoint(x: 9.93, y: 9.93))
            combinedShape.addLine(to: CGPoint(x: 9.93, y: 0))
            combinedShape.addLine(to: CGPoint(x: 15.07, y: 0))
            combinedShape.addLine(to: CGPoint(x: 15.07, y: 9.93))
            combinedShape.close()
            context.saveGState()
            context.translateBy(x: 29, y: 26)
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            
            /// Change Image
            let changeImage = NSMutableAttributedString(string: "Change Image")
            changeImage.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 9)!, range: NSRange(location: 0, length: changeImage.length))
            changeImage.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: changeImage.length))
            context.saveGState()
            changeImage.draw(at: CGPoint(x: 11, y: 51))
            context.restoreGState()
            
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawTrainingRequested(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1122), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1122), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1122)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// z
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// box_booking-requested
        // Warning: New symbols are not supported.
        
        /// box_booking-requested copy 3
        // Warning: New symbols are not supported.
        
        /// box_booking-requested copy
        // Warning: New symbols are not supported.
        
        /// box_booking-requested copy 2
        // Warning: New symbols are not supported.
        
        /// YOU HAVE BOOKINGS RE
        let yOUHAVEBOOKINGSRE = NSMutableAttributedString(string: "YOU HAVE BOOKINGS\nREQUESTED FROM")
        yOUHAVEBOOKINGSRE.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: yOUHAVEBOOKINGSRE.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            yOUHAVEBOOKINGSRE.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: yOUHAVEBOOKINGSRE.length))
        }
        yOUHAVEBOOKINGSRE.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: yOUHAVEBOOKINGSRE.length))
        context.saveGState()
        yOUHAVEBOOKINGSRE.draw(at: CGPoint(x: 81, y: 561))
        context.restoreGState()
        
        /// YOU HAVE UPCOMMING S
        let yOUHAVEUPCOMMINGS = NSMutableAttributedString(string: "YOU HAVE UPCOMMING\nSESSIONS WITH")
        yOUHAVEUPCOMMINGS.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: yOUHAVEUPCOMMINGS.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            yOUHAVEUPCOMMINGS.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: yOUHAVEUPCOMMINGS.length))
        }
        yOUHAVEUPCOMMINGS.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: yOUHAVEUPCOMMINGS.length))
        context.saveGState()
        yOUHAVEUPCOMMINGS.draw(at: CGPoint(x: 69, y: 73))
        context.restoreGState()
        
        /// Menu/quickmenu-Trainer
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawCheckInTrainer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu-Trainer
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// QR_code_for_mobile_English_Wikipedia.svg
        // Warning: Image layers are not supported.
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 92, y: 657)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 192, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Done
            let done = NSMutableAttributedString(string: "Done\n")
            done.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: done.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                done.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: done.length))
            }
            done.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: done.length))
            context.saveGState()
            done.draw(at: CGPoint(x: 81, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawSummarizeTraining_Trainer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu-Trainer
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Cells/Slider
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy 2
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy 3
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: johnDoe.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            johnDoe.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: johnDoe.length))
        }
        johnDoe.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
        context.saveGState()
        johnDoe.draw(in: CGRect(x: 143, y: 214, width: 90, height: 20))
        context.restoreGState()
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 90, y: 697)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 192, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Log Session
            let logSession = NSMutableAttributedString(string: "Log Session")
            logSession.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: logSession.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                logSession.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: logSession.length))
            }
            logSession.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: logSession.length))
            context.saveGState()
            logSession.draw(at: CGPoint(x: 63.5, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Rectangle 14
        let rectangle14 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 304, height: 73))
        context.saveGState()
        context.translateBy(x: 35, y: 598)
        context.saveGState()
        rectangle14.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle14.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle14.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Cardio
        let cardio = NSMutableAttributedString(string: "Cardio")
        cardio.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cardio.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            cardio.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cardio.length))
        }
        cardio.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: cardio.length))
        context.saveGState()
        cardio.draw(in: CGRect(x: 161, y: 290, width: 53, height: 30))
        context.restoreGState()
        
        /// Strength
        let strength = NSMutableAttributedString(string: "Strength")
        strength.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: strength.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            strength.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: strength.length))
        }
        strength.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: strength.length))
        context.saveGState()
        strength.draw(in: CGRect(x: 154, y: 350, width: 67, height: 30))
        context.restoreGState()
        
        /// Mobility
        let mobility = NSMutableAttributedString(string: "Mobility")
        mobility.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: mobility.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            mobility.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: mobility.length))
        }
        mobility.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: mobility.length))
        context.saveGState()
        mobility.draw(in: CGRect(x: 156, y: 423, width: 64, height: 30))
        context.restoreGState()
        
        /// Intensity
        let intensity = NSMutableAttributedString(string: "Intensity")
        intensity.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: intensity.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            intensity.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: intensity.length))
        }
        intensity.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: intensity.length))
        context.saveGState()
        intensity.draw(in: CGRect(x: 154, y: 488, width: 67, height: 30))
        context.restoreGState()
        
        /// Summarize training w
        let summarizeTrainingW = NSMutableAttributedString(string: "Summarize training with")
        summarizeTrainingW.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: summarizeTrainingW.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            summarizeTrainingW.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: summarizeTrainingW.length))
        }
        summarizeTrainingW.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: summarizeTrainingW.length))
        context.saveGState()
        summarizeTrainingW.draw(at: CGPoint(x: 64, y: 95))
        context.restoreGState()
        
        /// Focus levels
        let focusLevels = NSMutableAttributedString(string: "Focus levels")
        focusLevels.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: focusLevels.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            focusLevels.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: focusLevels.length))
        }
        focusLevels.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.031, brightness: 0.118, alpha: 1), range: NSRange(location: 0, length: focusLevels.length))
        context.saveGState()
        focusLevels.draw(at: CGPoint(x: 158, y: 262))
        context.restoreGState()
        
        /// Short description of
        let shortDescriptionOf = NSMutableAttributedString(string: "Short description of training")
        shortDescriptionOf.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: shortDescriptionOf.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            shortDescriptionOf.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: shortDescriptionOf.length))
        }
        shortDescriptionOf.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.031, brightness: 0.118, alpha: 1), range: NSRange(location: 0, length: shortDescriptionOf.length))
        context.saveGState()
        shortDescriptionOf.draw(at: CGPoint(x: 117, y: 576))
        context.restoreGState()
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawRateTrainingClient(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: johnDoe.length))
        johnDoe.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
        context.saveGState()
        johnDoe.draw(in: CGRect(x: 148, y: 70, width: 90, height: 30))
        context.restoreGState()
        
        /// Today we focused on
        let todayWeFocusedOn = NSMutableAttributedString(string: "Today we focused on Strength and Cardio, If you do another\nsession this week I think it’s good to get some mobility in the \nsession.")
        todayWeFocusedOn.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: todayWeFocusedOn.length))
        todayWeFocusedOn.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: todayWeFocusedOn.length))
        context.saveGState()
        todayWeFocusedOn.draw(in: CGRect(x: 41, y: 196, width: 304, height: 81))
        context.restoreGState()
        
        /// Group 6 Copy
        do {
            context.saveGState()
            context.translateBy(x: 70, y: 706)
            
            // Empty.
            
            context.restoreGState()
        }
        
        /// Rate training sessio
        let rateTrainingSessio = NSMutableAttributedString(string: "Rate training session")
        rateTrainingSessio.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 22)!, range: NSRange(location: 0, length: rateTrainingSessio.length))
        rateTrainingSessio.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.031, brightness: 0.118, alpha: 1), range: NSRange(location: 0, length: rateTrainingSessio.length))
        context.saveGState()
        rateTrainingSessio.draw(at: CGPoint(x: 92, y: 290))
        context.restoreGState()
        
        /// Rectangle 14
        let rectangle14 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 304, height: 27))
        context.saveGState()
        context.translateBy(x: 35, y: 475)
        context.saveGState()
        rectangle14.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle14.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle14.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// Cardio
        let cardio = NSMutableAttributedString(string: "Cardio")
        cardio.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cardio.length))
        cardio.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: cardio.length))
        context.saveGState()
        cardio.draw(at: CGPoint(x: 145, y: 102))
        context.restoreGState()
        
        /// Strength
        let strength = NSMutableAttributedString(string: "Strength")
        strength.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: strength.length))
        strength.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: strength.length))
        context.saveGState()
        strength.draw(at: CGPoint(x: 145, y: 121))
        context.restoreGState()
        
        /// Mobility
        let mobility = NSMutableAttributedString(string: "Mobility")
        mobility.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: mobility.length))
        mobility.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: mobility.length))
        context.saveGState()
        mobility.draw(at: CGPoint(x: 145, y: 141))
        context.restoreGState()
        
        /// Intensity
        let intensity = NSMutableAttributedString(string: "Intensity")
        intensity.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: intensity.length))
        intensity.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: intensity.length))
        context.saveGState()
        intensity.draw(at: CGPoint(x: 145, y: 161))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 128, y: 327)
            
            /// ico_star-filled
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 2
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 3
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 4
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 194, y: 104)
            
            /// Rectangle 15
            let rectangle15 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 73, height: 10))
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle15.fill()
            context.restoreGState()
            
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 10))
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                UIRectClip(rectangle9.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                    rectangle9.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -147, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle9.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                rectangle9.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle9.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.81, alpha: 1).setStroke()
                rectangle9.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group 5
        do {
            context.saveGState()
            context.translateBy(x: 194, y: 143)
            
            /// Rectangle 15 Copy 2
            let rectangle15Copy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 10))
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle15Copy2.fill()
            context.restoreGState()
            
            
            /// Rectangle 9 Copy
            let rectangle9Copy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 10))
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                UIRectClip(rectangle9Copy.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.beginTransparencyLayer(in: rectangle9Copy.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                    rectangle9Copy.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle9Copy.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -147, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle9Copy.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                rectangle9Copy.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle9Copy.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.81, alpha: 1).setStroke()
                rectangle9Copy.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 194, y: 163)
            
            /// Group 7
            do {
                context.saveGState()
                
                /// Rectangle 15 Copy 4
                let rectangle15Copy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 10))
                context.saveGState()
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                rectangle15Copy4.fill()
                context.restoreGState()
                
                
                /// Rectangle 9 Copy 3
                let rectangle9Copy3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 10))
                context.saveGState()
                context.setAlpha(0.5)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.saveGState()
                    UIRectClip(rectangle9Copy3.bounds)
                    context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                    context.beginTransparencyLayer(in: rectangle9Copy3.bounds, auxiliaryInfo: nil)
                    do {
                        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                        rectangle9Copy3.fill()
                        context.setBlendMode(.destinationOut)
                        context.beginTransparencyLayer(in: rectangle9Copy3.bounds, auxiliaryInfo: nil)
                        do {
                            context.translateBy(x: -147, y: 0)
                            do {
                                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147, y: 1)).applying(baseTransform)
                                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                            }
                            UIColor.black.setFill()
                            rectangle9Copy3.fill()
                        }
                        context.endTransparencyLayer()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    context.saveGState()
                    rectangle9Copy3.lineWidth = 2
                    context.beginPath()
                    context.addPath(rectangle9Copy3.cgPath)
                    context.clip(using: .evenOdd)
                    UIColor(white: 0.81, alpha: 1).setStroke()
                    rectangle9Copy3.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 194, y: 123)
            
            /// Rectangle 15 Copy
            let rectangle15Copy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 112, height: 10))
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle15Copy.fill()
            context.restoreGState()
            
            
            /// Rectangle 9 Copy 2
            let rectangle9Copy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 10))
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                UIRectClip(rectangle9Copy2.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.beginTransparencyLayer(in: rectangle9Copy2.bounds, auxiliaryInfo: nil)
                do {
                    UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
                    rectangle9Copy2.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle9Copy2.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -147, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle9Copy2.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                rectangle9Copy2.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle9Copy2.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.81, alpha: 1).setStroke()
                rectangle9Copy2.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button Copy 2
        do {
            context.saveGState()
            context.translateBy(x: 43, y: 630)
            
            /// Background
            let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 50), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            background.fill()
            context.restoreGState()
            
            
            /// Share Session
            let shareSession = NSMutableAttributedString(string: "Share Session")
            shareSession.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: shareSession.length))
            shareSession.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: shareSession.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                shareSession.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: shareSession.length))
            }
            shareSession.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: shareSession.length))
            context.saveGState()
            shareSession.draw(in: CGRect(x: 18, y: 14, width: 260, height: 26))
            context.restoreGState()
            
            
            /// icn/socialmedia/instagram
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Something extra to s
        let somethingExtraToS = NSMutableAttributedString(string: "Something extra to say?")
        somethingExtraToS.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: somethingExtraToS.length))
        somethingExtraToS.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: somethingExtraToS.length))
        context.saveGState()
        somethingExtraToS.draw(at: CGPoint(x: 41, y: 481))
        context.restoreGState()
        
        /// Recommend this train
        let recommendThisTrain = NSMutableAttributedString(string: "Recommend this trainer")
        recommendThisTrain.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: recommendThisTrain.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 11
            paragraphStyle.minimumLineHeight = 11
            recommendThisTrain.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: recommendThisTrain.length))
        }
        recommendThisTrain.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: recommendThisTrain.length))
        context.saveGState()
        recommendThisTrain.draw(in: CGRect(x: 52, y: 591, width: 136, height: 13))
        context.restoreGState()
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 91, y: 527)
            
            /// Oval 4
            let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 53, height: 53))
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setFill()
            oval4.fill()
            context.restoreGState()
            
            
            /// Group 5
            do {
                context.saveGState()
                context.translateBy(x: 13, y: 11)
                
                /// Stroke 3
                let stroke3 = UIBezierPath()
                stroke3.move(to: CGPoint(x: 9.88, y: 9.94))
                stroke3.addLine(to: CGPoint(x: 19.41, y: 9.94))
                stroke3.addCurve(to: CGPoint(x: 21.62, y: 12.27), controlPoint1: CGPoint(x: 20.63, y: 9.94), controlPoint2: CGPoint(x: 21.62, y: 10.99))
                stroke3.addCurve(to: CGPoint(x: 19.41, y: 14.6), controlPoint1: CGPoint(x: 21.62, y: 13.56), controlPoint2: CGPoint(x: 20.63, y: 14.6))
                stroke3.addLine(to: CGPoint(x: 17.31, y: 14.6))
                stroke3.addLine(to: CGPoint(x: 20.38, y: 14.6))
                stroke3.addCurve(to: CGPoint(x: 22.76, y: 16.93), controlPoint1: CGPoint(x: 21.69, y: 14.6), controlPoint2: CGPoint(x: 22.76, y: 15.65))
                stroke3.addCurve(to: CGPoint(x: 20.38, y: 19.26), controlPoint1: CGPoint(x: 22.76, y: 18.22), controlPoint2: CGPoint(x: 21.69, y: 19.26))
                stroke3.addLine(to: CGPoint(x: 17.25, y: 19.26))
                stroke3.addLine(to: CGPoint(x: 19.72, y: 19.26))
                stroke3.addCurve(to: CGPoint(x: 22.1, y: 21.61), controlPoint1: CGPoint(x: 21.03, y: 19.26), controlPoint2: CGPoint(x: 22.1, y: 20.31))
                stroke3.addCurve(to: CGPoint(x: 19.72, y: 23.96), controlPoint1: CGPoint(x: 22.1, y: 22.91), controlPoint2: CGPoint(x: 21.03, y: 23.96))
                stroke3.addLine(to: CGPoint(x: 17.57, y: 23.96))
                stroke3.addCurve(to: CGPoint(x: 19.95, y: 26.48), controlPoint1: CGPoint(x: 18.88, y: 23.96), controlPoint2: CGPoint(x: 19.95, y: 25.09))
                stroke3.addCurve(to: CGPoint(x: 17.57, y: 29), controlPoint1: CGPoint(x: 19.95, y: 27.87), controlPoint2: CGPoint(x: 18.88, y: 29))
                stroke3.addLine(to: CGPoint(x: 14.33, y: 29))
                stroke3.addLine(to: CGPoint(x: 8.02, y: 29))
                stroke3.addCurve(to: CGPoint(x: 5.76, y: 28.76), controlPoint1: CGPoint(x: 7.26, y: 29), controlPoint2: CGPoint(x: 6.51, y: 28.92))
                stroke3.addCurve(to: CGPoint(x: 0, y: 26.33), controlPoint1: CGPoint(x: 3.85, y: 28.34), controlPoint2: CGPoint(x: 0.31, y: 27.43))
                stroke3.addLine(to: CGPoint(x: 0, y: 9.79))
                stroke3.addCurve(to: CGPoint(x: 8.53, y: 4.53), controlPoint1: CGPoint(x: 0, y: 9.79), controlPoint2: CGPoint(x: 7.68, y: 6.33))
                stroke3.addCurve(to: CGPoint(x: 9.42, y: 1.84), controlPoint1: CGPoint(x: 8.84, y: 3.88), controlPoint2: CGPoint(x: 9.15, y: 2.87))
                stroke3.addCurve(to: CGPoint(x: 13.83, y: 1.4), controlPoint1: CGPoint(x: 10, y: -0.36), controlPoint2: CGPoint(x: 12.92, y: -0.68))
                stroke3.addCurve(to: CGPoint(x: 14.11, y: 4.35), controlPoint1: CGPoint(x: 14.18, y: 2.2), controlPoint2: CGPoint(x: 14.34, y: 3.18))
                stroke3.addCurve(to: CGPoint(x: 11.6, y: 9.94), controlPoint1: CGPoint(x: 13.26, y: 8.86), controlPoint2: CGPoint(x: 11.6, y: 9.94))
                context.saveGState()
                context.translateBy(x: 7.24, y: 0)
                stroke3.usesEvenOddFillRule = true
                UIColor.white.setFill()
                stroke3.fill()
                stroke3.lineJoinStyle = .round
                stroke3.lineCapStyle = .round
                stroke3.lineWidth = 1
                UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setStroke()
                stroke3.stroke()
                context.restoreGState()
                
                
                /// Stroke 1
                let stroke1 = UIBezierPath()
                stroke1.move(to: CGPoint(x: 5.78, y: 20.41))
                stroke1.addLine(to: CGPoint(x: 0, y: 20.41))
                stroke1.addLine(to: CGPoint.zero)
                stroke1.addLine(to: CGPoint(x: 5.78, y: 0))
                stroke1.addCurve(to: CGPoint(x: 8.28, y: 2.51), controlPoint1: CGPoint(x: 7.16, y: 0), controlPoint2: CGPoint(x: 8.28, y: 1.12))
                stroke1.addLine(to: CGPoint(x: 8.28, y: 17.9))
                stroke1.addCurve(to: CGPoint(x: 5.78, y: 20.41), controlPoint1: CGPoint(x: 8.28, y: 19.29), controlPoint2: CGPoint(x: 7.16, y: 20.41))
                stroke1.close()
                context.saveGState()
                context.translateBy(x: 0, y: 8.59)
                stroke1.usesEvenOddFillRule = true
                UIColor.white.setFill()
                stroke1.fill()
                stroke1.lineWidth = 1
                UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setStroke()
                stroke1.stroke()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// +
        let layer = NSMutableAttributedString(string: "+")
        layer.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 75)!, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        layer.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(at: CGPoint(x: 234, y: 500))
        context.restoreGState()
        
        /// Add to favourites
        let addToFavourites = NSMutableAttributedString(string: "Add to favourites")
        addToFavourites.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: addToFavourites.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 11
            paragraphStyle.minimumLineHeight = 11
            addToFavourites.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: addToFavourites.length))
        }
        addToFavourites.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: addToFavourites.length))
        context.saveGState()
        addToFavourites.draw(at: CGPoint(x: 207, y: 591))
        context.restoreGState()
        
        /// Path 7
        let path7 = UIBezierPath()
        path7.move(to: CGPoint(x: 0, y: 1))
        path7.addLine(to: CGPoint(x: 302, y: 1))
        context.saveGState()
        context.translateBy(x: 42, y: 267)
        path7.lineWidth = 1
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setStroke()
        path7.stroke()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawMonthlyReport(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu-Trainer
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// You did
        let youDid = NSMutableAttributedString(string: "You did ")
        youDid.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: youDid.length))
        youDid.addAttribute(.kern, value: -0.49, range: NSRange(location: 0, length: youDid.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            youDid.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: youDid.length))
        }
        youDid.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: youDid.length))
        context.saveGState()
        youDid.draw(at: CGPoint(x: 168, y: 123))
        context.restoreGState()
        
        /// sessions
        let sessions = NSMutableAttributedString(string: "sessions")
        sessions.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: sessions.length))
        sessions.addAttribute(.kern, value: -0.49, range: NSRange(location: 0, length: sessions.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            sessions.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sessions.length))
        }
        sessions.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: sessions.length))
        context.saveGState()
        sessions.draw(at: CGPoint(x: 166, y: 237))
        context.restoreGState()
        
        /// And you’re average r
        let andYoureAverageR = NSMutableAttributedString(string: "And you’re average rating is")
        andYoureAverageR.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: andYoureAverageR.length))
        andYoureAverageR.addAttribute(.kern, value: -0.49, range: NSRange(location: 0, length: andYoureAverageR.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            andYoureAverageR.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: andYoureAverageR.length))
        }
        andYoureAverageR.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: andYoureAverageR.length))
        context.saveGState()
        andYoureAverageR.draw(at: CGPoint(x: 110, y: 304))
        context.restoreGState()
        
        /// You earned a total o
        let youEarnedATotalO = NSMutableAttributedString(string: "You earned a total of ")
        youEarnedATotalO.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: youEarnedATotalO.length))
        youEarnedATotalO.addAttribute(.kern, value: -0.49, range: NSRange(location: 0, length: youEarnedATotalO.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            youEarnedATotalO.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: youEarnedATotalO.length))
        }
        youEarnedATotalO.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: youEarnedATotalO.length))
        context.saveGState()
        youEarnedATotalO.draw(at: CGPoint(x: 129, y: 435))
        context.restoreGState()
        
        /// And have been recomm
        let andHaveBeenRecomm = NSMutableAttributedString(string: "And have been recommended")
        andHaveBeenRecomm.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: andHaveBeenRecomm.length))
        andHaveBeenRecomm.addAttribute(.kern, value: -0.49, range: NSRange(location: 0, length: andHaveBeenRecomm.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            andHaveBeenRecomm.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: andHaveBeenRecomm.length))
        }
        andHaveBeenRecomm.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: andHaveBeenRecomm.length))
        context.saveGState()
        andHaveBeenRecomm.draw(at: CGPoint(x: 103, y: 545))
        context.restoreGState()
        
        /// times since you star
        let timesSinceYouStar = NSMutableAttributedString(string: "times since you started")
        timesSinceYouStar.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: timesSinceYouStar.length))
        timesSinceYouStar.addAttribute(.kern, value: -0.49, range: NSRange(location: 0, length: timesSinceYouStar.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            timesSinceYouStar.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: timesSinceYouStar.length))
        }
        timesSinceYouStar.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: timesSinceYouStar.length))
        context.saveGState()
        timesSinceYouStar.draw(at: CGPoint(x: 124, y: 644))
        context.restoreGState()
        
        /// Click to download th
        let clickToDownloadTh = NSMutableAttributedString(string: "Click to download this months financial report")
        clickToDownloadTh.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: clickToDownloadTh.length))
        clickToDownloadTh.addAttribute(.kern, value: -0.49, range: NSRange(location: 0, length: clickToDownloadTh.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            clickToDownloadTh.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: clickToDownloadTh.length))
        }
        clickToDownloadTh.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: clickToDownloadTh.length))
        context.saveGState()
        clickToDownloadTh.draw(at: CGPoint(x: 51, y: 672))
        context.restoreGState()
        
        /// 4.5
        let _45 = NSMutableAttributedString(string: "4.5")
        _45.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 73)!, range: NSRange(location: 0, length: _45.length))
        _45.addAttribute(.kern, value: -2.73, range: NSRange(location: 0, length: _45.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _45.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _45.length))
        }
        _45.addAttribute(.foregroundColor, value: UIColor(hue: 0.551, saturation: 0.596, brightness: 0.984, alpha: 1), range: NSRange(location: 0, length: _45.length))
        context.saveGState()
        _45.draw(at: CGPoint(x: 140, y: 313))
        context.restoreGState()
        
        /// 23
        let _23 = NSMutableAttributedString(string: "23")
        _23.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 73)!, range: NSRange(location: 0, length: _23.length))
        _23.addAttribute(.kern, value: -2.73, range: NSRange(location: 0, length: _23.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _23.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _23.length))
        }
        _23.addAttribute(.foregroundColor, value: UIColor(hue: 0.551, saturation: 0.596, brightness: 0.984, alpha: 1), range: NSRange(location: 0, length: _23.length))
        context.saveGState()
        _23.draw(at: CGPoint(x: 149, y: 555))
        context.restoreGState()
        
        /// 25 000 SEK
        let _25000SEK = NSMutableAttributedString(string: "25 000 SEK")
        _25000SEK.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 53)!, range: NSRange(location: 0, length: _25000SEK.length))
        _25000SEK.addAttribute(.kern, value: -2.73, range: NSRange(location: 0, length: _25000SEK.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _25000SEK.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _25000SEK.length))
        }
        _25000SEK.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: _25000SEK.length))
        context.saveGState()
        _25000SEK.draw(at: CGPoint(x: 64, y: 448))
        context.restoreGState()
        
        /// THIS MONTH
        let tHISMONTH = NSMutableAttributedString(string: "THIS MONTH")
        tHISMONTH.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 27)!, range: NSRange(location: 0, length: tHISMONTH.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            tHISMONTH.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tHISMONTH.length))
        }
        tHISMONTH.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: tHISMONTH.length))
        context.saveGState()
        tHISMONTH.draw(at: CGPoint(x: 97.5, y: 77))
        context.restoreGState()
        
        /// Path 5
        let path5 = UIBezierPath()
        path5.move(to: CGPoint(x: 0.45, y: 1))
        path5.addLine(to: CGPoint(x: 309.76, y: 1))
        context.saveGState()
        context.translateBy(x: 33, y: 282)
        path5.lineWidth = 1
        UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
        path5.stroke()
        context.restoreGState()
        
        /// Path 5 Copy
        let path5Copy = UIBezierPath()
        path5Copy.move(to: CGPoint(x: 0.45, y: 1))
        path5Copy.addLine(to: CGPoint(x: 309.76, y: 1))
        context.saveGState()
        context.translateBy(x: 33, y: 414)
        path5Copy.lineWidth = 1
        UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
        path5Copy.stroke()
        context.restoreGState()
        
        /// Path 5 Copy 2
        let path5Copy2 = UIBezierPath()
        path5Copy2.move(to: CGPoint(x: 0.45, y: 1))
        path5Copy2.addLine(to: CGPoint(x: 309.76, y: 1))
        context.saveGState()
        context.translateBy(x: 33, y: 528)
        path5Copy2.lineWidth = 1
        UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
        path5Copy2.stroke()
        context.restoreGState()
        
        /// 20
        let _20 = NSMutableAttributedString(string: "20")
        _20.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 100)!, range: NSRange(location: 0, length: _20.length))
        _20.addAttribute(.kern, value: -3.74, range: NSRange(location: 0, length: 1))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _20.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _20.length))
        }
        _20.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: _20.length))
        context.saveGState()
        _20.draw(at: CGPoint(x: 132.5, y: 115))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawTrainerPackageCreator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1024)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu-Trainer
        // Warning: New symbols are not supported.
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// CREATE A PACKAGE DEA
        let cREATEAPACKAGEDEA = NSMutableAttributedString(string: "CREATE A PACKAGE DEAL")
        cREATEAPACKAGEDEA.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 24)!, range: NSRange(location: 0, length: cREATEAPACKAGEDEA.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            cREATEAPACKAGEDEA.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cREATEAPACKAGEDEA.length))
        }
        cREATEAPACKAGEDEA.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: cREATEAPACKAGEDEA.length))
        context.saveGState()
        cREATEAPACKAGEDEA.draw(at: CGPoint(x: 42, y: 81))
        context.restoreGState()
        
        /// Price
        let price = NSMutableAttributedString(string: "Price")
        price.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: price.length))
        price.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: price.length))
        context.saveGState()
        price.draw(at: CGPoint(x: 32, y: 259))
        context.restoreGState()
        
        /// Valid for number of
        let validForNumberOf = NSMutableAttributedString(string: "Valid for number of months")
        validForNumberOf.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: validForNumberOf.length))
        validForNumberOf.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: validForNumberOf.length))
        context.saveGState()
        validForNumberOf.draw(at: CGPoint(x: 32, y: 518))
        context.restoreGState()
        
        /// Number of people par
        let numberOfPeoplePar = NSMutableAttributedString(string: "Number of people participating")
        numberOfPeoplePar.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: numberOfPeoplePar.length))
        numberOfPeoplePar.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: numberOfPeoplePar.length))
        context.saveGState()
        numberOfPeoplePar.draw(at: CGPoint(x: 32, y: 658))
        context.restoreGState()
        
        /// Number of sessions
        let numberOfSessions = NSMutableAttributedString(string: "Number of sessions")
        numberOfSessions.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: numberOfSessions.length))
        numberOfSessions.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: numberOfSessions.length))
        context.saveGState()
        numberOfSessions.draw(at: CGPoint(x: 32, y: 394))
        context.restoreGState()
        
        /// Cells/Slider Copy 4
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy 5
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy 6
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy 2
        // Warning: New symbols are not supported.
        
        /// 1
        let _1 = NSMutableAttributedString(string: "1")
        _1.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _1.length))
        _1.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _1.length))
        context.saveGState()
        _1.draw(at: CGPoint(x: 32, y: 742))
        context.restoreGState()
        
        /// 1 copy
        let _1Copy = NSMutableAttributedString(string: "1")
        _1Copy.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _1Copy.length))
        _1Copy.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _1Copy.length))
        context.saveGState()
        _1Copy.draw(at: CGPoint(x: 32, y: 604))
        context.restoreGState()
        
        /// 1 copy 2
        let _1Copy2 = NSMutableAttributedString(string: "1")
        _1Copy2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _1Copy2.length))
        _1Copy2.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _1Copy2.length))
        context.saveGState()
        _1Copy2.draw(at: CGPoint(x: 32, y: 464))
        context.restoreGState()
        
        /// 500 SEK Copy
        let _500SEKCopy = NSMutableAttributedString(string: "500 SEK")
        _500SEKCopy.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _500SEKCopy.length))
        _500SEKCopy.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _500SEKCopy.length))
        context.saveGState()
        _500SEKCopy.draw(at: CGPoint(x: 32, y: 335))
        context.restoreGState()
        
        /// 10
        let _10 = NSMutableAttributedString(string: "10")
        _10.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _10.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            _10.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10.length))
        }
        _10.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _10.length))
        context.saveGState()
        _10.draw(at: CGPoint(x: 329, y: 742))
        context.restoreGState()
        
        /// 10 copy
        let _10Copy = NSMutableAttributedString(string: "10")
        _10Copy.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _10Copy.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            _10Copy.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10Copy.length))
        }
        _10Copy.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _10Copy.length))
        context.saveGState()
        _10Copy.draw(at: CGPoint(x: 329, y: 604))
        context.restoreGState()
        
        /// 10 copy 2
        let _10Copy2 = NSMutableAttributedString(string: "10")
        _10Copy2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _10Copy2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            _10Copy2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _10Copy2.length))
        }
        _10Copy2.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _10Copy2.length))
        context.saveGState()
        _10Copy2.draw(at: CGPoint(x: 329, y: 464))
        context.restoreGState()
        
        /// 15 000 SEK Copy
        let _15000SEKCopy = NSMutableAttributedString(string: "15 000 SEK")
        _15000SEKCopy.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _15000SEKCopy.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            _15000SEKCopy.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _15000SEKCopy.length))
        }
        _15000SEKCopy.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _15000SEKCopy.length))
        context.saveGState()
        _15000SEKCopy.draw(at: CGPoint(x: 282, y: 335))
        context.restoreGState()
        
        /// 5
        let _5 = NSMutableAttributedString(string: "5")
        _5.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _5.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _5.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
        }
        _5.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _5.length))
        context.saveGState()
        _5.draw(at: CGPoint(x: 179, y: 699))
        context.restoreGState()
        
        /// 5 copy
        let _5Copy = NSMutableAttributedString(string: "5")
        _5Copy.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _5Copy.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _5Copy.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5Copy.length))
        }
        _5Copy.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _5Copy.length))
        context.saveGState()
        _5Copy.draw(at: CGPoint(x: 179, y: 561))
        context.restoreGState()
        
        /// 5 copy 2
        let _5Copy2 = NSMutableAttributedString(string: "5")
        _5Copy2.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _5Copy2.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _5Copy2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5Copy2.length))
        }
        _5Copy2.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _5Copy2.length))
        context.saveGState()
        _5Copy2.draw(at: CGPoint(x: 179, y: 421))
        context.restoreGState()
        
        /// 7500 SEK Copy
        let _7500SEKCopy = NSMutableAttributedString(string: "7500 SEK")
        _7500SEKCopy.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _7500SEKCopy.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _7500SEKCopy.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7500SEKCopy.length))
        }
        _7500SEKCopy.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _7500SEKCopy.length))
        context.saveGState()
        _7500SEKCopy.draw(at: CGPoint(x: 156, y: 292))
        context.restoreGState()
        
        /// Type of training
        let typeOfTraining = NSMutableAttributedString(string: "Type of training")
        typeOfTraining.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: typeOfTraining.length))
        typeOfTraining.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: typeOfTraining.length))
        context.saveGState()
        typeOfTraining.draw(at: CGPoint(x: 32, y: 154))
        context.restoreGState()
        
        /// Group Copy
        do {
            context.saveGState()
            context.translateBy(x: 32, y: 186)
            
            /// icn_running
            // Warning: New symbols are not supported.
            
            
            /// icn_crossfit
            // Warning: New symbols are not supported.
            
            
            /// icn_gym
            // Warning: New symbols are not supported.
            
            
            /// icn_yoga
            // Warning: New symbols are not supported.
            
            
            /// icn_yoga copy
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Name your package de
        let nameYourPackageDe = NSMutableAttributedString(string: "Name your package deal")
        nameYourPackageDe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: nameYourPackageDe.length))
        nameYourPackageDe.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: nameYourPackageDe.length))
        context.saveGState()
        nameYourPackageDe.draw(at: CGPoint(x: 41, y: 791))
        context.restoreGState()
        
        /// input_txtfield copy 3
        // Warning: New symbols are not supported.
        
        /// ex. Boxing Madness
        let exBoxingMadness = NSMutableAttributedString(string: "ex. Boxing Madness")
        exBoxingMadness.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: exBoxingMadness.length))
        exBoxingMadness.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: exBoxingMadness.length))
        context.saveGState()
        exBoxingMadness.draw(at: CGPoint(x: 52, y: 830))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawRegisterAsTrainer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1268), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1268), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1268)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 375, resizedFrame.height / 1268)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Menu/quickmenu-Trainer
        // Warning: New symbols are not supported.
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 96, y: 849)
            
            /// Oval Copy
            let ovalCopy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 50, height: 50))
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            ovalCopy.fill()
            context.restoreGState()
            
            
            /// icn/socialmedia/instagram
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 32, y: 849)
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 50, height: 50))
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval.fill()
            context.restoreGState()
            
            
            /// icn/socialmedia/facebook
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 160, y: 849)
            
            /// Oval Copy 2
            let ovalCopy2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 50, height: 50))
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            ovalCopy2.fill()
            context.restoreGState()
            
            
            /// icn/socialmedia/twitter
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Name
        let name = NSMutableAttributedString(string: "Name")
        name.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: name.length))
        name.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: name.length))
        context.saveGState()
        name.draw(at: CGPoint(x: 34, y: 132))
        context.restoreGState()
        
        /// Social Security Numb
        let socialSecurityNumb = NSMutableAttributedString(string: "Social Security Number - 12 numbers")
        socialSecurityNumb.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: socialSecurityNumb.length))
        socialSecurityNumb.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: 25))
        socialSecurityNumb.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 25, length: 10))
        context.saveGState()
        socialSecurityNumb.draw(at: CGPoint(x: 34, y: 203))
        context.restoreGState()
        
        /// School of Certificat
        let schoolOfCertificat = NSMutableAttributedString(string: "School of Certification")
        schoolOfCertificat.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: schoolOfCertificat.length))
        schoolOfCertificat.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: schoolOfCertificat.length))
        context.saveGState()
        schoolOfCertificat.draw(at: CGPoint(x: 34, y: 282))
        context.restoreGState()
        
        /// Certification Number
        let certificationNumber = NSMutableAttributedString(string: "Certification Number")
        certificationNumber.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: certificationNumber.length))
        certificationNumber.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: certificationNumber.length))
        context.saveGState()
        certificationNumber.draw(at: CGPoint(x: 34, y: 364))
        context.restoreGState()
        
        /// Training locations
        let trainingLocations = NSMutableAttributedString(string: "Training locations")
        trainingLocations.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: trainingLocations.length))
        trainingLocations.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: trainingLocations.length))
        context.saveGState()
        trainingLocations.draw(at: CGPoint(x: 34, y: 525))
        context.restoreGState()
        
        /// Personal Description
        let personalDescription = NSMutableAttributedString(string: "Personal Description")
        personalDescription.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: personalDescription.length))
        personalDescription.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: personalDescription.length))
        context.saveGState()
        personalDescription.draw(at: CGPoint(x: 29, y: 645))
        context.restoreGState()
        
        /// Connect Social Accou
        let connectSocialAccou = NSMutableAttributedString(string: "Connect Social Accounts")
        connectSocialAccou.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: connectSocialAccou.length))
        connectSocialAccou.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: connectSocialAccou.length))
        context.saveGState()
        connectSocialAccou.draw(at: CGPoint(x: 34, y: 817))
        context.restoreGState()
        
        /// Current package deal
        let currentPackageDeal = NSMutableAttributedString(string: "Current package deals")
        currentPackageDeal.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: currentPackageDeal.length))
        currentPackageDeal.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: currentPackageDeal.length))
        context.saveGState()
        currentPackageDeal.draw(at: CGPoint(x: 34, y: 924))
        context.restoreGState()
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 2
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// Group
        context.saveGState()
        context.setShadow(
            offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
            blur: 4 * resizedShadowScale,
            color: UIColor(white: 0, alpha: 0.5).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 148, y: 49)
            
            /// Oval
            let oval6 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 82, height: 82))
            context.saveGState()
            UIColor(hue: 0.611, saturation: 0.15, brightness: 0.235, alpha: 0.4).setFill()
            oval6.fill()
            context.restoreGState()
            
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 15.07, y: 9.93))
            combinedShape.addLine(to: CGPoint(x: 25, y: 9.93))
            combinedShape.addLine(to: CGPoint(x: 25, y: 15.07))
            combinedShape.addLine(to: CGPoint(x: 15.07, y: 15.07))
            combinedShape.addLine(to: CGPoint(x: 15.07, y: 25))
            combinedShape.addLine(to: CGPoint(x: 9.93, y: 25))
            combinedShape.addLine(to: CGPoint(x: 9.93, y: 15.07))
            combinedShape.addLine(to: CGPoint(x: 0, y: 15.07))
            combinedShape.addLine(to: CGPoint(x: 0, y: 9.93))
            combinedShape.addLine(to: CGPoint(x: 9.93, y: 9.93))
            combinedShape.addLine(to: CGPoint(x: 9.93, y: 0))
            combinedShape.addLine(to: CGPoint(x: 15.07, y: 0))
            combinedShape.addLine(to: CGPoint(x: 15.07, y: 9.93))
            combinedShape.close()
            context.saveGState()
            context.translateBy(x: 29, y: 26)
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            
            /// Change Image
            let changeImage = NSMutableAttributedString(string: "Change Image")
            changeImage.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 9)!, range: NSRange(location: 0, length: changeImage.length))
            changeImage.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: changeImage.length))
            context.saveGState()
            changeImage.draw(at: CGPoint(x: 11, y: 51))
            context.restoreGState()
            
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Type of training you
        let typeOfTrainingYou = NSMutableAttributedString(string: "Type of training you offer")
        typeOfTrainingYou.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: typeOfTrainingYou.length))
        typeOfTrainingYou.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: typeOfTrainingYou.length))
        context.saveGState()
        typeOfTrainingYou.draw(at: CGPoint(x: 29, y: 448))
        context.restoreGState()
        
        /// Locations, separate
        let locationsSeparate = NSMutableAttributedString(string: "Locations, separate places with commas,")
        locationsSeparate.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: locationsSeparate.length))
        locationsSeparate.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: locationsSeparate.length))
        context.saveGState()
        locationsSeparate.draw(at: CGPoint(x: 45, y: 564))
        context.restoreGState()
        
        /// YYYYMMDD-XXXX
        let yYYYMMDDXXXX = NSMutableAttributedString(string: "YYYYMMDD-XXXX")
        yYYYMMDDXXXX.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: yYYYMMDDXXXX.length))
        yYYYMMDDXXXX.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: yYYYMMDDXXXX.length))
        context.saveGState()
        yYYYMMDDXXXX.draw(at: CGPoint(x: 45, y: 239))
        context.restoreGState()
        
        /// John Johnsson
        let johnJohnsson = NSMutableAttributedString(string: "John Johnsson")
        johnJohnsson.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: johnJohnsson.length))
        johnJohnsson.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: johnJohnsson.length))
        context.saveGState()
        johnJohnsson.draw(at: CGPoint(x: 45, y: 168))
        context.restoreGState()
        
        /// School Name
        let schoolName = NSMutableAttributedString(string: "School Name")
        schoolName.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: schoolName.length))
        schoolName.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: schoolName.length))
        context.saveGState()
        schoolName.draw(at: CGPoint(x: 45, y: 318))
        context.restoreGState()
        
        /// 12345678900
        let _12345678900 = NSMutableAttributedString(string: "12345678900")
        _12345678900.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: _12345678900.length))
        _12345678900.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: _12345678900.length))
        context.saveGState()
        _12345678900.draw(at: CGPoint(x: 45, y: 400))
        context.restoreGState()
        
        /// I can travel to meet
        let iCanTravelToMeet = NSMutableAttributedString(string: "I can travel to meet the client")
        iCanTravelToMeet.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: iCanTravelToMeet.length))
        iCanTravelToMeet.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: iCanTravelToMeet.length))
        context.saveGState()
        iCanTravelToMeet.draw(at: CGPoint(x: 59, y: 611))
        context.restoreGState()
        
        /// tickbox
        let tickbox = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 21, height: 21))
        context.saveGState()
        context.translateBy(x: 31, y: 611)
        UIColor.white.setFill()
        tickbox.fill()
        context.saveGState()
        UIRectClip(tickbox.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.beginTransparencyLayer(in: tickbox.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.808, alpha: 1).setFill()
            tickbox.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: tickbox.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -21, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 22, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                tickbox.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        UIRectClip(tickbox.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.beginTransparencyLayer(in: tickbox.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.945, alpha: 1).setFill()
            tickbox.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: tickbox.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -21, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 20, y: -1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                tickbox.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 29, y: 475)
            
            /// icn_running
            // Warning: New symbols are not supported.
            
            
            /// icn_crossfit
            // Warning: New symbols are not supported.
            
            
            /// icn_gym
            // Warning: New symbols are not supported.
            
            
            /// icn_yoga
            // Warning: New symbols are not supported.
            
            
            /// icn_yoga copy
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button2
        // Warning: New symbols are not supported.
        
        /// 10 session for 10 00
        let _10SessionFor1000 = NSMutableAttributedString(string: "10 session for 10 000 SEK  5 people per session.\nvalid for 10 months.")
        _10SessionFor1000.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _10SessionFor1000.length))
        _10SessionFor1000.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _10SessionFor1000.length))
        context.saveGState()
        _10SessionFor1000.draw(at: CGPoint(x: 38, y: 953))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    /// Sign Up
    
    class func drawPeppAppSignUpPage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// Rectangle 4
        let rectangle4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 293, height: 50), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 41, y: 444)
        UIColor(hue: 0.613, saturation: 0.612, brightness: 0.596, alpha: 1).setFill()
        rectangle4.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy
        let rectangle4Copy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 293, height: 50), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 41, y: 513)
        UIColor.white.setFill()
        rectangle4Copy.fill()
        context.saveGState()
        rectangle4Copy.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle4Copy.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.78, alpha: 1).setStroke()
        rectangle4Copy.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4 Copy 2
        let rectangle4Copy2 = UIBezierPath()
        rectangle4Copy2.move(to: CGPoint(x: 25, y: 0))
        rectangle4Copy2.addLine(to: CGPoint(x: 268, y: 0))
        rectangle4Copy2.addCurve(to: CGPoint(x: 293, y: 25), controlPoint1: CGPoint(x: 281.81, y: 0), controlPoint2: CGPoint(x: 293, y: 11.19))
        rectangle4Copy2.addLine(to: CGPoint(x: 293, y: 25))
        rectangle4Copy2.addCurve(to: CGPoint(x: 268, y: 50), controlPoint1: CGPoint(x: 293, y: 38.81), controlPoint2: CGPoint(x: 281.81, y: 50))
        rectangle4Copy2.addCurve(to: CGPoint(x: 52.47, y: 50), controlPoint1: CGPoint(x: 196.16, y: 50), controlPoint2: CGPoint(x: 124.31, y: 50))
        rectangle4Copy2.addCurve(to: CGPoint(x: 25, y: 50), controlPoint1: CGPoint(x: 43.31, y: 50), controlPoint2: CGPoint(x: 34.16, y: 50))
        rectangle4Copy2.addLine(to: CGPoint(x: 25, y: 50))
        rectangle4Copy2.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 11.19, y: 50), controlPoint2: CGPoint(x: 0, y: 38.81))
        rectangle4Copy2.addLine(to: CGPoint(x: 0, y: 25))
        rectangle4Copy2.addCurve(to: CGPoint(x: 25, y: 0), controlPoint1: CGPoint(x: 0, y: 11.19), controlPoint2: CGPoint(x: 11.19, y: 0))
        rectangle4Copy2.close()
        context.saveGState()
        context.translateBy(x: 41, y: 582)
        rectangle4Copy2.usesEvenOddFillRule = true
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        rectangle4Copy2.fill()
        context.restoreGState()
        
        /// icn/socialmedia/facebook
        // Warning: New symbols are not supported.
        
        /// Facebook
        let facebook = NSMutableAttributedString(string: "Facebook")
        facebook.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: facebook.length))
        facebook.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: 7))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            facebook.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: facebook.length))
        }
        facebook.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: facebook.length))
        context.saveGState()
        facebook.draw(at: CGPoint(x: 151, y: 457))
        context.restoreGState()
        
        /// Google
        let google = NSMutableAttributedString(string: "Google")
        google.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: google.length))
        google.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: google.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            google.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: google.length))
        }
        google.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: google.length))
        context.saveGState()
        google.draw(at: CGPoint(x: 162, y: 526))
        context.restoreGState()
        
        /// E-mail
        let email = NSMutableAttributedString(string: "E-mail")
        email.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: email.length))
        email.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: email.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            email.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: email.length))
        }
        email.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: email.length))
        context.saveGState()
        email.draw(at: CGPoint(x: 166, y: 595))
        context.restoreGState()
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 67, y: 523)
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 15, y: 13)
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 0, y: 5.74))
                clip2.addLine(to: CGPoint(x: 8.35, y: 5.74))
                clip2.addCurve(to: CGPoint(x: 5.26, y: 10.22), controlPoint1: CGPoint(x: 7.99, y: 7.59), controlPoint2: CGPoint(x: 6.9, y: 9.16))
                clip2.addLine(to: CGPoint(x: 5.26, y: 13.94))
                clip2.addLine(to: CGPoint(x: 10.27, y: 13.94))
                clip2.addCurve(to: CGPoint(x: 14.9, y: 3.03), controlPoint1: CGPoint(x: 13.21, y: 11.36), controlPoint2: CGPoint(x: 14.9, y: 7.55))
                clip2.addCurve(to: CGPoint(x: 14.62, y: 0), controlPoint1: CGPoint(x: 14.9, y: 1.98), controlPoint2: CGPoint(x: 14.8, y: 0.97))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                context.saveGState()
                context.translateBy(x: 0.08, y: 0.06)
                context.restoreGState()
                
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.apply(CGAffineTransform(translationX: 0.08, y: 0.06))
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 0, y: 30.42))
                fill1.addLine(to: CGPoint(x: 32.15, y: 30.42))
                fill1.addLine(to: CGPoint(x: 32.15, y: 0))
                fill1.addLine(to: CGPoint.zero)
                fill1.addLine(to: CGPoint(x: 0, y: 30.42))
                fill1.close()
                context.saveGState()
                context.translateBy(x: -8.55, y: -8.18)
                fill1.usesEvenOddFillRule = true
                UIColor(hue: 0.603, saturation: 0.743, brightness: 0.945, alpha: 1).setFill()
                fill1.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 2, y: 18)
                
                /// Clip 5
                let clip5 = UIBezierPath()
                clip5.move(to: CGPoint.zero)
                clip5.addLine(to: CGPoint(x: 0, y: 4.11))
                clip5.addCurve(to: CGPoint(x: 13.73, y: 12.84), controlPoint1: CGPoint(x: 2.53, y: 9.29), controlPoint2: CGPoint(x: 7.73, y: 12.84))
                clip5.addCurve(to: CGPoint(x: 23.9, y: 9), controlPoint1: CGPoint(x: 17.88, y: 12.84), controlPoint2: CGPoint(x: 21.36, y: 11.42))
                clip5.addLine(to: CGPoint(x: 18.94, y: 5.02))
                clip5.addCurve(to: CGPoint(x: 13.73, y: 6.53), controlPoint1: CGPoint(x: 17.56, y: 5.97), controlPoint2: CGPoint(x: 15.8, y: 6.53))
                clip5.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 9.73, y: 6.53), controlPoint2: CGPoint(x: 6.34, y: 3.75))
                clip5.addLine(to: CGPoint.zero)
                clip5.close()
                context.saveGState()
                context.translateBy(x: 0.07, y: 0.08)
                context.restoreGState()
                
                
                /// Clip 5 (Outline Mask)
                context.saveGState()
                clip5.apply(CGAffineTransform(translationX: 0.07, y: 0.08))
                clip5.addClip()
                
                /// Fill 4
                let fill4 = UIBezierPath()
                fill4.move(to: CGPoint(x: 0, y: 30.45))
                fill4.addLine(to: CGPoint(x: 40.98, y: 30.45))
                fill4.addLine(to: CGPoint(x: 40.98, y: 0))
                fill4.addLine(to: CGPoint.zero)
                fill4.addLine(to: CGPoint(x: 0, y: 30.45))
                fill4.close()
                context.saveGState()
                context.translateBy(x: -8.47, y: -8.72)
                fill4.usesEvenOddFillRule = true
                UIColor(hue: 0.38, saturation: 0.701, brightness: 0.655, alpha: 1).setFill()
                fill4.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 5 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 9
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 8)
                
                /// Clip 8
                let clip8 = UIBezierPath()
                clip8.move(to: CGPoint(x: 1.66, y: 0))
                clip8.addCurve(to: CGPoint(x: 0, y: 6.95), controlPoint1: CGPoint(x: 0.6, y: 2.09), controlPoint2: CGPoint(x: 0, y: 4.45))
                clip8.addCurve(to: CGPoint(x: 1.66, y: 13.9), controlPoint1: CGPoint(x: 0, y: 9.45), controlPoint2: CGPoint(x: 0.6, y: 11.81))
                clip8.addLine(to: CGPoint(x: 6.86, y: 9.89))
                clip8.addCurve(to: CGPoint(x: 6.37, y: 6.95), controlPoint1: CGPoint(x: 6.55, y: 8.96), controlPoint2: CGPoint(x: 6.37, y: 7.97))
                clip8.addCurve(to: CGPoint(x: 6.86, y: 4.01), controlPoint1: CGPoint(x: 6.37, y: 5.93), controlPoint2: CGPoint(x: 6.55, y: 4.94))
                clip8.addLine(to: CGPoint(x: 6.86, y: 0))
                clip8.addLine(to: CGPoint(x: 1.66, y: 0))
                clip8.close()
                context.saveGState()
                context.translateBy(x: 0.08, y: 0.01)
                context.restoreGState()
                
                
                /// Clip 8 (Outline Mask)
                context.saveGState()
                clip8.apply(CGAffineTransform(translationX: 0.08, y: 0.01))
                clip8.addClip()
                
                /// Fill 7
                let fill7 = UIBezierPath()
                fill7.move(to: CGPoint(x: 0, y: 31.1))
                fill7.addLine(to: CGPoint(x: 24.17, y: 31.1))
                fill7.addLine(to: CGPoint(x: 24.17, y: 0))
                fill7.addLine(to: CGPoint.zero)
                fill7.addLine(to: CGPoint(x: 0, y: 31.1))
                fill7.close()
                context.saveGState()
                context.translateBy(x: -8.57, y: -8.59)
                fill7.usesEvenOddFillRule = true
                UIColor(hue: 0.125, saturation: 1, brightness: 0.976, alpha: 1).setFill()
                fill7.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 8 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 12
            do {
                context.saveGState()
                context.translateBy(x: 2, y: 0)
                
                /// Clip 11
                let clip11 = UIBezierPath()
                clip11.move(to: CGPoint(x: 0, y: 8.79))
                clip11.addLine(to: CGPoint(x: 5.1, y: 12.93))
                clip11.addCurve(to: CGPoint(x: 13.64, y: 6.35), controlPoint1: CGPoint(x: 6.3, y: 9.15), controlPoint2: CGPoint(x: 9.66, y: 6.35))
                clip11.addCurve(to: CGPoint(x: 19.47, y: 8.73), controlPoint1: CGPoint(x: 15.88, y: 6.35), controlPoint2: CGPoint(x: 17.89, y: 7.15))
                clip11.addLine(to: CGPoint(x: 23.84, y: 4.16))
                clip11.addCurve(to: CGPoint(x: 13.64, y: 0), controlPoint1: CGPoint(x: 21.2, y: 1.58), controlPoint2: CGPoint(x: 17.75, y: 0))
                clip11.addCurve(to: CGPoint(x: 0, y: 8.79), controlPoint1: CGPoint(x: 7.67, y: 0), controlPoint2: CGPoint(x: 2.51, y: 3.58))
                clip11.close()
                context.saveGState()
                context.translateBy(x: 0.07, y: 0.01)
                context.restoreGState()
                
                
                /// Clip 11 (Outline Mask)
                context.saveGState()
                clip11.apply(CGAffineTransform(translationX: 0.07, y: 0.01))
                clip11.addClip()
                
                /// Fill 10
                let fill10 = UIBezierPath()
                fill10.move(to: CGPoint(x: 0, y: 30.66))
                fill10.addLine(to: CGPoint(x: 40.8, y: 30.66))
                fill10.addLine(to: CGPoint(x: 40.8, y: 0))
                fill10.addLine(to: CGPoint.zero)
                fill10.addLine(to: CGPoint(x: 0, y: 30.66))
                fill10.close()
                context.saveGState()
                context.translateBy(x: -8.41, y: -8.86)
                fill10.usesEvenOddFillRule = true
                UIColor(hue: 0.013, saturation: 0.779, brightness: 0.906, alpha: 1).setFill()
                fill10.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 11 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// Logo
        do {
            context.saveGState()
            context.translateBy(x: 121, y: 97)
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 26.35)
                
                /// Clip 2
                let clip3 = UIBezierPath()
                clip3.move(to: CGPoint.zero)
                clip3.addLine(to: CGPoint(x: 134.34, y: 0))
                clip3.addLine(to: CGPoint(x: 134.34, y: 182.82))
                clip3.addLine(to: CGPoint(x: 0, y: 182.82))
                clip3.addLine(to: CGPoint.zero)
                clip3.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.38)
                context.restoreGState()
                
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip3.apply(CGAffineTransform(translationX: 0, y: 0.38))
                clip3.addClip()
                
                /// Fill 1
                let fill9 = UIBezierPath()
                fill9.move(to: CGPoint(x: 67.28, y: 61.82))
                fill9.addLine(to: CGPoint(x: 91.46, y: 11.68))
                fill9.addCurve(to: CGPoint(x: 110.47, y: 0), controlPoint1: CGPoint(x: 94.9, y: 4.56), controlPoint2: CGPoint(x: 102.31, y: 0))
                fill9.addLine(to: CGPoint(x: 114.44, y: 0))
                fill9.addCurve(to: CGPoint(x: 131.93, y: 28.25), controlPoint1: CGPoint(x: 129.49, y: 0), controlPoint2: CGPoint(x: 139.08, y: 15.49))
                fill9.addLine(to: CGPoint(x: 90.83, y: 101.62))
                fill9.addLine(to: CGPoint(x: 90.83, y: 160.12))
                fill9.addCurve(to: CGPoint(x: 67.28, y: 182.82), controlPoint1: CGPoint(x: 90.83, y: 172.66), controlPoint2: CGPoint(x: 80.28, y: 182.82))
                fill9.addCurve(to: CGPoint(x: 43.72, y: 160.12), controlPoint1: CGPoint(x: 54.27, y: 182.82), controlPoint2: CGPoint(x: 43.72, y: 172.66))
                fill9.addLine(to: CGPoint(x: 43.72, y: 102.99))
                fill9.addLine(to: CGPoint(x: 2.36, y: 28.15))
                fill9.addCurve(to: CGPoint(x: 19.9, y: 0), controlPoint1: CGPoint(x: -4.69, y: 15.4), controlPoint2: CGPoint(x: 4.9, y: 0))
                fill9.addLine(to: CGPoint(x: 24.28, y: 0))
                fill9.addCurve(to: CGPoint(x: 43.31, y: 11.74), controlPoint1: CGPoint(x: 32.45, y: 0), controlPoint2: CGPoint(x: 39.88, y: 4.58))
                fill9.addLine(to: CGPoint(x: 67.28, y: 61.82))
                fill9.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.38)
                fill9.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill9.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 46.91, y: 0)
                
                /// Clip 5
                let clip4 = UIBezierPath()
                clip4.move(to: CGPoint.zero)
                clip4.addLine(to: CGPoint(x: 39.31, y: 0))
                clip4.addLine(to: CGPoint(x: 39.31, y: 66.86))
                clip4.addLine(to: CGPoint(x: 0, y: 66.86))
                clip4.addLine(to: CGPoint.zero)
                clip4.close()
                context.saveGState()
                context.translateBy(x: 0.6, y: 0.1)
                context.restoreGState()
                
                
                /// Clip 5 (Outline Mask)
                context.saveGState()
                clip4.apply(CGAffineTransform(translationX: 0.6, y: 0.1))
                clip4.addClip()
                
                /// Fill 4
                let fill12 = UIBezierPath()
                fill12.move(to: CGPoint(x: 19.65, y: 0))
                fill12.addCurve(to: CGPoint(x: 37.69, y: 26.42), controlPoint1: CGPoint(x: 33.76, y: 0), controlPoint2: CGPoint(x: 43.26, y: 13.92))
                fill12.addLine(to: CGPoint(x: 19.65, y: 66.86))
                fill12.addLine(to: CGPoint(x: 1.62, y: 26.42))
                fill12.addCurve(to: CGPoint(x: 19.65, y: 0), controlPoint1: CGPoint(x: -3.95, y: 13.92), controlPoint2: CGPoint(x: 5.55, y: 0))
                context.saveGState()
                context.translateBy(x: 0.6, y: 0.1)
                fill12.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill12.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 5 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// Logoname
        do {
            context.saveGState()
            context.translateBy(x: 146, y: 319)
            
            /// Group 9
            do {
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                
                /// Clip 8
                let clip7 = UIBezierPath()
                clip7.move(to: CGPoint.zero)
                clip7.addLine(to: CGPoint(x: 21.71, y: 0))
                clip7.addLine(to: CGPoint(x: 21.71, y: 33.64))
                clip7.addLine(to: CGPoint(x: 0, y: 33.64))
                clip7.addLine(to: CGPoint.zero)
                clip7.close()
                context.saveGState()
                context.translateBy(x: 0.93, y: 0.36)
                context.restoreGState()
                
                
                /// Clip 8 (Outline Mask)
                context.saveGState()
                clip7.apply(CGAffineTransform(translationX: 0.93, y: 0.36))
                clip7.addClip()
                
                /// Fill 7
                let fill14 = UIBezierPath()
                fill14.move(to: CGPoint(x: 4.89, y: 33.64))
                fill14.addCurve(to: CGPoint(x: 0, y: 29.16), controlPoint1: CGPoint(x: 2.19, y: 33.64), controlPoint2: CGPoint(x: 0, y: 31.63))
                fill14.addLine(to: CGPoint(x: 0, y: 3.14))
                fill14.addCurve(to: CGPoint(x: 3.43, y: 0), controlPoint1: CGPoint(x: 0, y: 1.41), controlPoint2: CGPoint(x: 1.54, y: 0))
                fill14.addLine(to: CGPoint(x: 21.71, y: 0))
                fill14.addLine(to: CGPoint(x: 21.71, y: 7.29))
                fill14.addLine(to: CGPoint(x: 9.78, y: 7.29))
                fill14.addLine(to: CGPoint(x: 9.78, y: 13.71))
                fill14.addLine(to: CGPoint(x: 16.8, y: 13.71))
                fill14.addCurve(to: CGPoint(x: 20.78, y: 17.36), controlPoint1: CGPoint(x: 19, y: 13.71), controlPoint2: CGPoint(x: 20.78, y: 15.35))
                fill14.addCurve(to: CGPoint(x: 16.8, y: 21.01), controlPoint1: CGPoint(x: 20.78, y: 19.37), controlPoint2: CGPoint(x: 19, y: 21.01))
                fill14.addLine(to: CGPoint(x: 9.78, y: 21.01))
                fill14.addLine(to: CGPoint(x: 9.78, y: 29.16))
                fill14.addCurve(to: CGPoint(x: 4.89, y: 33.64), controlPoint1: CGPoint(x: 9.78, y: 31.63), controlPoint2: CGPoint(x: 7.59, y: 33.64))
                context.saveGState()
                context.translateBy(x: 0.93, y: 0.36)
                fill14.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill14.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 8 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 12
            do {
                context.saveGState()
                context.translateBy(x: 14.03, y: 0)
                
                /// Clip 11
                let clip10 = UIBezierPath()
                clip10.move(to: CGPoint.zero)
                clip10.addLine(to: CGPoint(x: 33.52, y: 0))
                clip10.addLine(to: CGPoint(x: 33.52, y: 33.64))
                clip10.addLine(to: CGPoint(x: 0, y: 33.64))
                clip10.addLine(to: CGPoint.zero)
                clip10.close()
                context.saveGState()
                context.translateBy(x: 0.94, y: 0.36)
                context.restoreGState()
                
                
                /// Clip 11 (Outline Mask)
                context.saveGState()
                clip10.apply(CGAffineTransform(translationX: 0.94, y: 0.36))
                clip10.addClip()
                
                /// Fill 10
                let fill15 = UIBezierPath()
                fill15.move(to: CGPoint(x: 16.76, y: 12.47))
                fill15.addLine(to: CGPoint(x: 21.7, y: 2.56))
                fill15.addCurve(to: CGPoint(x: 25.99, y: 0), controlPoint1: CGPoint(x: 22.47, y: 1), controlPoint2: CGPoint(x: 24.15, y: 0))
                fill15.addLine(to: CGPoint(x: 33.52, y: 0))
                fill15.addLine(to: CGPoint(x: 21.66, y: 20.5))
                fill15.addLine(to: CGPoint(x: 21.66, y: 29.16))
                fill15.addCurve(to: CGPoint(x: 16.87, y: 33.64), controlPoint1: CGPoint(x: 21.66, y: 31.63), controlPoint2: CGPoint(x: 19.52, y: 33.64))
                fill15.addLine(to: CGPoint(x: 16.65, y: 33.64))
                fill15.addCurve(to: CGPoint(x: 11.86, y: 29.16), controlPoint1: CGPoint(x: 14, y: 33.64), controlPoint2: CGPoint(x: 11.86, y: 31.63))
                fill15.addLine(to: CGPoint(x: 11.86, y: 20.78))
                fill15.addLine(to: CGPoint.zero)
                fill15.addLine(to: CGPoint(x: 7.56, y: 0))
                fill15.addCurve(to: CGPoint(x: 11.87, y: 2.57), controlPoint1: CGPoint(x: 9.41, y: 0), controlPoint2: CGPoint(x: 11.09, y: 1))
                fill15.addLine(to: CGPoint(x: 16.76, y: 12.47))
                fill15.close()
                context.saveGState()
                context.translateBy(x: 0.94, y: 0.36)
                fill15.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill15.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 11 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 15
            do {
                context.saveGState()
                context.translateBy(x: 39.75, y: 0)
                
                /// Clip 14
                let clip14 = UIBezierPath()
                clip14.move(to: CGPoint.zero)
                clip14.addLine(to: CGPoint(x: 25.27, y: 0))
                clip14.addLine(to: CGPoint(x: 25.27, y: 33.64))
                clip14.addLine(to: CGPoint(x: 0, y: 33.64))
                clip14.addLine(to: CGPoint.zero)
                clip14.close()
                context.saveGState()
                context.translateBy(x: 0.91, y: 0.36)
                context.restoreGState()
                
                
                /// Clip 14 (Outline Mask)
                context.saveGState()
                clip14.apply(CGAffineTransform(translationX: 0.91, y: 0.36))
                clip14.addClip()
                
                /// Fill 13
                let fill13 = UIBezierPath()
                fill13.move(to: CGPoint(x: 11.75, y: 33.64))
                fill13.addLine(to: CGPoint(x: 11.6, y: 33.64))
                fill13.addCurve(to: CGPoint(x: 6.83, y: 29.16), controlPoint1: CGPoint(x: 8.96, y: 33.64), controlPoint2: CGPoint(x: 6.83, y: 31.63))
                fill13.addLine(to: CGPoint(x: 6.83, y: 7.43))
                fill13.addLine(to: CGPoint(x: 0, y: 7.43))
                fill13.addLine(to: CGPoint.zero)
                fill13.addLine(to: CGPoint(x: 25.27, y: 0))
                fill13.addLine(to: CGPoint(x: 25.27, y: 7.43))
                fill13.addLine(to: CGPoint(x: 16.53, y: 7.43))
                fill13.addLine(to: CGPoint(x: 16.53, y: 29.16))
                fill13.addCurve(to: CGPoint(x: 11.75, y: 33.64), controlPoint1: CGPoint(x: 16.53, y: 31.63), controlPoint2: CGPoint(x: 14.39, y: 33.64))
                context.saveGState()
                context.translateBy(x: 0.91, y: 0.36)
                fill13.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill13.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 14 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 18
            do {
                context.saveGState()
                context.translateBy(x: 56.11, y: 0)
                
                /// Clip 17
                let clip17 = UIBezierPath()
                clip17.move(to: CGPoint.zero)
                clip17.addLine(to: CGPoint(x: 26.89, y: 0))
                clip17.addLine(to: CGPoint(x: 26.89, y: 34))
                clip17.addLine(to: CGPoint(x: 0, y: 34))
                clip17.addLine(to: CGPoint.zero)
                clip17.close()
                
                
                /// Clip 17 (Outline Mask)
                context.saveGState()
                clip17.addClip()
                
                /// Fill 16
                let fill16 = UIBezierPath()
                fill16.move(to: CGPoint(x: 13.53, y: 34))
                fill16.addLine(to: CGPoint(x: 13.38, y: 34))
                fill16.addCurve(to: CGPoint(x: 8.66, y: 29.48), controlPoint1: CGPoint(x: 10.78, y: 34), controlPoint2: CGPoint(x: 8.66, y: 31.97))
                fill16.addLine(to: CGPoint(x: 8.66, y: 7.51))
                fill16.addLine(to: CGPoint(x: 0, y: 7.51))
                fill16.addLine(to: CGPoint.zero)
                fill16.addLine(to: CGPoint(x: 23.04, y: 0))
                fill16.addCurve(to: CGPoint(x: 26.89, y: 3.69), controlPoint1: CGPoint(x: 25.16, y: 0), controlPoint2: CGPoint(x: 26.89, y: 1.65))
                fill16.addLine(to: CGPoint(x: 26.89, y: 3.83))
                fill16.addCurve(to: CGPoint(x: 23.04, y: 7.51), controlPoint1: CGPoint(x: 26.89, y: 5.86), controlPoint2: CGPoint(x: 25.16, y: 7.51))
                fill16.addLine(to: CGPoint(x: 18.25, y: 7.51))
                fill16.addLine(to: CGPoint(x: 18.25, y: 29.48))
                fill16.addCurve(to: CGPoint(x: 13.53, y: 34), controlPoint1: CGPoint(x: 18.25, y: 31.97), controlPoint2: CGPoint(x: 16.14, y: 34))
                context.saveGState()
                fill16.usesEvenOddFillRule = true
                UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
                fill16.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 17 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    /// NOT IN USE
    
    class func drawTrainingRequestedCopy(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        context.translateBy(x: 44, y: 105)
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        rectangle.fill()
        context.restoreGState()
        
        /// Rectangle Copy 2
        let rectangleCopy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        context.translateBy(x: 140, y: 105)
        UIColor(white: 0.847, alpha: 1).setFill()
        rectangleCopy2.fill()
        context.restoreGState()
        
        /// Rectangle Copy
        let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        context.translateBy(x: 92, y: 105)
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        rectangleCopy.fill()
        context.restoreGState()
        
        /// Rectangle Copy 3
        let rectangleCopy3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        context.translateBy(x: 188, y: 105)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangleCopy3.fill()
        context.restoreGState()
        
        /// Rectangle Copy 4
        let rectangleCopy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        context.translateBy(x: 236, y: 105)
        UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setFill()
        rectangleCopy4.fill()
        context.restoreGState()
        
        /// Rectangle Copy 5
        let rectangleCopy5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        context.translateBy(x: 284, y: 105)
        UIColor(hue: 0.419, saturation: 0.712, brightness: 0.914, alpha: 1).setFill()
        rectangleCopy5.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawTrainingRequested2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// z
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// box_booking-requested
        // Warning: New symbols are not supported.
        
        /// box_booking-requested copy 3
        // Warning: New symbols are not supported.
        
        /// box_booking-requested copy
        // Warning: New symbols are not supported.
        
        /// box_booking-requested copy 2
        // Warning: New symbols are not supported.
        
        /// YOU HAVE UPCOMMING S
        let yOUHAVEUPCOMMINGS = NSMutableAttributedString(string: "YOU HAVE UPCOMMING\nSESSIONS WITH")
        yOUHAVEUPCOMMINGS.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: yOUHAVEUPCOMMINGS.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            yOUHAVEUPCOMMINGS.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: yOUHAVEUPCOMMINGS.length))
        }
        yOUHAVEUPCOMMINGS.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: yOUHAVEUPCOMMINGS.length))
        context.saveGState()
        yOUHAVEUPCOMMINGS.draw(at: CGPoint(x: 69, y: 73))
        context.restoreGState()
        
        /// Menu/quickmenu-Trainer
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawPeppAppSignUpPage2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// lars.gadeby@whatwedo
        let larsgadebywhatwedo = NSMutableAttributedString(string: "lars.gadeby@whatwedo.se")
        larsgadebywhatwedo.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: larsgadebywhatwedo.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            larsgadebywhatwedo.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: larsgadebywhatwedo.length))
        }
        larsgadebywhatwedo.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: larsgadebywhatwedo.length))
        context.saveGState()
        larsgadebywhatwedo.draw(at: CGPoint(x: 54, y: 291))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 54, y: 380)
            
            /// Oval 3
            let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy
            let oval3Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 16, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 2
            let oval3Copy2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 32, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy2.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 3
            let oval3Copy3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 48, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 4
            let oval3Copy4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 64, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy4.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 5
            let oval3Copy5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 80, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy5.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 6
            let oval3Copy6 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 95, y: 0)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval3Copy6.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Or Sign Up with
        let orSignUpWith = NSMutableAttributedString(string: "Or Sign Up with")
        orSignUpWith.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: orSignUpWith.length))
        orSignUpWith.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: orSignUpWith.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            orSignUpWith.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: orSignUpWith.length))
        }
        orSignUpWith.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: orSignUpWith.length))
        context.saveGState()
        orSignUpWith.draw(at: CGPoint(x: 125, y: 510))
        context.restoreGState()
        
        /// Rectangle 4
        let rectangle4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 293, height: 50), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 41, y: 559)
        UIColor(hue: 0.613, saturation: 0.612, brightness: 0.596, alpha: 1).setFill()
        rectangle4.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy
        let rectangle4Copy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 293, height: 50), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 41, y: 628)
        UIColor.white.setFill()
        rectangle4Copy.fill()
        context.saveGState()
        rectangle4Copy.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle4Copy.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.78, alpha: 1).setStroke()
        rectangle4Copy.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4 Copy 2
        let rectangle4Copy2 = UIBezierPath()
        rectangle4Copy2.move(to: CGPoint(x: 25, y: 0))
        rectangle4Copy2.addLine(to: CGPoint(x: 268, y: 0))
        rectangle4Copy2.addCurve(to: CGPoint(x: 293, y: 25), controlPoint1: CGPoint(x: 281.81, y: 0), controlPoint2: CGPoint(x: 293, y: 11.19))
        rectangle4Copy2.addLine(to: CGPoint(x: 293, y: 25))
        rectangle4Copy2.addCurve(to: CGPoint(x: 268, y: 50), controlPoint1: CGPoint(x: 293, y: 38.81), controlPoint2: CGPoint(x: 281.81, y: 50))
        rectangle4Copy2.addCurve(to: CGPoint(x: 52.47, y: 50), controlPoint1: CGPoint(x: 196.16, y: 50), controlPoint2: CGPoint(x: 124.31, y: 50))
        rectangle4Copy2.addCurve(to: CGPoint(x: 25, y: 50), controlPoint1: CGPoint(x: 43.31, y: 50), controlPoint2: CGPoint(x: 34.16, y: 50))
        rectangle4Copy2.addLine(to: CGPoint(x: 25, y: 50))
        rectangle4Copy2.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 11.19, y: 50), controlPoint2: CGPoint(x: 0, y: 38.81))
        rectangle4Copy2.addLine(to: CGPoint(x: 0, y: 25))
        rectangle4Copy2.addCurve(to: CGPoint(x: 25, y: 0), controlPoint1: CGPoint(x: 0, y: 11.19), controlPoint2: CGPoint(x: 11.19, y: 0))
        rectangle4Copy2.close()
        context.saveGState()
        context.translateBy(x: 41, y: 697)
        rectangle4Copy2.usesEvenOddFillRule = true
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        rectangle4Copy2.fill()
        context.restoreGState()
        
        /// icn/socialmedia/facebook
        // Warning: New symbols are not supported.
        
        /// Facebook
        let facebook = NSMutableAttributedString(string: "Facebook")
        facebook.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: facebook.length))
        facebook.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: 7))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            facebook.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: facebook.length))
        }
        facebook.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: facebook.length))
        context.saveGState()
        facebook.draw(at: CGPoint(x: 151, y: 572))
        context.restoreGState()
        
        /// Google
        let google = NSMutableAttributedString(string: "Google")
        google.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: google.length))
        google.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: google.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            google.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: google.length))
        }
        google.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: google.length))
        context.saveGState()
        google.draw(at: CGPoint(x: 162, y: 641))
        context.restoreGState()
        
        /// E-mail
        let email = NSMutableAttributedString(string: "E-mail")
        email.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: email.length))
        email.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: email.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            email.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: email.length))
        }
        email.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: email.length))
        context.saveGState()
        email.draw(at: CGPoint(x: 166, y: 710))
        context.restoreGState()
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 67, y: 638)
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 15, y: 13)
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 0, y: 5.74))
                clip2.addLine(to: CGPoint(x: 8.35, y: 5.74))
                clip2.addCurve(to: CGPoint(x: 5.26, y: 10.22), controlPoint1: CGPoint(x: 7.99, y: 7.59), controlPoint2: CGPoint(x: 6.9, y: 9.16))
                clip2.addLine(to: CGPoint(x: 5.26, y: 13.94))
                clip2.addLine(to: CGPoint(x: 10.27, y: 13.94))
                clip2.addCurve(to: CGPoint(x: 14.9, y: 3.03), controlPoint1: CGPoint(x: 13.21, y: 11.36), controlPoint2: CGPoint(x: 14.9, y: 7.55))
                clip2.addCurve(to: CGPoint(x: 14.62, y: 0), controlPoint1: CGPoint(x: 14.9, y: 1.98), controlPoint2: CGPoint(x: 14.8, y: 0.97))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                context.saveGState()
                context.translateBy(x: 0.08, y: 0.06)
                context.restoreGState()
                
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.apply(CGAffineTransform(translationX: 0.08, y: 0.06))
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 0, y: 30.42))
                fill1.addLine(to: CGPoint(x: 32.15, y: 30.42))
                fill1.addLine(to: CGPoint(x: 32.15, y: 0))
                fill1.addLine(to: CGPoint.zero)
                fill1.addLine(to: CGPoint(x: 0, y: 30.42))
                fill1.close()
                context.saveGState()
                context.translateBy(x: -8.55, y: -8.18)
                fill1.usesEvenOddFillRule = true
                UIColor(hue: 0.603, saturation: 0.743, brightness: 0.945, alpha: 1).setFill()
                fill1.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 2, y: 18)
                
                /// Clip 5
                let clip5 = UIBezierPath()
                clip5.move(to: CGPoint.zero)
                clip5.addLine(to: CGPoint(x: 0, y: 4.11))
                clip5.addCurve(to: CGPoint(x: 13.73, y: 12.84), controlPoint1: CGPoint(x: 2.53, y: 9.29), controlPoint2: CGPoint(x: 7.73, y: 12.84))
                clip5.addCurve(to: CGPoint(x: 23.9, y: 9), controlPoint1: CGPoint(x: 17.88, y: 12.84), controlPoint2: CGPoint(x: 21.36, y: 11.42))
                clip5.addLine(to: CGPoint(x: 18.94, y: 5.02))
                clip5.addCurve(to: CGPoint(x: 13.73, y: 6.53), controlPoint1: CGPoint(x: 17.56, y: 5.97), controlPoint2: CGPoint(x: 15.8, y: 6.53))
                clip5.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 9.73, y: 6.53), controlPoint2: CGPoint(x: 6.34, y: 3.75))
                clip5.addLine(to: CGPoint.zero)
                clip5.close()
                context.saveGState()
                context.translateBy(x: 0.07, y: 0.08)
                context.restoreGState()
                
                
                /// Clip 5 (Outline Mask)
                context.saveGState()
                clip5.apply(CGAffineTransform(translationX: 0.07, y: 0.08))
                clip5.addClip()
                
                /// Fill 4
                let fill4 = UIBezierPath()
                fill4.move(to: CGPoint(x: 0, y: 30.45))
                fill4.addLine(to: CGPoint(x: 40.98, y: 30.45))
                fill4.addLine(to: CGPoint(x: 40.98, y: 0))
                fill4.addLine(to: CGPoint.zero)
                fill4.addLine(to: CGPoint(x: 0, y: 30.45))
                fill4.close()
                context.saveGState()
                context.translateBy(x: -8.47, y: -8.72)
                fill4.usesEvenOddFillRule = true
                UIColor(hue: 0.38, saturation: 0.701, brightness: 0.655, alpha: 1).setFill()
                fill4.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 5 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 9
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 8)
                
                /// Clip 8
                let clip8 = UIBezierPath()
                clip8.move(to: CGPoint(x: 1.66, y: 0))
                clip8.addCurve(to: CGPoint(x: 0, y: 6.95), controlPoint1: CGPoint(x: 0.6, y: 2.09), controlPoint2: CGPoint(x: 0, y: 4.45))
                clip8.addCurve(to: CGPoint(x: 1.66, y: 13.9), controlPoint1: CGPoint(x: 0, y: 9.45), controlPoint2: CGPoint(x: 0.6, y: 11.81))
                clip8.addLine(to: CGPoint(x: 6.86, y: 9.89))
                clip8.addCurve(to: CGPoint(x: 6.37, y: 6.95), controlPoint1: CGPoint(x: 6.55, y: 8.96), controlPoint2: CGPoint(x: 6.37, y: 7.97))
                clip8.addCurve(to: CGPoint(x: 6.86, y: 4.01), controlPoint1: CGPoint(x: 6.37, y: 5.93), controlPoint2: CGPoint(x: 6.55, y: 4.94))
                clip8.addLine(to: CGPoint(x: 6.86, y: 0))
                clip8.addLine(to: CGPoint(x: 1.66, y: 0))
                clip8.close()
                context.saveGState()
                context.translateBy(x: 0.08, y: 0.01)
                context.restoreGState()
                
                
                /// Clip 8 (Outline Mask)
                context.saveGState()
                clip8.apply(CGAffineTransform(translationX: 0.08, y: 0.01))
                clip8.addClip()
                
                /// Fill 7
                let fill7 = UIBezierPath()
                fill7.move(to: CGPoint(x: 0, y: 31.1))
                fill7.addLine(to: CGPoint(x: 24.17, y: 31.1))
                fill7.addLine(to: CGPoint(x: 24.17, y: 0))
                fill7.addLine(to: CGPoint.zero)
                fill7.addLine(to: CGPoint(x: 0, y: 31.1))
                fill7.close()
                context.saveGState()
                context.translateBy(x: -8.57, y: -8.59)
                fill7.usesEvenOddFillRule = true
                UIColor(hue: 0.125, saturation: 1, brightness: 0.976, alpha: 1).setFill()
                fill7.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 8 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 12
            do {
                context.saveGState()
                context.translateBy(x: 2, y: 0)
                
                /// Clip 11
                let clip11 = UIBezierPath()
                clip11.move(to: CGPoint(x: 0, y: 8.79))
                clip11.addLine(to: CGPoint(x: 5.1, y: 12.93))
                clip11.addCurve(to: CGPoint(x: 13.64, y: 6.35), controlPoint1: CGPoint(x: 6.3, y: 9.15), controlPoint2: CGPoint(x: 9.66, y: 6.35))
                clip11.addCurve(to: CGPoint(x: 19.47, y: 8.73), controlPoint1: CGPoint(x: 15.88, y: 6.35), controlPoint2: CGPoint(x: 17.89, y: 7.15))
                clip11.addLine(to: CGPoint(x: 23.84, y: 4.16))
                clip11.addCurve(to: CGPoint(x: 13.64, y: 0), controlPoint1: CGPoint(x: 21.2, y: 1.58), controlPoint2: CGPoint(x: 17.75, y: 0))
                clip11.addCurve(to: CGPoint(x: 0, y: 8.79), controlPoint1: CGPoint(x: 7.67, y: 0), controlPoint2: CGPoint(x: 2.51, y: 3.58))
                clip11.close()
                context.saveGState()
                context.translateBy(x: 0.07, y: 0.01)
                context.restoreGState()
                
                
                /// Clip 11 (Outline Mask)
                context.saveGState()
                clip11.apply(CGAffineTransform(translationX: 0.07, y: 0.01))
                clip11.addClip()
                
                /// Fill 10
                let fill10 = UIBezierPath()
                fill10.move(to: CGPoint(x: 0, y: 30.66))
                fill10.addLine(to: CGPoint(x: 40.8, y: 30.66))
                fill10.addLine(to: CGPoint(x: 40.8, y: 0))
                fill10.addLine(to: CGPoint.zero)
                fill10.addLine(to: CGPoint(x: 0, y: 30.66))
                fill10.close()
                context.saveGState()
                context.translateBy(x: -8.41, y: -8.86)
                fill10.usesEvenOddFillRule = true
                UIColor(hue: 0.013, saturation: 0.779, brightness: 0.906, alpha: 1).setFill()
                fill10.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 11 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// FIND YOUR TRAINER TO
        let fINDYOURTRAINERTO = NSMutableAttributedString(string: "FIND YOUR TRAINER TODAY")
        fINDYOURTRAINERTO.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 21)!, range: NSRange(location: 0, length: fINDYOURTRAINERTO.length))
        fINDYOURTRAINERTO.addAttribute(.kern, value: -0.91, range: NSRange(location: 0, length: 22))
        fINDYOURTRAINERTO.addAttribute(.kern, value: -0.87, range: NSRange(location: 22, length: 1))
        fINDYOURTRAINERTO.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.204, brightness: 0.292, alpha: 1), range: NSRange(location: 0, length: fINDYOURTRAINERTO.length))
        context.saveGState()
        fINDYOURTRAINERTO.draw(in: CGRect(x: 67, y: 229, width: 246, height: 31))
        context.restoreGState()
        
        /// Group 13
        do {
            context.saveGState()
            context.translateBy(x: 67, y: 82)
            
            /// Fill 1
            let fill9 = UIBezierPath()
            fill9.move(to: CGPoint(x: 29.55, y: 111))
            fill9.addLine(to: CGPoint(x: 20.26, y: 111))
            fill9.addCurve(to: CGPoint(x: 0, y: 90.75), controlPoint1: CGPoint(x: 9.07, y: 111), controlPoint2: CGPoint(x: 0, y: 101.93))
            fill9.addLine(to: CGPoint(x: 0, y: 12.36))
            fill9.addCurve(to: CGPoint(x: 12.36, y: 0), controlPoint1: CGPoint(x: 0, y: 5.53), controlPoint2: CGPoint(x: 5.54, y: 0))
            fill9.addLine(to: CGPoint(x: 65.63, y: 0))
            fill9.addLine(to: CGPoint(x: 78, y: 24.07))
            fill9.addLine(to: CGPoint(x: 29.55, y: 24.07))
            fill9.addLine(to: CGPoint(x: 29.55, y: 45.25))
            fill9.addLine(to: CGPoint(x: 62.82, y: 45.25))
            fill9.addLine(to: CGPoint(x: 62.82, y: 69.32))
            fill9.addLine(to: CGPoint(x: 29.55, y: 69.32))
            fill9.addLine(to: CGPoint(x: 29.55, y: 111))
            fill9.close()
            context.saveGState()
            context.translateBy(x: 0, y: 30)
            fill9.usesEvenOddFillRule = true
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            fill9.fill()
            context.restoreGState()
            
            
            /// Fill 3
            let fill3 = UIBezierPath()
            fill3.move(to: CGPoint(x: 62.15, y: 111))
            fill3.addLine(to: CGPoint(x: 32.36, y: 111))
            fill3.addLine(to: CGPoint(x: 32.36, y: 24.52))
            fill3.addLine(to: CGPoint(x: 0, y: 24.52))
            fill3.addLine(to: CGPoint(x: 12.05, y: 0))
            fill3.addLine(to: CGPoint(x: 89, y: 0))
            fill3.addLine(to: CGPoint(x: 89, y: 24.52))
            fill3.addLine(to: CGPoint(x: 62.15, y: 24.52))
            fill3.addLine(to: CGPoint(x: 62.15, y: 111))
            fill3.close()
            context.saveGState()
            context.translateBy(x: 112, y: 30)
            fill3.usesEvenOddFillRule = true
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            fill3.fill()
            context.restoreGState()
            
            
            /// Fill 5
            let fill5 = UIBezierPath()
            fill5.move(to: CGPoint(x: 36.74, y: 111))
            fill5.addLine(to: CGPoint(x: 27.03, y: 111))
            fill5.addLine(to: CGPoint(x: 27.03, y: 24.52))
            fill5.addLine(to: CGPoint(x: 0, y: 24.52))
            fill5.addLine(to: CGPoint.zero)
            fill5.addLine(to: CGPoint(x: 61.77, y: 0))
            fill5.addCurve(to: CGPoint(x: 74, y: 12.26), controlPoint1: CGPoint(x: 68.53, y: 0), controlPoint2: CGPoint(x: 74, y: 5.49))
            fill5.addCurve(to: CGPoint(x: 61.77, y: 24.52), controlPoint1: CGPoint(x: 74, y: 19.03), controlPoint2: CGPoint(x: 68.53, y: 24.52))
            fill5.addLine(to: CGPoint(x: 56.94, y: 24.52))
            fill5.addLine(to: CGPoint(x: 56.94, y: 90.75))
            fill5.addCurve(to: CGPoint(x: 36.74, y: 111), controlPoint1: CGPoint(x: 56.94, y: 101.93), controlPoint2: CGPoint(x: 47.9, y: 111))
            context.saveGState()
            context.translateBy(x: 167, y: 30)
            fill5.usesEvenOddFillRule = true
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            fill5.fill()
            context.restoreGState()
            
            
            /// Group 9
            do {
                context.saveGState()
                context.translateBy(x: 53, y: 30)
                
                /// Clip 8
                let clip3 = UIBezierPath()
                clip3.move(to: CGPoint.zero)
                clip3.addLine(to: CGPoint(x: 90.86, y: 0))
                clip3.addLine(to: CGPoint(x: 90.86, y: 111))
                clip3.addLine(to: CGPoint(x: 0, y: 111))
                clip3.addLine(to: CGPoint.zero)
                clip3.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                context.restoreGState()
                
                
                /// Clip 8 (Outline Mask)
                context.saveGState()
                clip3.apply(CGAffineTransform(translationX: 0, y: 0))
                clip3.addClip()
                
                /// Fill 7
                let fill12 = UIBezierPath()
                fill12.move(to: CGPoint(x: 45.99, y: 26.16))
                fill12.addLine(to: CGPoint(x: 54.91, y: 5.2))
                fill12.addCurve(to: CGPoint(x: 62.77, y: 0), controlPoint1: CGPoint(x: 56.25, y: 2.05), controlPoint2: CGPoint(x: 59.35, y: 0))
                fill12.addLine(to: CGPoint(x: 90.86, y: 0))
                fill12.addLine(to: CGPoint(x: 61.16, y: 54.88))
                fill12.addLine(to: CGPoint(x: 61.16, y: 111))
                fill12.addLine(to: CGPoint(x: 29.79, y: 111))
                fill12.addLine(to: CGPoint(x: 29.79, y: 55.82))
                fill12.addLine(to: CGPoint(x: 0, y: 0))
                fill12.addLine(to: CGPoint(x: 28.23, y: 0))
                fill12.addCurve(to: CGPoint(x: 36.1, y: 5.21), controlPoint1: CGPoint(x: 31.66, y: 0), controlPoint2: CGPoint(x: 34.76, y: 2.05))
                fill12.addLine(to: CGPoint(x: 44.97, y: 26.16))
                fill12.addCurve(to: CGPoint(x: 45.99, y: 26.16), controlPoint1: CGPoint(x: 45.16, y: 26.61), controlPoint2: CGPoint(x: 45.8, y: 26.61))
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                fill12.usesEvenOddFillRule = true
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                fill12.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 8 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 12
            do {
                context.saveGState()
                context.translateBy(x: 85, y: 0)
                
                /// Clip 11
                let clip4 = UIBezierPath()
                clip4.move(to: CGPoint.zero)
                clip4.addLine(to: CGPoint(x: 26.14, y: 0))
                clip4.addLine(to: CGPoint(x: 26.14, y: 46.05))
                clip4.addLine(to: CGPoint(x: 0, y: 46.05))
                clip4.addLine(to: CGPoint.zero)
                clip4.close()
                context.saveGState()
                context.translateBy(x: 0.41, y: 0.34)
                context.restoreGState()
                
                
                /// Clip 11 (Outline Mask)
                context.saveGState()
                clip4.apply(CGAffineTransform(translationX: 0.41, y: 0.34))
                clip4.addClip()
                
                /// Fill 10
                let fill14 = UIBezierPath()
                fill14.move(to: CGPoint(x: 13.07, y: 0))
                fill14.addCurve(to: CGPoint(x: 25.06, y: 18.62), controlPoint1: CGPoint(x: 22.45, y: 0), controlPoint2: CGPoint(x: 28.77, y: 9.81))
                fill14.addLine(to: CGPoint(x: 13.7, y: 45.63))
                fill14.addCurve(to: CGPoint(x: 12.44, y: 45.63), controlPoint1: CGPoint(x: 13.46, y: 46.19), controlPoint2: CGPoint(x: 12.68, y: 46.19))
                fill14.addLine(to: CGPoint(x: 1.08, y: 18.62))
                fill14.addCurve(to: CGPoint(x: 13.07, y: 0), controlPoint1: CGPoint(x: -2.63, y: 9.81), controlPoint2: CGPoint(x: 3.69, y: 0))
                context.saveGState()
                context.translateBy(x: 0.41, y: 0.34)
                fill14.usesEvenOddFillRule = true
                UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
                fill14.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 11 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawTrainerCalender(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// calender/week
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    /// Symbols
    
    class func drawIcncertified_trainer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 37), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 37), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 37)
        
        /// Group 9
        do {
            context.saveGState()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 0, y: 20.13))
            fill1.addLine(to: CGPoint(x: 3.43, y: 17.95))
            fill1.addLine(to: CGPoint(x: 6.3, y: 21))
            fill1.addLine(to: CGPoint(x: 7, y: 0.46))
            fill1.addLine(to: CGPoint(x: 3.63, y: 0))
            fill1.addLine(to: CGPoint(x: 0, y: 20.13))
            fill1.close()
            context.saveGState()
            context.translateBy(x: 6, y: 16)
            fill1.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.021, brightness: 0.188, alpha: 1).setFill()
            fill1.fill()
            context.restoreGState()
            
            
            /// Fill 2
            let fill2 = UIBezierPath()
            fill2.move(to: CGPoint(x: 0, y: 0.55))
            fill2.addLine(to: CGPoint(x: 1.2, y: 21))
            fill2.addLine(to: CGPoint(x: 4.24, y: 17.88))
            fill2.addLine(to: CGPoint(x: 8, y: 19.97))
            fill2.addLine(to: CGPoint(x: 3.64, y: 0))
            fill2.addLine(to: CGPoint(x: 0, y: 0.55))
            fill2.close()
            context.saveGState()
            context.translateBy(x: 13, y: 16)
            fill2.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.021, brightness: 0.188, alpha: 1).setFill()
            fill2.fill()
            context.restoreGState()
            
            
            /// Fill 3
            let fill3 = UIBezierPath()
            fill3.move(to: CGPoint(x: 13, y: 0))
            fill3.addLine(to: CGPoint(x: 11.49, y: 1.51))
            fill3.addLine(to: CGPoint(x: 9.64, y: 0.44))
            fill3.addLine(to: CGPoint(x: 8.57, y: 2.29))
            fill3.addLine(to: CGPoint(x: 6.5, y: 1.74))
            fill3.addLine(to: CGPoint(x: 5.95, y: 3.81))
            fill3.addLine(to: CGPoint(x: 3.81, y: 3.81))
            fill3.addLine(to: CGPoint(x: 3.81, y: 5.95))
            fill3.addLine(to: CGPoint(x: 1.74, y: 6.5))
            fill3.addLine(to: CGPoint(x: 2.3, y: 8.57))
            fill3.addLine(to: CGPoint(x: 0.44, y: 9.64))
            fill3.addLine(to: CGPoint(x: 1.51, y: 11.49))
            fill3.addLine(to: CGPoint(x: 0, y: 13))
            fill3.addLine(to: CGPoint(x: 1.51, y: 14.51))
            fill3.addLine(to: CGPoint(x: 0.44, y: 16.36))
            fill3.addLine(to: CGPoint(x: 2.3, y: 17.43))
            fill3.addLine(to: CGPoint(x: 1.74, y: 19.5))
            fill3.addLine(to: CGPoint(x: 3.81, y: 20.05))
            fill3.addLine(to: CGPoint(x: 3.81, y: 22.19))
            fill3.addLine(to: CGPoint(x: 5.95, y: 22.19))
            fill3.addLine(to: CGPoint(x: 6.5, y: 24.26))
            fill3.addLine(to: CGPoint(x: 8.57, y: 23.71))
            fill3.addLine(to: CGPoint(x: 9.64, y: 25.56))
            fill3.addLine(to: CGPoint(x: 11.49, y: 24.49))
            fill3.addLine(to: CGPoint(x: 13, y: 26))
            fill3.addLine(to: CGPoint(x: 14.51, y: 24.49))
            fill3.addLine(to: CGPoint(x: 16.36, y: 25.56))
            fill3.addLine(to: CGPoint(x: 17.43, y: 23.71))
            fill3.addLine(to: CGPoint(x: 19.5, y: 24.26))
            fill3.addLine(to: CGPoint(x: 20.05, y: 22.19))
            fill3.addLine(to: CGPoint(x: 22.19, y: 22.19))
            fill3.addLine(to: CGPoint(x: 22.19, y: 20.05))
            fill3.addLine(to: CGPoint(x: 24.26, y: 19.5))
            fill3.addLine(to: CGPoint(x: 23.7, y: 17.43))
            fill3.addLine(to: CGPoint(x: 25.56, y: 16.36))
            fill3.addLine(to: CGPoint(x: 24.49, y: 14.51))
            fill3.addLine(to: CGPoint(x: 26, y: 13))
            fill3.addLine(to: CGPoint(x: 24.49, y: 11.49))
            fill3.addLine(to: CGPoint(x: 25.56, y: 9.64))
            fill3.addLine(to: CGPoint(x: 23.7, y: 8.57))
            fill3.addLine(to: CGPoint(x: 24.26, y: 6.5))
            fill3.addLine(to: CGPoint(x: 22.19, y: 5.95))
            fill3.addLine(to: CGPoint(x: 22.19, y: 3.81))
            fill3.addLine(to: CGPoint(x: 20.05, y: 3.81))
            fill3.addLine(to: CGPoint(x: 19.5, y: 1.74))
            fill3.addLine(to: CGPoint(x: 17.43, y: 2.29))
            fill3.addLine(to: CGPoint(x: 16.36, y: 0.44))
            fill3.addLine(to: CGPoint(x: 14.51, y: 1.51))
            fill3.addLine(to: CGPoint(x: 13, y: 0))
            fill3.close()
            context.saveGState()
            fill3.usesEvenOddFillRule = true
            UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setFill()
            fill3.fill()
            context.restoreGState()
            
            
            /// Group 8
            do {
                context.saveGState()
                context.translateBy(x: 4, y: 4)
                
                /// Fill 4
                let fill4 = UIBezierPath()
                fill4.move(to: CGPoint(x: 17.39, y: 8.92))
                fill4.addCurve(to: CGPoint(x: 8.69, y: 17.84), controlPoint1: CGPoint(x: 17.39, y: 13.84), controlPoint2: CGPoint(x: 13.5, y: 17.84))
                fill4.addCurve(to: CGPoint(x: 0, y: 8.92), controlPoint1: CGPoint(x: 3.89, y: 17.84), controlPoint2: CGPoint(x: 0, y: 13.84))
                fill4.addCurve(to: CGPoint(x: 8.69, y: 0), controlPoint1: CGPoint(x: 0, y: 3.99), controlPoint2: CGPoint(x: 3.89, y: 0))
                fill4.addCurve(to: CGPoint(x: 17.39, y: 8.92), controlPoint1: CGPoint(x: 13.5, y: 0), controlPoint2: CGPoint(x: 17.39, y: 3.99))
                context.saveGState()
                context.translateBy(x: 0.18, y: 0.16)
                fill4.usesEvenOddFillRule = true
                UIColor(hue: 0.616, saturation: 0.043, brightness: 0.541, alpha: 1).setFill()
                fill4.fill()
                context.restoreGState()
                
                
                /// Fill 6
                let fill6 = UIBezierPath()
                fill6.move(to: CGPoint(x: 4.45, y: 2.1))
                fill6.addCurve(to: CGPoint(x: 3.06, y: 2.85), controlPoint1: CGPoint(x: 3.86, y: 2.1), controlPoint2: CGPoint(x: 3.4, y: 2.35))
                fill6.addCurve(to: CGPoint(x: 2.57, y: 4.91), controlPoint1: CGPoint(x: 2.73, y: 3.35), controlPoint2: CGPoint(x: 2.57, y: 4.04))
                fill6.addCurve(to: CGPoint(x: 4.59, y: 7.65), controlPoint1: CGPoint(x: 2.57, y: 6.74), controlPoint2: CGPoint(x: 3.24, y: 7.65))
                fill6.addCurve(to: CGPoint(x: 5.78, y: 7.47), controlPoint1: CGPoint(x: 5, y: 7.65), controlPoint2: CGPoint(x: 5.4, y: 7.59))
                fill6.addCurve(to: CGPoint(x: 6.94, y: 7.05), controlPoint1: CGPoint(x: 6.17, y: 7.36), controlPoint2: CGPoint(x: 6.55, y: 7.22))
                fill6.addLine(to: CGPoint(x: 6.94, y: 9.22))
                fill6.addCurve(to: CGPoint(x: 4.32, y: 9.74), controlPoint1: CGPoint(x: 6.17, y: 9.57), controlPoint2: CGPoint(x: 5.3, y: 9.74))
                fill6.addCurve(to: CGPoint(x: 1.12, y: 8.5), controlPoint1: CGPoint(x: 2.93, y: 9.74), controlPoint2: CGPoint(x: 1.86, y: 9.33))
                fill6.addCurve(to: CGPoint(x: 0, y: 4.9), controlPoint1: CGPoint(x: 0.37, y: 7.67), controlPoint2: CGPoint(x: 0, y: 6.47))
                fill6.addCurve(to: CGPoint(x: 0.54, y: 2.31), controlPoint1: CGPoint(x: 0, y: 3.92), controlPoint2: CGPoint(x: 0.18, y: 3.06))
                fill6.addCurve(to: CGPoint(x: 2.09, y: 0.6), controlPoint1: CGPoint(x: 0.9, y: 1.57), controlPoint2: CGPoint(x: 1.42, y: 1))
                fill6.addCurve(to: CGPoint(x: 4.48, y: 0), controlPoint1: CGPoint(x: 2.77, y: 0.2), controlPoint2: CGPoint(x: 3.57, y: 0))
                fill6.addCurve(to: CGPoint(x: 7.34, y: 0.67), controlPoint1: CGPoint(x: 5.48, y: 0), controlPoint2: CGPoint(x: 6.43, y: 0.22))
                fill6.addLine(to: CGPoint(x: 6.58, y: 2.68))
                fill6.addCurve(to: CGPoint(x: 5.55, y: 2.27), controlPoint1: CGPoint(x: 6.24, y: 2.52), controlPoint2: CGPoint(x: 5.9, y: 2.38))
                fill6.addCurve(to: CGPoint(x: 4.45, y: 2.1), controlPoint1: CGPoint(x: 5.21, y: 2.16), controlPoint2: CGPoint(x: 4.85, y: 2.1))
                context.saveGState()
                context.translateBy(x: 4.72, y: 4.53)
                fill6.usesEvenOddFillRule = true
                UIColor.white.setFill()
                fill6.fill()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawMiscbtnnumbers(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)
        
        /// Oval 5
        let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 40, height: 40))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        oval5.fill()
        context.restoreGState()
        
        /// 1
        let _1 = NSMutableAttributedString(string: "1")
        _1.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 23)!, range: NSRange(location: 0, length: _1.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
        }
        _1.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _1.length))
        context.saveGState()
        _1.draw(at: CGPoint(x: 12, y: 4))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcncheckinselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 19)
        
        /// Oval 5
        let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 19, height: 19))
        context.saveGState()
        oval5.lineWidth = 2
        UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setStroke()
        oval5.stroke()
        context.restoreGState()
        
        /// Path 3
        let path3 = UIBezierPath()
        path3.move(to: CGPoint(x: 0, y: 2.98))
        path3.addLine(to: CGPoint(x: 2.92, y: 7.1))
        path3.addLine(to: CGPoint(x: 7.34, y: 0))
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        path3.lineJoinStyle = .round
        path3.lineCapStyle = .round
        path3.lineWidth = 2
        UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setStroke()
        path3.stroke()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcncheckindeselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 19)
        
        /// Oval 5
        let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 19, height: 19))
        context.saveGState()
        oval5.lineWidth = 2
        UIColor(hue: 0.611, saturation: 0.039, brightness: 0.306, alpha: 1).setStroke()
        oval5.stroke()
        context.restoreGState()
        
        /// Path 3
        let path3 = UIBezierPath()
        path3.move(to: CGPoint(x: 0, y: 2.98))
        path3.addLine(to: CGPoint(x: 2.92, y: 7.1))
        path3.addLine(to: CGPoint(x: 7.34, y: 0))
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        path3.lineJoinStyle = .round
        path3.lineCapStyle = .round
        path3.lineWidth = 2
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setStroke()
        path3.stroke()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawMenuquickmenuTrainer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 40)
        
        /// Menu/Holder
        // Warning: New symbols are not supported.
        
        /// icn/profile/selected
        // Warning: New symbols are not supported.
        
        /// icn/calender/de-selected
        // Warning: New symbols are not supported.
        
        /// icn/check-in-de-selected
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawMenuquickmenuClient(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 40)
        
        /// Menu/Holder
        // Warning: New symbols are not supported.
        
        /// icn/profile/selected
        // Warning: New symbols are not supported.
        
        /// icn/search/de-selected
        // Warning: New symbols are not supported.
        
        /// icn/calender/de-selected
        // Warning: New symbols are not supported.
        
        /// icn/check-in-de-selected
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnbasecrossfit2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 28)
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 5)
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 13.37, y: 0))
                clip2.addLine(to: CGPoint(x: 13.37, y: 17.12))
                clip2.addLine(to: CGPoint(x: 0, y: 17.12))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.38)
                context.restoreGState()
                
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.apply(CGAffineTransform(translationX: 0, y: 0.38))
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 8.11, y: 3.69))
                fill1.addCurve(to: CGPoint(x: 5.58, y: 5.01), controlPoint1: CGPoint(x: 7.03, y: 3.69), controlPoint2: CGPoint(x: 6.19, y: 4.13))
                fill1.addCurve(to: CGPoint(x: 4.67, y: 8.64), controlPoint1: CGPoint(x: 4.98, y: 5.88), controlPoint2: CGPoint(x: 4.67, y: 7.09))
                fill1.addCurve(to: CGPoint(x: 8.37, y: 13.44), controlPoint1: CGPoint(x: 4.67, y: 11.84), controlPoint2: CGPoint(x: 5.9, y: 13.44))
                fill1.addCurve(to: CGPoint(x: 10.53, y: 13.13), controlPoint1: CGPoint(x: 9.11, y: 13.44), controlPoint2: CGPoint(x: 9.83, y: 13.34))
                fill1.addCurve(to: CGPoint(x: 12.64, y: 12.4), controlPoint1: CGPoint(x: 11.23, y: 12.93), controlPoint2: CGPoint(x: 11.93, y: 12.68))
                fill1.addLine(to: CGPoint(x: 12.64, y: 16.2))
                fill1.addCurve(to: CGPoint(x: 7.87, y: 17.12), controlPoint1: CGPoint(x: 11.23, y: 16.82), controlPoint2: CGPoint(x: 9.64, y: 17.12))
                fill1.addCurve(to: CGPoint(x: 2.03, y: 14.94), controlPoint1: CGPoint(x: 5.33, y: 17.12), controlPoint2: CGPoint(x: 3.39, y: 16.39))
                fill1.addCurve(to: CGPoint(x: 0, y: 8.61), controlPoint1: CGPoint(x: 0.68, y: 13.48), controlPoint2: CGPoint(x: 0, y: 11.37))
                fill1.addCurve(to: CGPoint(x: 0.98, y: 4.07), controlPoint1: CGPoint(x: 0, y: 6.89), controlPoint2: CGPoint(x: 0.33, y: 5.37))
                fill1.addCurve(to: CGPoint(x: 3.82, y: 1.05), controlPoint1: CGPoint(x: 1.64, y: 2.76), controlPoint2: CGPoint(x: 2.59, y: 1.76))
                fill1.addCurve(to: CGPoint(x: 8.16, y: 0), controlPoint1: CGPoint(x: 5.05, y: 0.35), controlPoint2: CGPoint(x: 6.5, y: 0))
                fill1.addCurve(to: CGPoint(x: 13.37, y: 1.17), controlPoint1: CGPoint(x: 9.98, y: 0), controlPoint2: CGPoint(x: 11.72, y: 0.39))
                fill1.addLine(to: CGPoint(x: 11.98, y: 4.72))
                fill1.addCurve(to: CGPoint(x: 10.12, y: 3.99), controlPoint1: CGPoint(x: 11.36, y: 4.43), controlPoint2: CGPoint(x: 10.74, y: 4.18))
                fill1.addCurve(to: CGPoint(x: 8.11, y: 3.69), controlPoint1: CGPoint(x: 9.5, y: 3.79), controlPoint2: CGPoint(x: 8.83, y: 3.69))
                context.saveGState()
                context.translateBy(x: -0, y: 0.38)
                fill1.usesEvenOddFillRule = true
                UIColor.white.setFill()
                fill1.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Fill 4
            let fill4 = UIBezierPath()
            fill4.move(to: CGPoint(x: 4.5, y: 16.25))
            fill4.addLine(to: CGPoint(x: 0, y: 16.25))
            fill4.addLine(to: CGPoint.zero)
            fill4.addLine(to: CGPoint(x: 10, y: 0))
            fill4.addLine(to: CGPoint(x: 10, y: 3.52))
            fill4.addLine(to: CGPoint(x: 4.5, y: 3.52))
            fill4.addLine(to: CGPoint(x: 4.5, y: 6.62))
            fill4.addLine(to: CGPoint(x: 9.57, y: 6.62))
            fill4.addLine(to: CGPoint(x: 9.57, y: 10.15))
            fill4.addLine(to: CGPoint(x: 4.5, y: 10.15))
            fill4.addLine(to: CGPoint(x: 4.5, y: 16.25))
            fill4.close()
            context.saveGState()
            context.translateBy(x: 15, y: 1.25)
            fill4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill4.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnsearchselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 29), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 29), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 29)
        
        /// search
        do {
            context.saveGState()
            context.translateBy(x: 14.59, y: 14.68)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -7.5, y: -12)
            
            /// Path 6
            let path6 = UIBezierPath()
            path6.move(to: CGPoint(x: 0.68, y: 0))
            path6.addLine(to: CGPoint(x: 0.68, y: 7.47))
            context.saveGState()
            context.translateBy(x: 6.99, y: 15.68)
            path6.lineJoinStyle = .round
            path6.lineCapStyle = .round
            path6.lineWidth = 3
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            path6.stroke()
            context.restoreGState()
            
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 14.32, height: 14.32))
            context.saveGState()
            context.translateBy(x: 0.34, y: 0)
            oval.lineWidth = 2
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            oval.stroke()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnprofiledeselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 20)
        
        /// Group
        do {
            context.saveGState()
            
            /// body
            let body = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 15, height: 10))
            context.saveGState()
            context.translateBy(x: 0, y: 9.38)
            context.saveGState()
            body.lineWidth = 4
            context.beginPath()
            context.addPath(body.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setStroke()
            body.stroke()
            context.restoreGState()
            context.restoreGState()
            
            
            /// head
            let head = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 10, height: 10))
            context.saveGState()
            context.translateBy(x: 2.5, y: 0)
            head.lineWidth = 2
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setStroke()
            head.stroke()
            context.restoreGState()
            
            
            /// head (Outline Mask)
            context.saveGState()
            head.apply(CGAffineTransform(translationX: 2.5, y: 0))
            head.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End head (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnprofileselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 20)
        
        /// Group
        do {
            context.saveGState()
            
            /// body
            let body = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 16, height: 10.67))
            context.saveGState()
            context.translateBy(x: 0, y: 10)
            context.saveGState()
            body.lineWidth = 4
            context.beginPath()
            context.addPath(body.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            body.stroke()
            context.restoreGState()
            context.restoreGState()
            
            
            /// head
            let head = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 10.67, height: 10.67))
            context.saveGState()
            context.translateBy(x: 2.67, y: -0)
            head.lineWidth = 2
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            head.stroke()
            context.restoreGState()
            
            
            /// head (Outline Mask)
            context.saveGState()
            head.apply(CGAffineTransform(translationX: 2.67, y: -0))
            head.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End head (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnfilter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 39), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 39), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 39)
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint(x: 6, y: 0))
        rectangle.addLine(to: CGPoint(x: 41.39, y: 0))
        rectangle.addLine(to: CGPoint(x: 41.39, y: 38.66))
        rectangle.addLine(to: CGPoint(x: 6, y: 38.66))
        rectangle.addCurve(to: CGPoint(x: 0, y: 32.66), controlPoint1: CGPoint(x: 2.69, y: 38.66), controlPoint2: CGPoint(x: 0, y: 35.97))
        rectangle.addLine(to: CGPoint(x: 0, y: 6))
        rectangle.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 6, y: -0)
        context.saveGState()
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.addRect(rectangle.bounds.insetBy(dx: -4, dy: -4))
        context.clip(using: .evenOdd)
        context.translateBy(x: -46.39, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 46.39, y: 0)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.5).cgColor)
        }
        UIColor.black.setFill()
        rectangle.fill()
        context.restoreGState()
        UIColor.white.setFill()
        rectangle.fill()
        context.restoreGState()
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 10)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 17, y: 0))
            clip2.addLine(to: CGPoint(x: 17, y: 21))
            clip2.addLine(to: CGPoint(x: 0, y: 21))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 0.59, y: 0))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0))
            fill1.addCurve(to: CGPoint(x: 16.92, y: 0.88), controlPoint1: CGPoint(x: 16.86, y: 0), controlPoint2: CGPoint(x: 17.15, y: 0.49))
            fill1.addLine(to: CGPoint(x: 10.5, y: 11.79))
            fill1.addLine(to: CGPoint(x: 10.5, y: 19.1))
            fill1.addCurve(to: CGPoint(x: 10.26, y: 19.49), controlPoint1: CGPoint(x: 10.5, y: 19.27), controlPoint2: CGPoint(x: 10.41, y: 19.42))
            fill1.addLine(to: CGPoint(x: 7.5, y: 20.95))
            fill1.addCurve(to: CGPoint(x: 6.84, y: 20.56), controlPoint1: CGPoint(x: 7.2, y: 21.1), controlPoint2: CGPoint(x: 6.84, y: 20.89))
            fill1.addLine(to: CGPoint(x: 6.84, y: 11.85))
            fill1.addLine(to: CGPoint(x: 0.09, y: 0.89))
            fill1.addCurve(to: CGPoint(x: 0.59, y: 0), controlPoint1: CGPoint(x: -0.15, y: 0.5), controlPoint2: CGPoint(x: 0.13, y: 0))
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnsearchdeselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 29), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 29), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 29)
        
        /// search
        do {
            context.saveGState()
            context.translateBy(x: 14.59, y: 14.68)
            context.rotate(by: 315 * CGFloat.pi/180)
            context.translateBy(x: -7.5, y: -12)
            
            /// Path 6
            let path6 = UIBezierPath()
            path6.move(to: CGPoint(x: 0.68, y: 0))
            path6.addLine(to: CGPoint(x: 0.68, y: 7.47))
            context.saveGState()
            context.translateBy(x: 6.99, y: 15.68)
            path6.lineJoinStyle = .round
            path6.lineCapStyle = .round
            path6.lineWidth = 3
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setStroke()
            path6.stroke()
            context.restoreGState()
            
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 14.32, height: 14.32))
            context.saveGState()
            context.translateBy(x: 0.34, y: 0)
            oval.lineWidth = 2
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setStroke()
            oval.stroke()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcncalenderselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 22)
        
        /// Calender
        do {
            context.saveGState()
            
            /// Rectangle 7
            let rectangle7 = UIBezierPath()
            rectangle7.move(to: CGPoint(x: 2, y: 0))
            rectangle7.addLine(to: CGPoint(x: 6.45, y: 0))
            rectangle7.addLine(to: CGPoint(x: 20.52, y: 0))
            rectangle7.addLine(to: CGPoint(x: 23, y: 0))
            rectangle7.addCurve(to: CGPoint(x: 25, y: 2), controlPoint1: CGPoint(x: 24.1, y: 0), controlPoint2: CGPoint(x: 25, y: 0.9))
            rectangle7.addLine(to: CGPoint(x: 25, y: 15))
            rectangle7.addCurve(to: CGPoint(x: 20, y: 20), controlPoint1: CGPoint(x: 25, y: 17.76), controlPoint2: CGPoint(x: 22.76, y: 20))
            rectangle7.addLine(to: CGPoint(x: 5, y: 20))
            rectangle7.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 2.24, y: 20), controlPoint2: CGPoint(x: 0, y: 17.76))
            rectangle7.addLine(to: CGPoint(x: 0, y: 2))
            rectangle7.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle7.close()
            context.saveGState()
            context.translateBy(x: 0, y: 2)
            rectangle7.lineJoinStyle = .round
            rectangle7.lineCapStyle = .round
            context.saveGState()
            rectangle7.lineWidth = 4
            context.beginPath()
            context.addPath(rectangle7.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            rectangle7.stroke()
            context.restoreGState()
            context.restoreGState()
            
            
            /// 1
            let _1 = NSMutableAttributedString(string: "1")
            _1.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: _1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
            }
            _1.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: _1.length))
            context.saveGState()
            _1.draw(in: CGRect(x: 9, y: 3, width: 7, height: 20))
            context.restoreGState()
            
            
            /// Rectangle Copy 3
            let rectangleCopy3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 6), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 20.1, y: 3.03)
            context.rotate(by: 358 * CGFloat.pi/180)
            context.translateBy(x: -1, y: -3)
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangleCopy3.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 4
            let rectangleCopy4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 6), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 5.1, y: 3.03)
            context.rotate(by: 358 * CGFloat.pi/180)
            context.translateBy(x: -1, y: -3)
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangleCopy4.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 5
            let rectangleCopy5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 6), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 13.1, y: 3.03)
            context.rotate(by: 358 * CGFloat.pi/180)
            context.translateBy(x: -1, y: -3)
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangleCopy5.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcncalenderdeselectednotification(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 22)
        
        /// Calender
        do {
            context.saveGState()
            
            /// Rectangle 7
            let rectangle7 = UIBezierPath()
            rectangle7.move(to: CGPoint(x: 2, y: 0))
            rectangle7.addLine(to: CGPoint(x: 6.45, y: 0))
            rectangle7.addLine(to: CGPoint(x: 23, y: 0))
            rectangle7.addCurve(to: CGPoint(x: 25, y: 2), controlPoint1: CGPoint(x: 24.1, y: 0), controlPoint2: CGPoint(x: 25, y: 0.9))
            rectangle7.addLine(to: CGPoint(x: 25, y: 15))
            rectangle7.addCurve(to: CGPoint(x: 20, y: 20), controlPoint1: CGPoint(x: 25, y: 17.76), controlPoint2: CGPoint(x: 22.76, y: 20))
            rectangle7.addLine(to: CGPoint(x: 5, y: 20))
            rectangle7.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 2.24, y: 20), controlPoint2: CGPoint(x: 0, y: 17.76))
            rectangle7.addLine(to: CGPoint(x: 0, y: 2))
            rectangle7.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle7.close()
            context.saveGState()
            context.translateBy(x: 0, y: 2)
            rectangle7.lineJoinStyle = .round
            rectangle7.lineCapStyle = .round
            context.saveGState()
            rectangle7.lineWidth = 4
            context.beginPath()
            context.addPath(rectangle7.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setStroke()
            rectangle7.stroke()
            context.restoreGState()
            context.restoreGState()
            
            
            /// 1
            let _1 = NSMutableAttributedString(string: "1")
            _1.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: _1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
            }
            _1.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _1.length))
            context.saveGState()
            _1.draw(in: CGRect(x: 9, y: 3, width: 7, height: 20))
            context.restoreGState()
            
            
            /// Rectangle Copy 3
            let rectangleCopy3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 6), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 20.1, y: 3.03)
            context.rotate(by: 358 * CGFloat.pi/180)
            context.translateBy(x: -1, y: -3)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangleCopy3.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 4
            let rectangleCopy4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 6), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 5.1, y: 3.03)
            context.rotate(by: 358 * CGFloat.pi/180)
            context.translateBy(x: -1, y: -3)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangleCopy4.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 5
            let rectangleCopy5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 6), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 13.1, y: 3.03)
            context.rotate(by: 358 * CGFloat.pi/180)
            context.translateBy(x: -1, y: -3)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangleCopy5.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Oval 2
        let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 13, height: 13))
        context.saveGState()
        context.translateBy(x: 15, y: -2)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        oval2.fill()
        context.restoreGState()
        
        /// 3
        let _3 = NSMutableAttributedString(string: "3")
        _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 9)!, range: NSRange(location: 0, length: _3.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _3.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _3.length))
        }
        _3.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _3.length))
        context.saveGState()
        _3.draw(in: CGRect(x: 19, y: -2, width: 5, height: 15))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcncalenderdeselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 22)
        
        /// Calender
        do {
            context.saveGState()
            context.translateBy(x: 0, y: -1)
            
            /// Rectangle 7
            let rectangle7 = UIBezierPath()
            rectangle7.move(to: CGPoint(x: 2, y: 0))
            rectangle7.addLine(to: CGPoint(x: 6.45, y: 0))
            rectangle7.addLine(to: CGPoint(x: 23, y: 0))
            rectangle7.addCurve(to: CGPoint(x: 25, y: 2), controlPoint1: CGPoint(x: 24.1, y: 0), controlPoint2: CGPoint(x: 25, y: 0.9))
            rectangle7.addLine(to: CGPoint(x: 25, y: 15))
            rectangle7.addCurve(to: CGPoint(x: 20, y: 20), controlPoint1: CGPoint(x: 25, y: 17.76), controlPoint2: CGPoint(x: 22.76, y: 20))
            rectangle7.addLine(to: CGPoint(x: 5, y: 20))
            rectangle7.addCurve(to: CGPoint(x: 0, y: 15), controlPoint1: CGPoint(x: 2.24, y: 20), controlPoint2: CGPoint(x: 0, y: 17.76))
            rectangle7.addLine(to: CGPoint(x: 0, y: 2))
            rectangle7.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle7.close()
            context.saveGState()
            context.translateBy(x: 0, y: 3)
            rectangle7.lineJoinStyle = .round
            rectangle7.lineCapStyle = .round
            context.saveGState()
            rectangle7.lineWidth = 4
            context.beginPath()
            context.addPath(rectangle7.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setStroke()
            rectangle7.stroke()
            context.restoreGState()
            context.restoreGState()
            
            
            /// 1
            let _1 = NSMutableAttributedString(string: "1")
            _1.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: _1.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
            }
            _1.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _1.length))
            context.saveGState()
            _1.draw(in: CGRect(x: 9, y: 4, width: 7, height: 20))
            context.restoreGState()
            
            
            /// Rectangle Copy 3
            let rectangleCopy3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 6), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 20, y: 4)
            context.rotate(by: 358 * CGFloat.pi/180)
            context.translateBy(x: -1, y: -3)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangleCopy3.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 4
            let rectangleCopy4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 6), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 5, y: 4)
            context.rotate(by: 358 * CGFloat.pi/180)
            context.translateBy(x: -1, y: -3)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangleCopy4.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 5
            let rectangleCopy5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 6), cornerRadius: 2)
            context.saveGState()
            context.translateBy(x: 13, y: 4)
            context.rotate(by: 358 * CGFloat.pi/180)
            context.translateBy(x: -1, y: -3)
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangleCopy5.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawMenuHolder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 40)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 40))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCalendermonth(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 336, height: 290), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 336, height: 290), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 336, y: resizedFrame.height / 290)
        
        /// calender/day
        // Warning: New symbols are not supported.
        
        /// calender/day copy
        // Warning: New symbols are not supported.
        
        /// calender/day copy 2
        // Warning: New symbols are not supported.
        
        /// calender/day copy 3
        // Warning: New symbols are not supported.
        
        /// calender/day copy 4
        // Warning: New symbols are not supported.
        
        /// calender/day copy 5
        // Warning: New symbols are not supported.
        
        /// calender/day copy 6
        // Warning: New symbols are not supported.
        
        /// JULY
        let jULY = NSMutableAttributedString(string: "JULY")
        jULY.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: jULY.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            jULY.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: jULY.length))
        }
        jULY.addAttribute(.foregroundColor, value: UIColor(white: 0.519, alpha: 1), range: NSRange(location: 0, length: jULY.length))
        context.saveGState()
        jULY.draw(at: CGPoint(x: 151, y: 2))
        context.restoreGState()
        
        /// Mon
        let mon = NSMutableAttributedString(string: "Mon")
        mon.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: mon.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            mon.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: mon.length))
        }
        mon.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: mon.length))
        context.saveGState()
        mon.draw(at: CGPoint(x: 13, y: 27))
        context.restoreGState()
        
        /// Tue
        let tue = NSMutableAttributedString(string: "Tue")
        tue.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: tue.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            tue.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tue.length))
        }
        tue.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: tue.length))
        context.saveGState()
        tue.draw(at: CGPoint(x: 64, y: 27))
        context.restoreGState()
        
        /// Wed
        let wed = NSMutableAttributedString(string: "Wed")
        wed.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: wed.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            wed.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: wed.length))
        }
        wed.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: wed.length))
        context.saveGState()
        wed.draw(at: CGPoint(x: 109, y: 27))
        context.restoreGState()
        
        /// Thu
        let thu = NSMutableAttributedString(string: "Thu")
        thu.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: thu.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            thu.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: thu.length))
        }
        thu.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: thu.length))
        context.saveGState()
        thu.draw(at: CGPoint(x: 159, y: 27))
        context.restoreGState()
        
        /// Fri
        let fri = NSMutableAttributedString(string: "Fri")
        fri.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: fri.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            fri.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: fri.length))
        }
        fri.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: fri.length))
        context.saveGState()
        fri.draw(at: CGPoint(x: 210, y: 27))
        context.restoreGState()
        
        /// Sat
        let sat = NSMutableAttributedString(string: "Sat")
        sat.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: sat.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            sat.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sat.length))
        }
        sat.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: sat.length))
        context.saveGState()
        sat.draw(at: CGPoint(x: 256, y: 27))
        context.restoreGState()
        
        /// Sun
        let sun = NSMutableAttributedString(string: "Sun")
        sun.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: sun.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            sun.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sun.length))
        }
        sun.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: sun.length))
        context.saveGState()
        sun.draw(at: CGPoint(x: 303, y: 27))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCalenderdaybooked(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        
        /// Rectangle 6
        let rectangle6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
        rectangle6.fill()
        context.restoreGState()
        
        /// 01
        let _01 = NSMutableAttributedString(string: "01")
        _01.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _01.length))
        _01.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _01.length))
        context.saveGState()
        _01.draw(at: CGPoint(x: 2, y: 1))
        context.restoreGState()
        
        /// Rectangle 2
        let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        rectangle2.lineWidth = 0.5
        UIColor(white: 0.709, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        
        /// 3
        let _3 = NSMutableAttributedString(string: "3")
        _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: _3.length))
        _3.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _3.length))
        context.saveGState()
        _3.draw(at: CGPoint(x: 5, y: 15))
        context.restoreGState()
        
        /// BOOKINGS
        let bOOKINGS = NSMutableAttributedString(string: "BOOKINGS")
        bOOKINGS.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 6)!, range: NSRange(location: 0, length: bOOKINGS.length))
        bOOKINGS.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: bOOKINGS.length))
        context.saveGState()
        bOOKINGS.draw(at: CGPoint(x: 5, y: 35))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCalenderdaybookableCopy(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        
        /// Rectangle 6
        let rectangle6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        UIColor(hue: 1, saturation: 0.548, brightness: 1, alpha: 1).setFill()
        rectangle6.fill()
        context.restoreGState()
        
        /// 01
        let _01 = NSMutableAttributedString(string: "01")
        _01.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _01.length))
        _01.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _01.length))
        context.saveGState()
        _01.draw(at: CGPoint(x: 2, y: 1))
        context.restoreGState()
        
        /// Rectangle 2
        let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        rectangle2.lineWidth = 0.5
        UIColor(white: 0.709, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        
        /// NOT AVAILABLE
        let nOTAVAILABLE = NSMutableAttributedString(string: "NOT\nAVAILABLE")
        nOTAVAILABLE.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 6)!, range: NSRange(location: 0, length: nOTAVAILABLE.length))
        nOTAVAILABLE.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: nOTAVAILABLE.length))
        context.saveGState()
        nOTAVAILABLE.draw(at: CGPoint(x: 3, y: 28))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCalenderdaybookable(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        
        /// Rectangle 6
        let rectangle6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        rectangle6.fill()
        context.restoreGState()
        
        /// 01
        let _01 = NSMutableAttributedString(string: "01")
        _01.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _01.length))
        _01.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _01.length))
        context.saveGState()
        _01.draw(at: CGPoint(x: 2, y: 1))
        context.restoreGState()
        
        /// Rectangle 2
        let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        rectangle2.lineWidth = 0.5
        UIColor(white: 0.709, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        
        /// AVAILABLE
        let aVAILABLE = NSMutableAttributedString(string: "AVAILABLE")
        aVAILABLE.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 6)!, range: NSRange(location: 0, length: aVAILABLE.length))
        aVAILABLE.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: aVAILABLE.length))
        context.saveGState()
        aVAILABLE.draw(at: CGPoint(x: 3, y: 35))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCalenderday(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        
        /// 01
        let _01 = NSMutableAttributedString(string: "01")
        _01.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _01.length))
        _01.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: _01.length))
        context.saveGState()
        _01.draw(at: CGPoint(x: 2, y: 1))
        context.restoreGState()
        
        /// +
        let layer = NSMutableAttributedString(string: "+")
        layer.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 15)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(at: CGPoint(x: 20, y: 14))
        context.restoreGState()
        
        /// Rectangle 2
        let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        rectangle2.lineWidth = 0.5
        UIColor(white: 0.709, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcnsocialmediafacebook(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 15)
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 4, y: 0)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 7, y: 0))
            clip2.addLine(to: CGPoint(x: 7, y: 15))
            clip2.addLine(to: CGPoint(x: 0, y: 15))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 1.55, y: 11.23))
            fill1.addCurve(to: CGPoint(x: 1.55, y: 7.71), controlPoint1: CGPoint(x: 1.55, y: 10.06), controlPoint2: CGPoint(x: 1.54, y: 8.89))
            fill1.addCurve(to: CGPoint(x: 1.3, y: 7.46), controlPoint1: CGPoint(x: 1.55, y: 7.51), controlPoint2: CGPoint(x: 1.5, y: 7.45))
            fill1.addCurve(to: CGPoint(x: 0.2, y: 7.47), controlPoint1: CGPoint(x: 0.93, y: 7.47), controlPoint2: CGPoint(x: 0.57, y: 7.46))
            fill1.addCurve(to: CGPoint(x: 0, y: 7.27), controlPoint1: CGPoint(x: 0.05, y: 7.47), controlPoint2: CGPoint(x: -0, y: 7.43))
            fill1.addCurve(to: CGPoint(x: 0, y: 5.07), controlPoint1: CGPoint(x: 0.01, y: 6.54), controlPoint2: CGPoint(x: 0.01, y: 5.81))
            fill1.addCurve(to: CGPoint(x: 0.18, y: 4.89), controlPoint1: CGPoint(x: -0, y: 4.93), controlPoint2: CGPoint(x: 0.04, y: 4.89))
            fill1.addCurve(to: CGPoint(x: 1.31, y: 4.9), controlPoint1: CGPoint(x: 0.56, y: 4.9), controlPoint2: CGPoint(x: 0.93, y: 4.88))
            fill1.addCurve(to: CGPoint(x: 1.56, y: 4.63), controlPoint1: CGPoint(x: 1.52, y: 4.91), controlPoint2: CGPoint(x: 1.57, y: 4.83))
            fill1.addCurve(to: CGPoint(x: 1.56, y: 2.96), controlPoint1: CGPoint(x: 1.55, y: 4.07), controlPoint2: CGPoint(x: 1.55, y: 3.51))
            fill1.addCurve(to: CGPoint(x: 2.17, y: 1.09), controlPoint1: CGPoint(x: 1.58, y: 2.28), controlPoint2: CGPoint(x: 1.76, y: 1.64))
            fill1.addCurve(to: CGPoint(x: 4.25, y: 0.03), controlPoint1: CGPoint(x: 2.68, y: 0.38), controlPoint2: CGPoint(x: 3.41, y: 0.06))
            fill1.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 5.11, y: -0.01), controlPoint2: CGPoint(x: 5.98, y: 0.01))
            fill1.addCurve(to: CGPoint(x: 7, y: 0.16), controlPoint1: CGPoint(x: 6.96, y: -0), controlPoint2: CGPoint(x: 7, y: 0.04))
            fill1.addCurve(to: CGPoint(x: 7, y: 2.38), controlPoint1: CGPoint(x: 7, y: 0.9), controlPoint2: CGPoint(x: 6.99, y: 1.64))
            fill1.addCurve(to: CGPoint(x: 6.83, y: 2.55), controlPoint1: CGPoint(x: 7, y: 2.51), controlPoint2: CGPoint(x: 6.96, y: 2.55))
            fill1.addCurve(to: CGPoint(x: 5.58, y: 2.55), controlPoint1: CGPoint(x: 6.41, y: 2.55), controlPoint2: CGPoint(x: 6, y: 2.55))
            fill1.addCurve(to: CGPoint(x: 4.66, y: 3.39), controlPoint1: CGPoint(x: 5.03, y: 2.55), controlPoint2: CGPoint(x: 4.7, y: 2.84))
            fill1.addCurve(to: CGPoint(x: 4.64, y: 4.71), controlPoint1: CGPoint(x: 4.63, y: 3.83), controlPoint2: CGPoint(x: 4.65, y: 4.27))
            fill1.addCurve(to: CGPoint(x: 4.84, y: 4.86), controlPoint1: CGPoint(x: 4.64, y: 4.87), controlPoint2: CGPoint(x: 4.73, y: 4.86))
            fill1.addCurve(to: CGPoint(x: 6.73, y: 4.85), controlPoint1: CGPoint(x: 5.47, y: 4.85), controlPoint2: CGPoint(x: 6.1, y: 4.86))
            fill1.addCurve(to: CGPoint(x: 6.96, y: 5.09), controlPoint1: CGPoint(x: 6.92, y: 4.85), controlPoint2: CGPoint(x: 6.98, y: 4.89))
            fill1.addCurve(to: CGPoint(x: 6.75, y: 7.3), controlPoint1: CGPoint(x: 6.88, y: 5.82), controlPoint2: CGPoint(x: 6.81, y: 6.56))
            fill1.addCurve(to: CGPoint(x: 6.51, y: 7.49), controlPoint1: CGPoint(x: 6.73, y: 7.46), controlPoint2: CGPoint(x: 6.66, y: 7.5))
            fill1.addCurve(to: CGPoint(x: 5.01, y: 7.49), controlPoint1: CGPoint(x: 6.01, y: 7.49), controlPoint2: CGPoint(x: 5.51, y: 7.49))
            fill1.addCurve(to: CGPoint(x: 4.69, y: 7.81), controlPoint1: CGPoint(x: 4.65, y: 7.49), controlPoint2: CGPoint(x: 4.69, y: 7.44))
            fill1.addCurve(to: CGPoint(x: 4.69, y: 14.7), controlPoint1: CGPoint(x: 4.69, y: 10.1), controlPoint2: CGPoint(x: 4.68, y: 12.4))
            fill1.addCurve(to: CGPoint(x: 4.39, y: 15), controlPoint1: CGPoint(x: 4.69, y: 14.94), controlPoint2: CGPoint(x: 4.63, y: 15))
            fill1.addCurve(to: CGPoint(x: 1.82, y: 15), controlPoint1: CGPoint(x: 3.54, y: 14.98), controlPoint2: CGPoint(x: 2.68, y: 14.98))
            fill1.addCurve(to: CGPoint(x: 1.54, y: 14.71), controlPoint1: CGPoint(x: 1.58, y: 15), controlPoint2: CGPoint(x: 1.54, y: 14.92))
            fill1.addCurve(to: CGPoint(x: 1.55, y: 11.23), controlPoint1: CGPoint(x: 1.55, y: 13.55), controlPoint2: CGPoint(x: 1.55, y: 12.39))
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnsocialmediatwitter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 15)
        
        /// Page 1
        do {
            context.saveGState()
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 18.08, y: 0))
            clip2.addLine(to: CGPoint(x: 18.08, y: 14.88))
            clip2.addLine(to: CGPoint(x: 0, y: 14.88))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            context.restoreGState()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.apply(CGAffineTransform(translationX: -0, y: 0))
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 16.29, y: 3.67))
            fill1.addCurve(to: CGPoint(x: 0, y: 13.32), controlPoint1: CGPoint(x: 17.01, y: 9.54), controlPoint2: CGPoint(x: 10.14, y: 18.53))
            fill1.addCurve(to: CGPoint(x: 5.38, y: 11.61), controlPoint1: CGPoint(x: 0, y: 13.32), controlPoint2: CGPoint(x: 3.22, y: 13.63))
            fill1.addCurve(to: CGPoint(x: 1.83, y: 9), controlPoint1: CGPoint(x: 2.75, y: 11.7), controlPoint2: CGPoint(x: 1.83, y: 9))
            fill1.addCurve(to: CGPoint(x: 3.65, y: 8.84), controlPoint1: CGPoint(x: 1.83, y: 9), controlPoint2: CGPoint(x: 3.02, y: 9.55))
            fill1.addCurve(to: CGPoint(x: 0.67, y: 5.35), controlPoint1: CGPoint(x: 0.68, y: 8.06), controlPoint2: CGPoint(x: 0.67, y: 5.35))
            fill1.addCurve(to: CGPoint(x: 2.17, y: 5.71), controlPoint1: CGPoint(x: 0.67, y: 5.35), controlPoint2: CGPoint(x: 1.42, y: 5.79))
            fill1.addCurve(to: CGPoint(x: 1.15, y: 0.7), controlPoint1: CGPoint(x: -0.47, y: 3.39), controlPoint2: CGPoint(x: 1.15, y: 0.7))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 4.35), controlPoint1: CGPoint(x: 3.75, y: 3.92), controlPoint2: CGPoint(x: 6.42, y: 4.57))
            fill1.addCurve(to: CGPoint(x: 8.87, y: 3.68), controlPoint1: CGPoint(x: 8.89, y: 4.14), controlPoint2: CGPoint(x: 8.87, y: 3.91))
            fill1.addCurve(to: CGPoint(x: 12.55, y: 0), controlPoint1: CGPoint(x: 8.87, y: 1.65), controlPoint2: CGPoint(x: 10.52, y: 0))
            fill1.addCurve(to: CGPoint(x: 15.18, y: 1.1), controlPoint1: CGPoint(x: 13.58, y: 0), controlPoint2: CGPoint(x: 14.51, y: 0.42))
            fill1.addCurve(to: CGPoint(x: 17.57, y: 0.27), controlPoint1: CGPoint(x: 15.8, y: 1.1), controlPoint2: CGPoint(x: 16.77, y: 0.96))
            fill1.addCurve(to: CGPoint(x: 16.23, y: 2.27), controlPoint1: CGPoint(x: 17.57, y: 0.27), controlPoint2: CGPoint(x: 17.42, y: 1.73))
            fill1.addCurve(to: CGPoint(x: 16, y: 2.39), controlPoint1: CGPoint(x: 16.13, y: 2.31), controlPoint2: CGPoint(x: 16.06, y: 2.35))
            fill1.addCurve(to: CGPoint(x: 16.04, y: 2.51), controlPoint1: CGPoint(x: 15.81, y: 2.49), controlPoint2: CGPoint(x: 15.86, y: 2.53))
            fill1.addCurve(to: CGPoint(x: 18.08, y: 1.74), controlPoint1: CGPoint(x: 16.44, y: 2.47), controlPoint2: CGPoint(x: 17.48, y: 2.15))
            fill1.addCurve(to: CGPoint(x: 16.29, y: 3.67), controlPoint1: CGPoint(x: 17.84, y: 2.44), controlPoint2: CGPoint(x: 17.44, y: 3.19))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnsocialmediainstagram(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 15)
        
        /// Page 1
        do {
            context.saveGState()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 3.73, y: 6.14))
            fill1.addCurve(to: CGPoint(x: 1.31, y: 3.73), controlPoint1: CGPoint(x: 2.39, y: 6.14), controlPoint2: CGPoint(x: 1.31, y: 5.06))
            fill1.addCurve(to: CGPoint(x: 3.73, y: 1.31), controlPoint1: CGPoint(x: 1.31, y: 2.39), controlPoint2: CGPoint(x: 2.39, y: 1.31))
            fill1.addCurve(to: CGPoint(x: 6.14, y: 3.73), controlPoint1: CGPoint(x: 5.06, y: 1.31), controlPoint2: CGPoint(x: 6.14, y: 2.39))
            fill1.addCurve(to: CGPoint(x: 3.73, y: 6.14), controlPoint1: CGPoint(x: 6.14, y: 5.06), controlPoint2: CGPoint(x: 5.06, y: 6.14))
            fill1.move(to: CGPoint(x: 3.73, y: 0))
            fill1.addCurve(to: CGPoint(x: 0, y: 3.73), controlPoint1: CGPoint(x: 1.67, y: 0), controlPoint2: CGPoint(x: 0, y: 1.67))
            fill1.addCurve(to: CGPoint(x: 3.73, y: 7.45), controlPoint1: CGPoint(x: 0, y: 5.78), controlPoint2: CGPoint(x: 1.67, y: 7.45))
            fill1.addCurve(to: CGPoint(x: 7.45, y: 3.73), controlPoint1: CGPoint(x: 5.78, y: 7.45), controlPoint2: CGPoint(x: 7.45, y: 5.78))
            fill1.addCurve(to: CGPoint(x: 3.73, y: 0), controlPoint1: CGPoint(x: 7.45, y: 1.67), controlPoint2: CGPoint(x: 5.78, y: 0))
            context.saveGState()
            context.translateBy(x: 3.53, y: 3.82)
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            /// Fill 3
            let fill3 = UIBezierPath()
            fill3.move(to: CGPoint(x: 0.87, y: 0))
            fill3.addCurve(to: CGPoint(x: 0, y: 0.87), controlPoint1: CGPoint(x: 0.39, y: 0), controlPoint2: CGPoint(x: 0, y: 0.39))
            fill3.addCurve(to: CGPoint(x: 0.87, y: 1.74), controlPoint1: CGPoint(x: 0, y: 1.35), controlPoint2: CGPoint(x: 0.39, y: 1.74))
            fill3.addCurve(to: CGPoint(x: 1.74, y: 0.87), controlPoint1: CGPoint(x: 1.35, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.35))
            fill3.addCurve(to: CGPoint(x: 0.87, y: 0), controlPoint1: CGPoint(x: 1.74, y: 0.39), controlPoint2: CGPoint(x: 1.35, y: 0))
            context.saveGState()
            context.translateBy(x: 10.26, y: 2.81)
            fill3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill3.fill()
            context.restoreGState()
            
            
            /// Group 7
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 0.1)
                
                /// Clip 6
                let clip6 = UIBezierPath()
                clip6.move(to: CGPoint.zero)
                clip6.addLine(to: CGPoint(x: 14.51, y: 0))
                clip6.addLine(to: CGPoint(x: 14.51, y: 14.51))
                clip6.addLine(to: CGPoint(x: 0, y: 14.51))
                clip6.addLine(to: CGPoint.zero)
                clip6.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.2)
                context.restoreGState()
                
                
                /// Clip 6 (Outline Mask)
                context.saveGState()
                clip6.apply(CGAffineTransform(translationX: 0, y: 0.2))
                clip6.addClip()
                
                /// Fill 5
                let fill5 = UIBezierPath()
                fill5.move(to: CGPoint(x: 13.16, y: 10.19))
                fill5.addCurve(to: CGPoint(x: 12.91, y: 11.53), controlPoint1: CGPoint(x: 13.13, y: 10.89), controlPoint2: CGPoint(x: 13.01, y: 11.28))
                fill5.addCurve(to: CGPoint(x: 12.37, y: 12.37), controlPoint1: CGPoint(x: 12.78, y: 11.87), controlPoint2: CGPoint(x: 12.62, y: 12.11))
                fill5.addCurve(to: CGPoint(x: 11.53, y: 12.91), controlPoint1: CGPoint(x: 12.11, y: 12.62), controlPoint2: CGPoint(x: 11.87, y: 12.78))
                fill5.addCurve(to: CGPoint(x: 10.19, y: 13.16), controlPoint1: CGPoint(x: 11.28, y: 13.01), controlPoint2: CGPoint(x: 10.89, y: 13.13))
                fill5.addCurve(to: CGPoint(x: 7.25, y: 13.2), controlPoint1: CGPoint(x: 9.42, y: 13.19), controlPoint2: CGPoint(x: 9.19, y: 13.2))
                fill5.addCurve(to: CGPoint(x: 4.32, y: 13.16), controlPoint1: CGPoint(x: 5.32, y: 13.2), controlPoint2: CGPoint(x: 5.09, y: 13.19))
                fill5.addCurve(to: CGPoint(x: 2.98, y: 12.91), controlPoint1: CGPoint(x: 3.62, y: 13.13), controlPoint2: CGPoint(x: 3.23, y: 13.01))
                fill5.addCurve(to: CGPoint(x: 2.14, y: 12.37), controlPoint1: CGPoint(x: 2.64, y: 12.78), controlPoint2: CGPoint(x: 2.4, y: 12.62))
                fill5.addCurve(to: CGPoint(x: 1.6, y: 11.53), controlPoint1: CGPoint(x: 1.89, y: 12.11), controlPoint2: CGPoint(x: 1.73, y: 11.87))
                fill5.addCurve(to: CGPoint(x: 1.35, y: 10.19), controlPoint1: CGPoint(x: 1.5, y: 11.28), controlPoint2: CGPoint(x: 1.38, y: 10.89))
                fill5.addCurve(to: CGPoint(x: 1.31, y: 7.25), controlPoint1: CGPoint(x: 1.31, y: 9.42), controlPoint2: CGPoint(x: 1.31, y: 9.19))
                fill5.addCurve(to: CGPoint(x: 1.35, y: 4.32), controlPoint1: CGPoint(x: 1.31, y: 5.32), controlPoint2: CGPoint(x: 1.31, y: 5.09))
                fill5.addCurve(to: CGPoint(x: 1.6, y: 2.98), controlPoint1: CGPoint(x: 1.38, y: 3.62), controlPoint2: CGPoint(x: 1.5, y: 3.23))
                fill5.addCurve(to: CGPoint(x: 2.14, y: 2.14), controlPoint1: CGPoint(x: 1.73, y: 2.64), controlPoint2: CGPoint(x: 1.89, y: 2.4))
                fill5.addCurve(to: CGPoint(x: 2.98, y: 1.6), controlPoint1: CGPoint(x: 2.4, y: 1.89), controlPoint2: CGPoint(x: 2.64, y: 1.73))
                fill5.addCurve(to: CGPoint(x: 4.32, y: 1.35), controlPoint1: CGPoint(x: 3.23, y: 1.5), controlPoint2: CGPoint(x: 3.62, y: 1.38))
                fill5.addCurve(to: CGPoint(x: 7.25, y: 1.31), controlPoint1: CGPoint(x: 5.09, y: 1.31), controlPoint2: CGPoint(x: 5.32, y: 1.31))
                fill5.addCurve(to: CGPoint(x: 10.19, y: 1.35), controlPoint1: CGPoint(x: 9.19, y: 1.31), controlPoint2: CGPoint(x: 9.42, y: 1.31))
                fill5.addCurve(to: CGPoint(x: 11.53, y: 1.6), controlPoint1: CGPoint(x: 10.89, y: 1.38), controlPoint2: CGPoint(x: 11.28, y: 1.5))
                fill5.addCurve(to: CGPoint(x: 12.37, y: 2.14), controlPoint1: CGPoint(x: 11.87, y: 1.73), controlPoint2: CGPoint(x: 12.11, y: 1.89))
                fill5.addCurve(to: CGPoint(x: 12.91, y: 2.98), controlPoint1: CGPoint(x: 12.62, y: 2.4), controlPoint2: CGPoint(x: 12.78, y: 2.64))
                fill5.addCurve(to: CGPoint(x: 13.16, y: 4.32), controlPoint1: CGPoint(x: 13.01, y: 3.23), controlPoint2: CGPoint(x: 13.13, y: 3.62))
                fill5.addCurve(to: CGPoint(x: 13.2, y: 7.25), controlPoint1: CGPoint(x: 13.19, y: 5.09), controlPoint2: CGPoint(x: 13.2, y: 5.32))
                fill5.addCurve(to: CGPoint(x: 13.16, y: 10.19), controlPoint1: CGPoint(x: 13.2, y: 9.19), controlPoint2: CGPoint(x: 13.19, y: 9.42))
                fill5.move(to: CGPoint(x: 14.46, y: 4.26))
                fill5.addCurve(to: CGPoint(x: 14.13, y: 2.5), controlPoint1: CGPoint(x: 14.43, y: 3.49), controlPoint2: CGPoint(x: 14.31, y: 2.96))
                fill5.addCurve(to: CGPoint(x: 13.29, y: 1.22), controlPoint1: CGPoint(x: 13.94, y: 2.03), controlPoint2: CGPoint(x: 13.69, y: 1.62))
                fill5.addCurve(to: CGPoint(x: 12.01, y: 0.38), controlPoint1: CGPoint(x: 12.89, y: 0.81), controlPoint2: CGPoint(x: 12.48, y: 0.57))
                fill5.addCurve(to: CGPoint(x: 10.25, y: 0.04), controlPoint1: CGPoint(x: 11.54, y: 0.2), controlPoint2: CGPoint(x: 11.02, y: 0.08))
                fill5.addCurve(to: CGPoint(x: 7.25, y: 0), controlPoint1: CGPoint(x: 9.47, y: 0.01), controlPoint2: CGPoint(x: 9.22, y: 0))
                fill5.addCurve(to: CGPoint(x: 4.26, y: 0.04), controlPoint1: CGPoint(x: 5.28, y: 0), controlPoint2: CGPoint(x: 5.04, y: 0.01))
                fill5.addCurve(to: CGPoint(x: 2.5, y: 0.38), controlPoint1: CGPoint(x: 3.49, y: 0.08), controlPoint2: CGPoint(x: 2.96, y: 0.2))
                fill5.addCurve(to: CGPoint(x: 1.22, y: 1.22), controlPoint1: CGPoint(x: 2.03, y: 0.57), controlPoint2: CGPoint(x: 1.62, y: 0.81))
                fill5.addCurve(to: CGPoint(x: 0.38, y: 2.5), controlPoint1: CGPoint(x: 0.81, y: 1.62), controlPoint2: CGPoint(x: 0.57, y: 2.03))
                fill5.addCurve(to: CGPoint(x: 0.04, y: 4.26), controlPoint1: CGPoint(x: 0.2, y: 2.96), controlPoint2: CGPoint(x: 0.08, y: 3.49))
                fill5.addCurve(to: CGPoint(x: 0, y: 7.25), controlPoint1: CGPoint(x: 0.01, y: 5.04), controlPoint2: CGPoint(x: 0, y: 5.28))
                fill5.addCurve(to: CGPoint(x: 0.04, y: 10.24), controlPoint1: CGPoint(x: 0, y: 9.22), controlPoint2: CGPoint(x: 0.01, y: 9.47))
                fill5.addCurve(to: CGPoint(x: 0.38, y: 12.01), controlPoint1: CGPoint(x: 0.08, y: 11.02), controlPoint2: CGPoint(x: 0.2, y: 11.54))
                fill5.addCurve(to: CGPoint(x: 1.22, y: 13.29), controlPoint1: CGPoint(x: 0.57, y: 12.48), controlPoint2: CGPoint(x: 0.81, y: 12.89))
                fill5.addCurve(to: CGPoint(x: 2.5, y: 14.13), controlPoint1: CGPoint(x: 1.62, y: 13.69), controlPoint2: CGPoint(x: 2.03, y: 13.94))
                fill5.addCurve(to: CGPoint(x: 4.26, y: 14.46), controlPoint1: CGPoint(x: 2.96, y: 14.31), controlPoint2: CGPoint(x: 3.49, y: 14.43))
                fill5.addCurve(to: CGPoint(x: 7.25, y: 14.51), controlPoint1: CGPoint(x: 5.04, y: 14.5), controlPoint2: CGPoint(x: 5.28, y: 14.51))
                fill5.addCurve(to: CGPoint(x: 10.25, y: 14.46), controlPoint1: CGPoint(x: 9.22, y: 14.51), controlPoint2: CGPoint(x: 9.47, y: 14.5))
                fill5.addCurve(to: CGPoint(x: 12.01, y: 14.13), controlPoint1: CGPoint(x: 11.02, y: 14.43), controlPoint2: CGPoint(x: 11.54, y: 14.31))
                fill5.addCurve(to: CGPoint(x: 13.29, y: 13.29), controlPoint1: CGPoint(x: 12.48, y: 13.94), controlPoint2: CGPoint(x: 12.89, y: 13.69))
                fill5.addCurve(to: CGPoint(x: 14.13, y: 12.01), controlPoint1: CGPoint(x: 13.69, y: 12.89), controlPoint2: CGPoint(x: 13.94, y: 12.48))
                fill5.addCurve(to: CGPoint(x: 14.46, y: 10.24), controlPoint1: CGPoint(x: 14.31, y: 11.54), controlPoint2: CGPoint(x: 14.43, y: 11.02))
                fill5.addCurve(to: CGPoint(x: 14.51, y: 7.25), controlPoint1: CGPoint(x: 14.5, y: 9.47), controlPoint2: CGPoint(x: 14.51, y: 9.22))
                fill5.addCurve(to: CGPoint(x: 14.46, y: 4.26), controlPoint1: CGPoint(x: 14.51, y: 5.28), controlPoint2: CGPoint(x: 14.5, y: 5.04))
                context.saveGState()
                context.translateBy(x: 0, y: 0.2)
                fill5.usesEvenOddFillRule = true
                UIColor.white.setFill()
                fill5.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 6 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnbasefighting(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 15)
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 9, y: 7.5)
            context.rotate(by: 450 * CGFloat.pi/180)
            context.translateBy(x: -7.5, y: -9)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 15, y: 0))
            clip2.addLine(to: CGPoint(x: 15, y: 18))
            clip2.addLine(to: CGPoint(x: 0, y: 18))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 8.83, y: 0))
            fill1.addCurve(to: CGPoint(x: 2.86, y: 4), controlPoint1: CGPoint(x: 8.83, y: 0), controlPoint2: CGPoint(x: 2.67, y: 0.14))
            fill1.addCurve(to: CGPoint(x: 3.57, y: 10.06), controlPoint1: CGPoint(x: 3.05, y: 7.87), controlPoint2: CGPoint(x: 3.57, y: 10.06))
            fill1.addCurve(to: CGPoint(x: 2.25, y: 5.78), controlPoint1: CGPoint(x: 3.57, y: 10.06), controlPoint2: CGPoint(x: 2.37, y: 9.01))
            fill1.addCurve(to: CGPoint(x: 0.1, y: 8.64), controlPoint1: CGPoint(x: 2.25, y: 5.78), controlPoint2: CGPoint(x: -0.55, y: 5.94))
            fill1.addCurve(to: CGPoint(x: 4.75, y: 14.24), controlPoint1: CGPoint(x: 0.74, y: 11.35), controlPoint2: CGPoint(x: 2.63, y: 13.74))
            fill1.addCurve(to: CGPoint(x: 5.28, y: 17.31), controlPoint1: CGPoint(x: 4.75, y: 14.24), controlPoint2: CGPoint(x: 5, y: 16.99))
            fill1.addCurve(to: CGPoint(x: 9.21, y: 17.99), controlPoint1: CGPoint(x: 5.56, y: 17.62), controlPoint2: CGPoint(x: 7.4, y: 17.97))
            fill1.addCurve(to: CGPoint(x: 12.36, y: 17.81), controlPoint1: CGPoint(x: 11.15, y: 18.02), controlPoint2: CGPoint(x: 11.91, y: 17.93))
            fill1.addCurve(to: CGPoint(x: 13.26, y: 16.71), controlPoint1: CGPoint(x: 12.91, y: 17.65), controlPoint2: CGPoint(x: 13.2, y: 16.99))
            fill1.addCurve(to: CGPoint(x: 13.64, y: 14.27), controlPoint1: CGPoint(x: 13.33, y: 16.43), controlPoint2: CGPoint(x: 13.64, y: 14.27))
            fill1.addCurve(to: CGPoint(x: 7.37, y: 14.62), controlPoint1: CGPoint(x: 13.64, y: 14.27), controlPoint2: CGPoint(x: 9.74, y: 15.4))
            fill1.addCurve(to: CGPoint(x: 13.8, y: 12.62), controlPoint1: CGPoint(x: 7.37, y: 14.62), controlPoint2: CGPoint(x: 12.83, y: 14.49))
            fill1.addCurve(to: CGPoint(x: 14.95, y: 3.64), controlPoint1: CGPoint(x: 13.8, y: 12.62), controlPoint2: CGPoint(x: 15.29, y: 7.96))
            fill1.addCurve(to: CGPoint(x: 8.83, y: 0), controlPoint1: CGPoint(x: 14.71, y: -0.15), controlPoint2: CGPoint(x: 8.83, y: 0))
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnbaseyoga(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 27, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 27, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 27, y: resizedFrame.height / 17)
        
        /// Group
        do {
            context.saveGState()
            
            /// Oval 3
            let oval3 = UIBezierPath()
            oval3.move(to: CGPoint(x: 3.5, y: 15))
            oval3.addCurve(to: CGPoint(x: 7, y: 7.5), controlPoint1: CGPoint(x: 5.43, y: 15), controlPoint2: CGPoint(x: 7, y: 11.64))
            oval3.addCurve(to: CGPoint(x: 3.5, y: 0), controlPoint1: CGPoint(x: 7, y: 3.36), controlPoint2: CGPoint(x: 3.5, y: 0))
            oval3.addCurve(to: CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 3.5, y: 0), controlPoint2: CGPoint(x: 0, y: 3.36))
            oval3.addCurve(to: CGPoint(x: 3.5, y: 15), controlPoint1: CGPoint(x: 0, y: 11.64), controlPoint2: CGPoint(x: 1.57, y: 15))
            oval3.close()
            context.saveGState()
            context.translateBy(x: 10, y: 0)
            oval3.usesEvenOddFillRule = true
            UIColor(hue: 1, saturation: 0.021, brightness: 0.659, alpha: 1).setFill()
            oval3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 2
            let oval3Copy2 = UIBezierPath()
            oval3Copy2.move(to: CGPoint(x: 1.27, y: 13.86))
            oval3Copy2.addCurve(to: CGPoint(x: 1.55, y: 5.55), controlPoint1: CGPoint(x: -0.53, y: 13.1), controlPoint2: CGPoint(x: -0.4, y: 9.37))
            oval3Copy2.addCurve(to: CGPoint(x: 8.34, y: 0), controlPoint1: CGPoint(x: 3.51, y: 1.72), controlPoint2: CGPoint(x: 8.34, y: 0))
            oval3Copy2.addCurve(to: CGPoint(x: 8.05, y: 8.32), controlPoint1: CGPoint(x: 8.34, y: 0), controlPoint2: CGPoint(x: 10, y: 4.49))
            oval3Copy2.addCurve(to: CGPoint(x: 1.27, y: 13.86), controlPoint1: CGPoint(x: 6.1, y: 12.14), controlPoint2: CGPoint(x: 3.06, y: 14.63))
            oval3Copy2.close()
            context.saveGState()
            context.translateBy(x: 13, y: 3)
            oval3Copy2.usesEvenOddFillRule = true
            UIColor(hue: 1, saturation: 0.011, brightness: 0.81, alpha: 1).setFill()
            oval3Copy2.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 5
            let oval3Copy5 = UIBezierPath()
            oval3Copy5.move(to: CGPoint(x: 7.73, y: 13.86))
            oval3Copy5.addCurve(to: CGPoint(x: 0.95, y: 8.32), controlPoint1: CGPoint(x: 5.94, y: 14.63), controlPoint2: CGPoint(x: 2.9, y: 12.14))
            oval3Copy5.addCurve(to: CGPoint(x: 0.66, y: 0), controlPoint1: CGPoint(x: -1, y: 4.49), controlPoint2: CGPoint(x: 0.66, y: 0))
            oval3Copy5.addCurve(to: CGPoint(x: 7.45, y: 5.55), controlPoint1: CGPoint(x: 0.66, y: 0), controlPoint2: CGPoint(x: 5.49, y: 1.72))
            oval3Copy5.addCurve(to: CGPoint(x: 7.73, y: 13.86), controlPoint1: CGPoint(x: 9.4, y: 9.37), controlPoint2: CGPoint(x: 9.53, y: 13.1))
            oval3Copy5.close()
            context.saveGState()
            context.translateBy(x: 5, y: 3)
            oval3Copy5.usesEvenOddFillRule = true
            UIColor(hue: 1, saturation: 0.011, brightness: 0.81, alpha: 1).setFill()
            oval3Copy5.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 3
            let oval3Copy3 = UIBezierPath()
            oval3Copy3.move(to: CGPoint(x: 0.3, y: 9.21))
            oval3Copy3.addCurve(to: CGPoint(x: 5.1, y: 1.87), controlPoint1: CGPoint(x: -0.83, y: 7.67), controlPoint2: CGPoint(x: 1.31, y: 4.39))
            oval3Copy3.addCurve(to: CGPoint(x: 14, y: 0.1), controlPoint1: CGPoint(x: 8.88, y: -0.64), controlPoint2: CGPoint(x: 14, y: 0.1))
            oval3Copy3.addCurve(to: CGPoint(x: 9.21, y: 7.45), controlPoint1: CGPoint(x: 14, y: 0.1), controlPoint2: CGPoint(x: 12.99, y: 4.93))
            oval3Copy3.addCurve(to: CGPoint(x: 0.3, y: 9.21), controlPoint1: CGPoint(x: 5.42, y: 9.96), controlPoint2: CGPoint(x: 1.44, y: 10.75))
            oval3Copy3.close()
            context.saveGState()
            context.translateBy(x: 13, y: 7)
            oval3Copy3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            oval3Copy3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 4
            let oval3Copy4 = UIBezierPath()
            oval3Copy4.move(to: CGPoint(x: 13.7, y: 9.21))
            oval3Copy4.addCurve(to: CGPoint(x: 4.79, y: 7.45), controlPoint1: CGPoint(x: 12.56, y: 10.75), controlPoint2: CGPoint(x: 8.58, y: 9.96))
            oval3Copy4.addCurve(to: CGPoint(x: 0, y: 0.1), controlPoint1: CGPoint(x: 1.01, y: 4.93), controlPoint2: CGPoint(x: 0, y: 0.1))
            oval3Copy4.addCurve(to: CGPoint(x: 8.9, y: 1.87), controlPoint1: CGPoint(x: 0, y: 0.1), controlPoint2: CGPoint(x: 5.12, y: -0.64))
            oval3Copy4.addCurve(to: CGPoint(x: 13.7, y: 9.21), controlPoint1: CGPoint(x: 12.69, y: 4.39), controlPoint2: CGPoint(x: 14.83, y: 7.67))
            oval3Copy4.close()
            context.saveGState()
            context.translateBy(x: 0, y: 7)
            oval3Copy4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            oval3Copy4.fill()
            context.restoreGState()
            
            
            /// Path 2
            let path2 = UIBezierPath()
            path2.move(to: CGPoint(x: 0, y: 1.29))
            path2.addLine(to: CGPoint(x: 4.76, y: 1.29))
            path2.addLine(to: CGPoint(x: 4.76, y: 0))
            path2.addLine(to: CGPoint(x: 0.45, y: 0))
            path2.addLine(to: CGPoint(x: 0, y: 1.29))
            path2.close()
            context.saveGState()
            context.translateBy(x: 11.27, y: 15.7)
            path2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            path2.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnbasegym(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 14)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 1, y: 0)
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 27, height: 2))
            context.saveGState()
            context.translateBy(x: 0, y: 6)
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 14))
            context.saveGState()
            context.translateBy(x: 6, y: 0)
            UIColor.white.setFill()
            rectangle.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 3
            let rectangleCopy3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 14))
            context.saveGState()
            context.translateBy(x: 19, y: 0)
            UIColor.white.setFill()
            rectangleCopy3.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 12))
            context.saveGState()
            context.translateBy(x: 4, y: 1)
            UIColor.white.setFill()
            rectangleCopy.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 4
            let rectangleCopy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 12))
            context.saveGState()
            context.translateBy(x: 21, y: 1)
            UIColor.white.setFill()
            rectangleCopy4.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 2
            let rectangleCopy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 10))
            context.saveGState()
            context.translateBy(x: 2, y: 2)
            UIColor.white.setFill()
            rectangleCopy2.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 5
            let rectangleCopy5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 10))
            context.saveGState()
            context.translateBy(x: 23, y: 2)
            UIColor.white.setFill()
            rectangleCopy5.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnbasecrossfit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 28)
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 5)
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 13.37, y: 0))
                clip2.addLine(to: CGPoint(x: 13.37, y: 17.12))
                clip2.addLine(to: CGPoint(x: 0, y: 17.12))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.38)
                context.restoreGState()
                
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.apply(CGAffineTransform(translationX: 0, y: 0.38))
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 8.11, y: 3.69))
                fill1.addCurve(to: CGPoint(x: 5.58, y: 5.01), controlPoint1: CGPoint(x: 7.03, y: 3.69), controlPoint2: CGPoint(x: 6.19, y: 4.13))
                fill1.addCurve(to: CGPoint(x: 4.67, y: 8.64), controlPoint1: CGPoint(x: 4.98, y: 5.88), controlPoint2: CGPoint(x: 4.67, y: 7.09))
                fill1.addCurve(to: CGPoint(x: 8.37, y: 13.44), controlPoint1: CGPoint(x: 4.67, y: 11.84), controlPoint2: CGPoint(x: 5.9, y: 13.44))
                fill1.addCurve(to: CGPoint(x: 10.53, y: 13.13), controlPoint1: CGPoint(x: 9.11, y: 13.44), controlPoint2: CGPoint(x: 9.83, y: 13.34))
                fill1.addCurve(to: CGPoint(x: 12.64, y: 12.4), controlPoint1: CGPoint(x: 11.23, y: 12.93), controlPoint2: CGPoint(x: 11.93, y: 12.68))
                fill1.addLine(to: CGPoint(x: 12.64, y: 16.2))
                fill1.addCurve(to: CGPoint(x: 7.87, y: 17.12), controlPoint1: CGPoint(x: 11.23, y: 16.82), controlPoint2: CGPoint(x: 9.64, y: 17.12))
                fill1.addCurve(to: CGPoint(x: 2.03, y: 14.94), controlPoint1: CGPoint(x: 5.33, y: 17.12), controlPoint2: CGPoint(x: 3.39, y: 16.39))
                fill1.addCurve(to: CGPoint(x: 0, y: 8.61), controlPoint1: CGPoint(x: 0.68, y: 13.48), controlPoint2: CGPoint(x: 0, y: 11.37))
                fill1.addCurve(to: CGPoint(x: 0.98, y: 4.07), controlPoint1: CGPoint(x: 0, y: 6.89), controlPoint2: CGPoint(x: 0.33, y: 5.37))
                fill1.addCurve(to: CGPoint(x: 3.82, y: 1.05), controlPoint1: CGPoint(x: 1.64, y: 2.76), controlPoint2: CGPoint(x: 2.59, y: 1.76))
                fill1.addCurve(to: CGPoint(x: 8.16, y: 0), controlPoint1: CGPoint(x: 5.05, y: 0.35), controlPoint2: CGPoint(x: 6.5, y: 0))
                fill1.addCurve(to: CGPoint(x: 13.37, y: 1.17), controlPoint1: CGPoint(x: 9.98, y: 0), controlPoint2: CGPoint(x: 11.72, y: 0.39))
                fill1.addLine(to: CGPoint(x: 11.98, y: 4.72))
                fill1.addCurve(to: CGPoint(x: 10.12, y: 3.99), controlPoint1: CGPoint(x: 11.36, y: 4.43), controlPoint2: CGPoint(x: 10.74, y: 4.18))
                fill1.addCurve(to: CGPoint(x: 8.11, y: 3.69), controlPoint1: CGPoint(x: 9.5, y: 3.79), controlPoint2: CGPoint(x: 8.83, y: 3.69))
                context.saveGState()
                context.translateBy(x: -0, y: 0.38)
                fill1.usesEvenOddFillRule = true
                UIColor.white.setFill()
                fill1.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Fill 4
            let fill4 = UIBezierPath()
            fill4.move(to: CGPoint(x: 4.5, y: 16.25))
            fill4.addLine(to: CGPoint(x: 0, y: 16.25))
            fill4.addLine(to: CGPoint.zero)
            fill4.addLine(to: CGPoint(x: 10, y: 0))
            fill4.addLine(to: CGPoint(x: 10, y: 3.52))
            fill4.addLine(to: CGPoint(x: 4.5, y: 3.52))
            fill4.addLine(to: CGPoint(x: 4.5, y: 6.62))
            fill4.addLine(to: CGPoint(x: 9.57, y: 6.62))
            fill4.addLine(to: CGPoint(x: 9.57, y: 10.15))
            fill4.addLine(to: CGPoint(x: 4.5, y: 10.15))
            fill4.addLine(to: CGPoint(x: 4.5, y: 16.25))
            fill4.close()
            context.saveGState()
            context.translateBy(x: 15, y: 1.25)
            fill4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill4.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnbaserunning(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 20)
        
        /// Page 1
        do {
            context.saveGState()
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 20))
            clip2.addLine(to: CGPoint(x: 0, y: 20))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.66))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 19.16), controlPoint1: CGPoint(x: 8.09, y: 19.64), controlPoint2: CGPoint(x: 8.55, y: 19.46))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.51))
            fill1.addCurve(to: CGPoint(x: 21.81, y: 7.23), controlPoint1: CGPoint(x: 22.05, y: 8.2), controlPoint2: CGPoint(x: 22.11, y: 7.62))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.64), controlPoint1: CGPoint(x: 16.02, y: -0.23), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.13))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.91), controlPoint1: CGPoint(x: 14.82, y: 3.44), controlPoint2: CGPoint(x: 14.67, y: 3.72))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.37), controlPoint1: CGPoint(x: 12.74, y: 5.3), controlPoint2: CGPoint(x: 12.46, y: 5.39))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.22))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.78), controlPoint1: CGPoint(x: 9.43, y: 5.19), controlPoint2: CGPoint(x: 9.06, y: 5.42))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.63))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.36))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.49), controlPoint1: CGPoint(x: 1.35, y: 17.39), controlPoint2: CGPoint(x: 1.31, y: 17.44))
            fill1.addLine(to: CGPoint(x: 0.13, y: 19.01))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 20), controlPoint1: CGPoint(x: -0.18, y: 19.43), controlPoint2: CGPoint(x: 0.12, y: 20.02))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.66))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnburgermenuclose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 10)
        
        /// Rectangle 3
        let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 10), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 8.24, y: 5.24)
        context.rotate(by: 405 * CGFloat.pi/180)
        context.translateBy(x: -1, y: -5)
        UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
        rectangle3.fill()
        context.restoreGState()
        
        /// Rectangle 3
        let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 10), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 8.24, y: 5.24)
        context.rotate(by: 315 * CGFloat.pi/180)
        context.translateBy(x: -1, y: -5)
        UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
        rectangle10.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcnburgermenuopen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 10)
        
        /// burgermenu
        do {
            context.saveGState()
            
            /// Path 4
            let path4 = UIBezierPath()
            path4.move(to: CGPoint(x: 0, y: 1))
            path4.addLine(to: CGPoint(x: 15, y: 1))
            context.saveGState()
            path4.lineJoinStyle = .round
            path4.lineCapStyle = .round
            path4.lineWidth = 2
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            path4.stroke()
            context.restoreGState()
            
            
            /// Path 4 Copy
            let path4Copy = UIBezierPath()
            path4Copy.move(to: CGPoint(x: 0, y: 1))
            path4Copy.addLine(to: CGPoint(x: 15, y: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 4)
            path4Copy.lineJoinStyle = .round
            path4Copy.lineCapStyle = .round
            path4Copy.lineWidth = 2
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            path4Copy.stroke()
            context.restoreGState()
            
            
            /// Path 4 Copy 2
            let path4Copy2 = UIBezierPath()
            path4Copy2.move(to: CGPoint(x: 0, y: 1))
            path4Copy2.addLine(to: CGPoint(x: 15, y: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 8)
            path4Copy2.lineJoinStyle = .round
            path4Copy2.lineCapStyle = .round
            path4Copy2.lineWidth = 2
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setStroke()
            path4Copy2.stroke()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawBox_latestsessions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 282, height: 398), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 282, height: 398), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 282, y: resizedFrame.height / 398)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 282, height: 398))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.saveGState()
        UIRectClip(background.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
            background.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -282, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 282, y: -1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                background.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4
        let rectangle4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 115)
        UIColor.white.setFill()
        rectangle4.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy
        let rectangle4Copy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 145)
        UIColor.white.setFill()
        rectangle4Copy.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 4
        let rectangle4Copy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 182)
        UIColor.white.setFill()
        rectangle4Copy4.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 7
        let rectangle4Copy7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 222)
        UIColor.white.setFill()
        rectangle4Copy7.fill()
        context.restoreGState()
        
        /// Rectangle 4
        let rectangle10 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 149, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 115)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle10.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 2
        let rectangle4Copy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 105, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 145)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle4Copy2.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 5
        let rectangle4Copy5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 56, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 182)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle4Copy5.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 6
        let rectangle4Copy6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 182)
        context.saveGState()
        UIRectClip(rectangle4Copy6.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.5)
        context.beginTransparencyLayer(in: rectangle4Copy6.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.747, alpha: 1).setFill()
            rectangle4Copy6.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: rectangle4Copy6.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -267, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 267, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                rectangle4Copy6.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4 Copy 8
        let rectangle4Copy8 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 228, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 222)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle4Copy8.fill()
        context.restoreGState()
        
        /// Cardio
        let cardio = NSMutableAttributedString(string: "Cardio")
        cardio.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cardio.length))
        cardio.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: cardio.length))
        context.saveGState()
        cardio.draw(at: CGPoint(x: 8, y: 98))
        context.restoreGState()
        
        /// Strength
        let strength = NSMutableAttributedString(string: "Strength")
        strength.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: strength.length))
        strength.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: strength.length))
        context.saveGState()
        strength.draw(at: CGPoint(x: 8, y: 128))
        context.restoreGState()
        
        /// Mobility
        let mobility = NSMutableAttributedString(string: "Mobility")
        mobility.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: mobility.length))
        mobility.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: mobility.length))
        context.saveGState()
        mobility.draw(at: CGPoint(x: 8, y: 165))
        context.restoreGState()
        
        /// Intensity
        let intensity = NSMutableAttributedString(string: "Intensity")
        intensity.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: intensity.length))
        intensity.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: intensity.length))
        context.saveGState()
        intensity.draw(at: CGPoint(x: 8, y: 205))
        context.restoreGState()
        
        /// Rectangle 4
        let rectangle11 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 115)
        context.saveGState()
        UIRectClip(rectangle11.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.5)
        context.beginTransparencyLayer(in: rectangle11.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.747, alpha: 1).setFill()
            rectangle11.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: rectangle11.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -267, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 267, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                rectangle11.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4 Copy 3
        let rectangle4Copy3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 145)
        context.saveGState()
        UIRectClip(rectangle4Copy3.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.5)
        context.beginTransparencyLayer(in: rectangle4Copy3.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.747, alpha: 1).setFill()
            rectangle4Copy3.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: rectangle4Copy3.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -267, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 267, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                rectangle4Copy3.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4 Copy 9
        let rectangle4Copy9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 222)
        context.saveGState()
        UIRectClip(rectangle4Copy9.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.5)
        context.beginTransparencyLayer(in: rectangle4Copy9.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.747, alpha: 1).setFill()
            rectangle4Copy9.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: rectangle4Copy9.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -267, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 267, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                rectangle4Copy9.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// An high intensity se
        let anHighIntensitySe = NSMutableAttributedString(string: "An high intensity session mainly based on cardio\nJohn did a great job, needs motivation to push through when it gets tuff, I know he can do it, and so does he. Just make him push through :) ")
        anHighIntensitySe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: anHighIntensitySe.length))
        anHighIntensitySe.addAttribute(.foregroundColor, value: UIColor(white: 0.429, alpha: 1), range: NSRange(location: 0, length: anHighIntensitySe.length))
        context.saveGState()
        anHighIntensitySe.draw(in: CGRect(x: 10, y: 245, width: 265, height: 113))
        context.restoreGState()
        
        /// Latest Session
        let latestSession = NSMutableAttributedString(string: "Latest Session")
        latestSession.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: latestSession.length))
        latestSession.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: latestSession.length))
        context.saveGState()
        latestSession.draw(at: CGPoint(x: 8, y: 24))
        context.restoreGState()
        
        /// 2018-09-13
        let _20180913 = NSMutableAttributedString(string: "2018-09-13")
        _20180913.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _20180913.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            _20180913.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _20180913.length))
        }
        _20180913.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _20180913.length))
        context.saveGState()
        _20180913.draw(at: CGPoint(x: 214, y: 26))
        context.restoreGState()
        
        /// Recommend this train
        let recommendThisTrain = NSMutableAttributedString(string: "Recommend this trainer")
        recommendThisTrain.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: recommendThisTrain.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            paragraphStyle.maximumLineHeight = 11
            paragraphStyle.minimumLineHeight = 11
            recommendThisTrain.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: recommendThisTrain.length))
        }
        recommendThisTrain.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: recommendThisTrain.length))
        context.saveGState()
        recommendThisTrain.draw(in: CGRect(x: 70, y: 372, width: 136, height: 13))
        context.restoreGState()
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 117, y: 326)
            
            /// Oval 4
            let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 37, height: 37))
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setFill()
            oval4.fill()
            context.restoreGState()
            
            
            /// Group 5
            do {
                context.saveGState()
                context.translateBy(x: 9, y: 8)
                
                /// Stroke 3
                let stroke3 = UIBezierPath()
                stroke3.move(to: CGPoint(x: 6.92, y: 6.86))
                stroke3.addLine(to: CGPoint(x: 13.59, y: 6.86))
                stroke3.addCurve(to: CGPoint(x: 15.13, y: 8.46), controlPoint1: CGPoint(x: 14.44, y: 6.86), controlPoint2: CGPoint(x: 15.13, y: 7.58))
                stroke3.addCurve(to: CGPoint(x: 13.59, y: 10.07), controlPoint1: CGPoint(x: 15.13, y: 9.35), controlPoint2: CGPoint(x: 14.44, y: 10.07))
                stroke3.addLine(to: CGPoint(x: 12.12, y: 10.07))
                stroke3.addLine(to: CGPoint(x: 14.26, y: 10.07))
                stroke3.addCurve(to: CGPoint(x: 15.93, y: 11.68), controlPoint1: CGPoint(x: 15.18, y: 10.07), controlPoint2: CGPoint(x: 15.93, y: 10.79))
                stroke3.addCurve(to: CGPoint(x: 14.26, y: 13.28), controlPoint1: CGPoint(x: 15.93, y: 12.57), controlPoint2: CGPoint(x: 15.18, y: 13.28))
                stroke3.addLine(to: CGPoint(x: 12.08, y: 13.28))
                stroke3.addLine(to: CGPoint(x: 13.8, y: 13.28))
                stroke3.addCurve(to: CGPoint(x: 15.47, y: 14.91), controlPoint1: CGPoint(x: 14.72, y: 13.28), controlPoint2: CGPoint(x: 15.47, y: 14.01))
                stroke3.addCurve(to: CGPoint(x: 13.8, y: 16.53), controlPoint1: CGPoint(x: 15.47, y: 15.8), controlPoint2: CGPoint(x: 14.72, y: 16.53))
                stroke3.addLine(to: CGPoint(x: 12.3, y: 16.53))
                stroke3.addCurve(to: CGPoint(x: 13.96, y: 18.26), controlPoint1: CGPoint(x: 13.22, y: 16.53), controlPoint2: CGPoint(x: 13.96, y: 17.3))
                stroke3.addCurve(to: CGPoint(x: 12.3, y: 20), controlPoint1: CGPoint(x: 13.96, y: 19.22), controlPoint2: CGPoint(x: 13.22, y: 20))
                stroke3.addLine(to: CGPoint(x: 10.03, y: 20))
                stroke3.addLine(to: CGPoint(x: 5.62, y: 20))
                stroke3.addCurve(to: CGPoint(x: 4.03, y: 19.83), controlPoint1: CGPoint(x: 5.08, y: 20), controlPoint2: CGPoint(x: 4.55, y: 19.94))
                stroke3.addCurve(to: CGPoint(x: 0, y: 18.16), controlPoint1: CGPoint(x: 2.69, y: 19.54), controlPoint2: CGPoint(x: 0.22, y: 18.92))
                stroke3.addLine(to: CGPoint(x: 0, y: 6.75))
                stroke3.addCurve(to: CGPoint(x: 5.97, y: 3.12), controlPoint1: CGPoint(x: 0, y: 6.75), controlPoint2: CGPoint(x: 5.38, y: 4.37))
                stroke3.addCurve(to: CGPoint(x: 6.59, y: 1.27), controlPoint1: CGPoint(x: 6.19, y: 2.67), controlPoint2: CGPoint(x: 6.41, y: 1.98))
                stroke3.addCurve(to: CGPoint(x: 9.68, y: 0.96), controlPoint1: CGPoint(x: 7, y: -0.25), controlPoint2: CGPoint(x: 9.05, y: -0.47))
                stroke3.addCurve(to: CGPoint(x: 9.88, y: 3), controlPoint1: CGPoint(x: 9.93, y: 1.52), controlPoint2: CGPoint(x: 10.03, y: 2.19))
                stroke3.addCurve(to: CGPoint(x: 8.12, y: 6.86), controlPoint1: CGPoint(x: 9.28, y: 6.11), controlPoint2: CGPoint(x: 8.12, y: 6.86))
                context.saveGState()
                context.translateBy(x: 5.07, y: 0)
                stroke3.usesEvenOddFillRule = true
                UIColor.white.setFill()
                stroke3.fill()
                stroke3.lineJoinStyle = .round
                stroke3.lineCapStyle = .round
                stroke3.lineWidth = 1
                UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setStroke()
                stroke3.stroke()
                context.restoreGState()
                
                
                /// Stroke 1
                let stroke1 = UIBezierPath()
                stroke1.move(to: CGPoint(x: 4.05, y: 14.07))
                stroke1.addLine(to: CGPoint(x: 0, y: 14.07))
                stroke1.addLine(to: CGPoint.zero)
                stroke1.addLine(to: CGPoint(x: 4.05, y: 0))
                stroke1.addCurve(to: CGPoint(x: 5.79, y: 1.73), controlPoint1: CGPoint(x: 5.01, y: 0), controlPoint2: CGPoint(x: 5.79, y: 0.77))
                stroke1.addLine(to: CGPoint(x: 5.79, y: 12.35))
                stroke1.addCurve(to: CGPoint(x: 4.05, y: 14.07), controlPoint1: CGPoint(x: 5.79, y: 13.3), controlPoint2: CGPoint(x: 5.01, y: 14.07))
                stroke1.close()
                context.saveGState()
                context.translateBy(x: 0, y: 5.93)
                stroke1.usesEvenOddFillRule = true
                UIColor.white.setFill()
                stroke1.fill()
                stroke1.lineWidth = 1
                UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setStroke()
                stroke1.stroke()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawCellsSlider(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Cell
        let cell = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        cell.fill()
        context.restoreGState()
        
        /// Track
        let track = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343, height: 2), cornerRadius: 2)
        context.saveGState()
        context.translateBy(x: 16, y: 21)
        UIColor(white: 0.714, alpha: 1).setFill()
        track.fill()
        context.saveGState()
        track.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).cgColor,
                    UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).cgColor,
                    UIColor(hue: 0.6, saturation: 0.084, brightness: 0.702, alpha: 1).cgColor,
                    UIColor(hue: 0.6, saturation: 0.084, brightness: 0.702, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 0.48, 0.51, 1])!,
            start: CGPoint(x: 8.02, y: 1),
            end: CGPoint(x: 343, y: 1),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 20.25, height: 20.25))
        context.saveGState()
        context.translateBy(x: 171.38, y: 10.88)
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -13, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -44.25, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 44.25, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.2).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -12, dy: -13))
        context.clip(using: .evenOdd)
        context.translateBy(x: -43.25, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43.25, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.2).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -42.25, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 42.25, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.2).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(hue: 0.611, saturation: 0.038, brightness: 0.306, alpha: 0.2).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcn_circel_DEselected_bg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            oval4.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcn_circel_selected_bg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBox_booking_userimg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 73, height: 73), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 73, height: 73), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 73, y: resizedFrame.height / 73)
        
        /// IMG_2974-1024x1024
        do {
            context.saveGState()
            
            /// Mask
            let mask = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 73, height: 73))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(mask.cgPath)
            context.addRect(mask.bounds.insetBy(dx: -4, dy: -6))
            context.clip(using: .evenOdd)
            context.translateBy(x: -78, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 78, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            mask.fill()
            context.restoreGState()
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawBox_bookingMyBookingsTrainer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 316, height: 175), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 316, height: 175), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 316, y: resizedFrame.height / 175)
        
        /// box_booking_user-img
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: johnDoe.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            johnDoe.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: johnDoe.length))
        }
        johnDoe.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
        context.saveGState()
        johnDoe.draw(in: CGRect(x: 11, y: 99, width: 90, height: 20))
        context.restoreGState()
        
        /// icn_crossfit-circel
        // Warning: New symbols are not supported.
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 162, y: 140)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 154, height: 34), cornerRadius: 17)
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Message Client
            let messageClient = NSMutableAttributedString(string: "Message Client")
            messageClient.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: messageClient.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                messageClient.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: messageClient.length))
            }
            messageClient.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: messageClient.length))
            context.saveGState()
            messageClient.draw(in: CGRect(x: 27, y: 9, width: 100.49, height: 19))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group Copy
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 140)
            
            /// Rectangle 8
            let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 154, height: 34), cornerRadius: 17)
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangle10.fill()
            context.restoreGState()
            
            
            /// Cancel booking
            let cancelBooking = NSMutableAttributedString(string: "Cancel booking")
            cancelBooking.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cancelBooking.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                cancelBooking.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancelBooking.length))
            }
            cancelBooking.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: cancelBooking.length))
            context.saveGState()
            cancelBooking.draw(in: CGRect(x: 32, y: 9, width: 89.28, height: 19))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Let’s get some Cardi
        let letsGetSomeCardi = NSMutableAttributedString(string: "Let’s get some Cardio done!")
        letsGetSomeCardi.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: letsGetSomeCardi.length))
        letsGetSomeCardi.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: letsGetSomeCardi.length))
        context.saveGState()
        letsGetSomeCardi.draw(at: CGPoint(x: 134, y: 17))
        context.restoreGState()
        
        /// 13/9 10.00 am @frisk
        let _1391000AmFrisk = NSMutableAttributedString(string: "13/9 10.00 am\n@friskis och svettis Skanstull")
        _1391000AmFrisk.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _1391000AmFrisk.length))
        _1391000AmFrisk.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _1391000AmFrisk.length))
        context.saveGState()
        _1391000AmFrisk.draw(at: CGPoint(x: 134, y: 38))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBox_bookingMyBookingsClient(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 316, height: 175), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 316, height: 175), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 316, y: resizedFrame.height / 175)
        
        /// box_booking_user-img
        // Warning: New symbols are not supported.
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 162, y: 140)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 154, height: 34), cornerRadius: 17)
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Message Trainer
            let messageTrainer = NSMutableAttributedString(string: "Message Trainer")
            messageTrainer.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: messageTrainer.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                messageTrainer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: messageTrainer.length))
            }
            messageTrainer.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: messageTrainer.length))
            context.saveGState()
            messageTrainer.draw(in: CGRect(x: 27, y: 9, width: 100.49, height: 19))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group Copy
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 140)
            
            /// Rectangle 8
            let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 154, height: 34), cornerRadius: 17)
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangle10.fill()
            context.restoreGState()
            
            
            /// Cancel booking
            let cancelBooking = NSMutableAttributedString(string: "Cancel booking")
            cancelBooking.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cancelBooking.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                cancelBooking.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancelBooking.length))
            }
            cancelBooking.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: cancelBooking.length))
            context.saveGState()
            cancelBooking.draw(in: CGRect(x: 32, y: 9, width: 89.28, height: 19))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Pawel Krupa
        let pawelKrupa = NSMutableAttributedString(string: "Pawel Krupa")
        pawelKrupa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: pawelKrupa.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            pawelKrupa.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: pawelKrupa.length))
        }
        pawelKrupa.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: pawelKrupa.length))
        context.saveGState()
        pawelKrupa.draw(in: CGRect(x: -10, y: 99, width: 133, height: 20))
        context.restoreGState()
        
        /// icn_crossfit-circel
        // Warning: New symbols are not supported.
        
        /// Let’s get some Cardi
        let letsGetSomeCardi = NSMutableAttributedString(string: "Let’s get some Cardio done!")
        letsGetSomeCardi.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: letsGetSomeCardi.length))
        letsGetSomeCardi.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: letsGetSomeCardi.length))
        context.saveGState()
        letsGetSomeCardi.draw(at: CGPoint(x: 134, y: 17))
        context.restoreGState()
        
        /// 13/9 10.00 am @frisk
        let _1391000AmFrisk = NSMutableAttributedString(string: "13/9 10.00 am\n@friskis och svettis Skanstull")
        _1391000AmFrisk.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _1391000AmFrisk.length))
        _1391000AmFrisk.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _1391000AmFrisk.length))
        context.saveGState()
        _1391000AmFrisk.draw(at: CGPoint(x: 134, y: 38))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBox_bookingrequested(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 316, height: 175), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 316, height: 175), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 316, y: resizedFrame.height / 175)
        
        /// box_booking_user-img
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: johnDoe.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            johnDoe.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: johnDoe.length))
        }
        johnDoe.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
        context.saveGState()
        johnDoe.draw(in: CGRect(x: -10, y: 99, width: 133, height: 20))
        context.restoreGState()
        
        /// icn_crossfit-circel
        // Warning: New symbols are not supported.
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 162, y: 140)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 154, height: 34), cornerRadius: 17)
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Confirm booking
            let confirmBooking = NSMutableAttributedString(string: "Confirm booking")
            confirmBooking.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: confirmBooking.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                confirmBooking.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: confirmBooking.length))
            }
            confirmBooking.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: confirmBooking.length))
            context.saveGState()
            confirmBooking.draw(in: CGRect(x: 27, y: 9, width: 100.49, height: 19))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group Copy
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 140)
            
            /// Rectangle 8
            let rectangle10 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 154, height: 34), cornerRadius: 17)
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
            rectangle10.fill()
            context.restoreGState()
            
            
            /// Cancel booking
            let cancelBooking = NSMutableAttributedString(string: "Cancel booking")
            cancelBooking.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cancelBooking.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                cancelBooking.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancelBooking.length))
            }
            cancelBooking.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: cancelBooking.length))
            context.saveGState()
            cancelBooking.draw(in: CGRect(x: 32, y: 9, width: 89.28, height: 19))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Let’s get some Cardi
        let letsGetSomeCardi = NSMutableAttributedString(string: "Let’s get some Cardio done!")
        letsGetSomeCardi.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: letsGetSomeCardi.length))
        letsGetSomeCardi.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: letsGetSomeCardi.length))
        context.saveGState()
        letsGetSomeCardi.draw(at: CGPoint(x: 134, y: 57))
        context.restoreGState()
        
        /// 13/9 10.00 am @frisk
        let _1391000AmFrisk = NSMutableAttributedString(string: "13/9 10.00 am\n@friskis och svettis Skanstull")
        _1391000AmFrisk.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _1391000AmFrisk.length))
        _1391000AmFrisk.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _1391000AmFrisk.length))
        context.saveGState()
        _1391000AmFrisk.draw(at: CGPoint(x: 134, y: 81))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingfightingcircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        /// icn/base/fighting
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingyogacircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        /// icn/base/yoga
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcntraininggymcircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        /// icn/base/gym
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingcrossfitcircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        /// icn/base/crossfit
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingrunningcircelselected_blue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// icn_circel_bg
        do {
            context.saveGState()
            
            /// Oval 4
            let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
            context.saveGState()
            UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setFill()
            oval4.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 5)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 19.64))
            clip2.addLine(to: CGPoint(x: 0, y: 19.64))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.31))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 18.81), controlPoint1: CGPoint(x: 8.09, y: 19.29), controlPoint2: CGPoint(x: 8.55, y: 19.11))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.36))
            fill1.addCurve(to: CGPoint(x: 21.8, y: 7.1), controlPoint1: CGPoint(x: 22.05, y: 8.05), controlPoint2: CGPoint(x: 22.11, y: 7.49))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.63), controlPoint1: CGPoint(x: 16.02, y: -0.22), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.07))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.84), controlPoint1: CGPoint(x: 14.82, y: 3.38), controlPoint2: CGPoint(x: 14.67, y: 3.65))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.02))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.27), controlPoint1: CGPoint(x: 12.74, y: 5.2), controlPoint2: CGPoint(x: 12.45, y: 5.29))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.68), controlPoint1: CGPoint(x: 9.43, y: 5.1), controlPoint2: CGPoint(x: 9.06, y: 5.32))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.4))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.04))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.18), controlPoint1: CGPoint(x: 1.35, y: 17.08), controlPoint2: CGPoint(x: 1.31, y: 17.12))
            fill1.addLine(to: CGPoint(x: 0.13, y: 18.67))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 19.64), controlPoint1: CGPoint(x: -0.18, y: 19.08), controlPoint2: CGPoint(x: 0.12, y: 19.66))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.31))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingrunningcircelselected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// icn_circel_bg
        do {
            context.saveGState()
            
            /// Oval 4
            let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            oval4.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 5)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 19.64))
            clip2.addLine(to: CGPoint(x: 0, y: 19.64))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.31))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 18.81), controlPoint1: CGPoint(x: 8.09, y: 19.29), controlPoint2: CGPoint(x: 8.55, y: 19.11))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.36))
            fill1.addCurve(to: CGPoint(x: 21.8, y: 7.1), controlPoint1: CGPoint(x: 22.05, y: 8.05), controlPoint2: CGPoint(x: 22.11, y: 7.49))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.63), controlPoint1: CGPoint(x: 16.02, y: -0.22), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.07))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.84), controlPoint1: CGPoint(x: 14.82, y: 3.38), controlPoint2: CGPoint(x: 14.67, y: 3.65))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.02))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.27), controlPoint1: CGPoint(x: 12.74, y: 5.2), controlPoint2: CGPoint(x: 12.45, y: 5.29))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.68), controlPoint1: CGPoint(x: 9.43, y: 5.1), controlPoint2: CGPoint(x: 9.06, y: 5.32))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.4))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.04))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.18), controlPoint1: CGPoint(x: 1.35, y: 17.08), controlPoint2: CGPoint(x: 1.31, y: 17.12))
            fill1.addLine(to: CGPoint(x: 0.13, y: 18.67))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 19.64), controlPoint1: CGPoint(x: -0.18, y: 19.08), controlPoint2: CGPoint(x: 0.12, y: 19.66))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.31))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingrunningcircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// icn_circel_bg
        // Warning: New symbols are not supported.
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 5)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 19.64))
            clip2.addLine(to: CGPoint(x: 0, y: 19.64))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.31))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 18.81), controlPoint1: CGPoint(x: 8.09, y: 19.29), controlPoint2: CGPoint(x: 8.55, y: 19.11))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.36))
            fill1.addCurve(to: CGPoint(x: 21.8, y: 7.1), controlPoint1: CGPoint(x: 22.05, y: 8.05), controlPoint2: CGPoint(x: 22.11, y: 7.49))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.63), controlPoint1: CGPoint(x: 16.02, y: -0.22), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.07))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.84), controlPoint1: CGPoint(x: 14.82, y: 3.38), controlPoint2: CGPoint(x: 14.67, y: 3.65))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.02))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.27), controlPoint1: CGPoint(x: 12.74, y: 5.2), controlPoint2: CGPoint(x: 12.45, y: 5.29))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.68), controlPoint1: CGPoint(x: 9.43, y: 5.1), controlPoint2: CGPoint(x: 9.06, y: 5.32))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.4))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.04))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.18), controlPoint1: CGPoint(x: 1.35, y: 17.08), controlPoint2: CGPoint(x: 1.31, y: 17.12))
            fill1.addLine(to: CGPoint(x: 0.13, y: 18.67))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 19.64), controlPoint1: CGPoint(x: -0.18, y: 19.08), controlPoint2: CGPoint(x: 0.12, y: 19.66))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.31))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawMiscBigButton2Background(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 295, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 295, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 295, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 50), cornerRadius: 100)
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawMiscBigButton2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 295, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 295, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 295, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 50), cornerRadius: 100)
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Button
        let button = NSMutableAttributedString(string: "Button")
        button.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: button.length))
        button.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: button.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            button.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: button.length))
        }
        button.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: button.length))
        context.saveGState()
        button.draw(in: CGRect(x: 18, y: 14, width: 260, height: 26))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawMiscBigButtonBackground(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 295, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 295, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 295, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 50), cornerRadius: 100)
        context.saveGState()
        UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawMiscBigButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 295, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 295, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 295, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 50), cornerRadius: 100)
        context.saveGState()
        UIColor(hue: 0.54, saturation: 0.712, brightness: 0.914, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Button
        let button = NSMutableAttributedString(string: "Button")
        button.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: button.length))
        button.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: button.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            button.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: button.length))
        }
        button.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: button.length))
        context.saveGState()
        button.draw(in: CGRect(x: 18, y: 14, width: 260, height: 26))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBtn_workoutgroups_selectable_selected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 98, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 98, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 98, y: resizedFrame.height / 44)
        
        /// Rectangle 2 Copy 13
        let rectangle2Copy13 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 98, height: 44), cornerRadius: 58)
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        rectangle2Copy13.fill()
        context.restoreGState()
        
        /// Number
        let number = NSMutableAttributedString(string: "Number")
        number.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: number.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            number.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: number.length))
        }
        number.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: number.length))
        context.saveGState()
        number.draw(at: CGPoint(x: 16.5, y: 11))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBtn_workoutgroups_selectable_background(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 98, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 98, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 98, y: resizedFrame.height / 44)
        
        /// Rectangle 2 Copy 13
        let rectangle2Copy13 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 98, height: 44), cornerRadius: 58)
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        rectangle2Copy13.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBtn_workoutgroups_selectable(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 98, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 98, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 98, y: resizedFrame.height / 44)
        
        /// Rectangle 2 Copy 13
        let rectangle2Copy13 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 98, height: 44), cornerRadius: 58)
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        rectangle2Copy13.fill()
        context.restoreGState()
        
        /// Number
        let number = NSMutableAttributedString(string: "Number")
        number.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: number.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            number.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: number.length))
        }
        number.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: number.length))
        context.saveGState()
        number.draw(at: CGPoint(x: 16.5, y: 11))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawInput_txtfield(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 310, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 310, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 310, y: resizedFrame.height / 44)
        
        /// Rectangle 2 Copy 4
        let rectangle2Copy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 310, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        rectangle2Copy4.fill()
        context.saveGState()
        rectangle2Copy4.lineWidth = 1
        context.beginPath()
        context.addPath(rectangle2Copy4.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.667, saturation: 0.016, brightness: 0.749, alpha: 1).setStroke()
        rectangle2Copy4.stroke()
        context.restoreGState()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIco_staroutlined(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)
        
        /// Star
        let star = UIBezierPath()
        star.move(to: CGPoint(x: 6, y: 9))
        star.addLine(to: CGPoint(x: 2.47, y: 10.85))
        star.addLine(to: CGPoint(x: 3.15, y: 6.93))
        star.addLine(to: CGPoint(x: 0.29, y: 4.15))
        star.addLine(to: CGPoint(x: 4.24, y: 3.57))
        star.addLine(to: CGPoint(x: 6, y: 0))
        star.addLine(to: CGPoint(x: 7.76, y: 3.57))
        star.addLine(to: CGPoint(x: 11.71, y: 4.15))
        star.addLine(to: CGPoint(x: 8.85, y: 6.93))
        star.addLine(to: CGPoint(x: 9.53, y: 10.85))
        star.addLine(to: CGPoint(x: 6, y: 9))
        star.close()
        context.saveGState()
        context.saveGState()
        star.lineWidth = 1
        context.beginPath()
        context.addPath(star.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setStroke()
        star.stroke()
        context.restoreGState()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIco_starfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)
        
        /// Star
        let star = UIBezierPath()
        star.move(to: CGPoint(x: 6, y: 9))
        star.addLine(to: CGPoint(x: 2.47, y: 10.85))
        star.addLine(to: CGPoint(x: 3.15, y: 6.93))
        star.addLine(to: CGPoint(x: 0.29, y: 4.15))
        star.addLine(to: CGPoint(x: 4.24, y: 3.57))
        star.addLine(to: CGPoint(x: 6, y: 0))
        star.addLine(to: CGPoint(x: 7.76, y: 3.57))
        star.addLine(to: CGPoint(x: 11.71, y: 4.15))
        star.addLine(to: CGPoint(x: 8.85, y: 6.93))
        star.addLine(to: CGPoint(x: 9.53, y: 10.85))
        star.addLine(to: CGPoint(x: 6, y: 9))
        star.close()
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setFill()
        star.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawTrainer_Profileview(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 232, height: 110), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 232, height: 110), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 232, y: resizedFrame.height / 110)
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// Name Lastname
        let nameLastname = NSMutableAttributedString(string: "Name Lastname")
        nameLastname.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: nameLastname.length))
        nameLastname.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: nameLastname.length))
        context.saveGState()
        nameLastname.draw(in: CGRect(x: 111, y: 15, width: 112, height: 20))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 111, y: 37)
            
            /// ico_star-filled
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 2
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 3
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 4
            // Warning: New symbols are not supported.
            
            
            /// (3)
            let _3 = NSMutableAttributedString(string: "(3)")
            _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _3.length))
            _3.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: _3.length))
            context.saveGState()
            _3.draw(in: CGRect(x: 76.76, y: 0, width: 10.24, height: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// 5,4
        let _54 = NSMutableAttributedString(string: "5,4")
        _54.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 30)!, range: NSRange(location: 0, length: _54.length))
        _54.addAttribute(.kern, value: -2.16, range: NSRange(location: 0, length: _54.length))
        _54.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _54.length))
        context.saveGState()
        _54.draw(in: CGRect(x: 111, y: 49, width: 78, height: 58))
        context.restoreGState()
        
        /// icn/certified_trainer
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawProfile_mapview(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 150), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 150)
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// Name Lastname
        let nameLastname = NSMutableAttributedString(string: "Name Lastname")
        nameLastname.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: nameLastname.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            nameLastname.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: nameLastname.length))
        }
        nameLastname.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: nameLastname.length))
        context.saveGState()
        nameLastname.draw(in: CGRect(x: 6, y: 82, width: 109, height: 20))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 102)
            
            /// ico_star-filled
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 2
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 3
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 4
            // Warning: New symbols are not supported.
            
            
            /// (3)
            let _3 = NSMutableAttributedString(string: "(3)")
            _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _3.length))
            _3.addAttribute(.foregroundColor, value: UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1), range: NSRange(location: 0, length: _3.length))
            context.saveGState()
            _3.draw(at: CGPoint(x: 75, y: 0))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// 5,4
        let _54 = NSMutableAttributedString(string: "5,4")
        _54.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: _54.length))
        _54.addAttribute(.kern, value: -1.44, range: NSRange(location: 0, length: 2))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _54.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _54.length))
        }
        _54.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1), range: NSRange(location: 0, length: _54.length))
        context.saveGState()
        _54.draw(at: CGPoint(x: 48, y: 117))
        context.restoreGState()
        
        /// icn/certified_trainer
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawImg_profiles(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 73, height: 73), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 73, height: 73), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 73, y: resizedFrame.height / 73)
        
        /// IMG_2974-1024x1024
        do {
            context.saveGState()
            
            /// Mask
            let mask = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 73, height: 73))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(mask.cgPath)
            context.addRect(mask.bounds.insetBy(dx: -4, dy: -6))
            context.clip(using: .evenOdd)
            context.translateBy(x: -78, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 78, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            mask.fill()
            context.restoreGState()
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIco_swipe_up(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 19)
        
        /// Path 2
        let path2 = UIBezierPath()
        path2.move(to: CGPoint(x: 0, y: 9.96))
        path2.addLine(to: CGPoint(x: 8.63, y: 0))
        path2.addLine(to: CGPoint(x: 17, y: 9.66))
        context.saveGState()
        context.translateBy(x: 1, y: 3)
        path2.lineJoinStyle = .round
        path2.lineCapStyle = .round
        path2.lineWidth = 1
        UIColor(hue: 0.614, saturation: 0.038, brightness: 0.308, alpha: 1).setStroke()
        path2.stroke()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_severalOptions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// 3
        let _3 = NSMutableAttributedString(string: "3")
        _3.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 26)!, range: NSRange(location: 0, length: _3.length))
        _3.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _3.length))
        context.saveGState()
        _3.draw(at: CGPoint(x: 13, y: 0))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_crossfit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/crossfit copy
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_yoga(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/yoga copy
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_gym_averageSpots(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/gym copy
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_gym(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/gym copy
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_fighting_manySpots(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/boxing
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_fighting(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/boxing
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_running_hoover(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 129, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 129, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 129, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 5
        let rectangle5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 96, height: 31))
        context.saveGState()
        context.translateBy(x: 20, y: 3)
        UIColor(hue: 0.617, saturation: 0.066, brightness: 0.592, alpha: 1).setFill()
        rectangle5.fill()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.54, saturation: 0.713, brightness: 0.915, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 9, y: 7)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 19.64))
            clip2.addLine(to: CGPoint(x: 0, y: 19.64))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.31))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 18.81), controlPoint1: CGPoint(x: 8.09, y: 19.29), controlPoint2: CGPoint(x: 8.55, y: 19.11))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.36))
            fill1.addCurve(to: CGPoint(x: 21.8, y: 7.1), controlPoint1: CGPoint(x: 22.05, y: 8.05), controlPoint2: CGPoint(x: 22.11, y: 7.49))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.63), controlPoint1: CGPoint(x: 16.02, y: -0.22), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.07))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.84), controlPoint1: CGPoint(x: 14.82, y: 3.38), controlPoint2: CGPoint(x: 14.67, y: 3.65))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.02))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.27), controlPoint1: CGPoint(x: 12.74, y: 5.2), controlPoint2: CGPoint(x: 12.45, y: 5.29))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.68), controlPoint1: CGPoint(x: 9.43, y: 5.1), controlPoint2: CGPoint(x: 9.06, y: 5.32))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.4))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.04))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.18), controlPoint1: CGPoint(x: 1.35, y: 17.08), controlPoint2: CGPoint(x: 1.31, y: 17.12))
            fill1.addLine(to: CGPoint(x: 0.13, y: 18.67))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 19.64), controlPoint1: CGPoint(x: -0.18, y: 19.08), controlPoint2: CGPoint(x: 0.12, y: 19.66))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.31))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        /// icn/boxing copy
        // Warning: New symbols are not supported.
        
        /// icn/crossfit copy 2
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_running_Selected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 9, y: 7)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 19.64))
            clip2.addLine(to: CGPoint(x: 0, y: 19.64))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.31))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 18.81), controlPoint1: CGPoint(x: 8.09, y: 19.29), controlPoint2: CGPoint(x: 8.55, y: 19.11))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.36))
            fill1.addCurve(to: CGPoint(x: 21.8, y: 7.1), controlPoint1: CGPoint(x: 22.05, y: 8.05), controlPoint2: CGPoint(x: 22.11, y: 7.49))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.63), controlPoint1: CGPoint(x: 16.02, y: -0.22), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.07))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.84), controlPoint1: CGPoint(x: 14.82, y: 3.38), controlPoint2: CGPoint(x: 14.67, y: 3.65))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.02))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.27), controlPoint1: CGPoint(x: 12.74, y: 5.2), controlPoint2: CGPoint(x: 12.45, y: 5.29))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.68), controlPoint1: CGPoint(x: 9.43, y: 5.1), controlPoint2: CGPoint(x: 9.06, y: 5.32))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.4))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.04))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.18), controlPoint1: CGPoint(x: 1.35, y: 17.08), controlPoint2: CGPoint(x: 1.31, y: 17.12))
            fill1.addLine(to: CGPoint(x: 0.13, y: 18.67))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 19.64), controlPoint1: CGPoint(x: -0.18, y: 19.08), controlPoint2: CGPoint(x: 0.12, y: 19.66))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.31))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_running(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 9, y: 7)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 19.64))
            clip2.addLine(to: CGPoint(x: 0, y: 19.64))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.31))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 18.81), controlPoint1: CGPoint(x: 8.09, y: 19.29), controlPoint2: CGPoint(x: 8.55, y: 19.11))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.36))
            fill1.addCurve(to: CGPoint(x: 21.8, y: 7.1), controlPoint1: CGPoint(x: 22.05, y: 8.05), controlPoint2: CGPoint(x: 22.11, y: 7.49))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.63), controlPoint1: CGPoint(x: 16.02, y: -0.22), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.07))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.84), controlPoint1: CGPoint(x: 14.82, y: 3.38), controlPoint2: CGPoint(x: 14.67, y: 3.65))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.02))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.27), controlPoint1: CGPoint(x: 12.74, y: 5.2), controlPoint2: CGPoint(x: 12.45, y: 5.29))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.68), controlPoint1: CGPoint(x: 9.43, y: 5.1), controlPoint2: CGPoint(x: 9.06, y: 5.32))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.4))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.04))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.18), controlPoint1: CGPoint(x: 1.35, y: 17.08), controlPoint2: CGPoint(x: 1.31, y: 17.12))
            fill1.addLine(to: CGPoint(x: 0.13, y: 18.67))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 19.64), controlPoint1: CGPoint(x: -0.18, y: 19.08), controlPoint2: CGPoint(x: 0.12, y: 19.66))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.31))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// APP- use Client
    
    class func imageOfTrainerProfileMenuOpen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 842), false, 0)
        StyleKit.drawTrainerProfileMenuOpen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTrainerProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1014), false, 0)
        StyleKit.drawTrainerProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFYTTAppSignInKeyboard() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawFYTTAppSignInKeyboard()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFYTTAppStartScreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawFYTTAppStartScreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFYTTAppSignIn() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawFYTTAppSignIn()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFindTrainingFilterMenu() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawFindTrainingFilterMenu()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFindTraining() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawFindTraining()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFindTrainingTrainerSelected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawFindTrainingTrainerSelected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBooking() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawBooking()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCheckInUser() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawCheckInUser()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfConditionAndTerms() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawConditionAndTerms()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMenuOpen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawMenuOpen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfUserrMyBookings() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawUserrMyBookings()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfUserTrainingJournal() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1295), false, 0)
        StyleKit.drawUserTrainingJournal()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfUserProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawUserProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPaymentMethod() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawPaymentMethod()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfEditUserProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 888), false, 0)
        StyleKit.drawEditUserProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTrainingRequested() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1122), false, 0)
        StyleKit.drawTrainingRequested()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCheckInTrainer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawCheckInTrainer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSummarizeTraining_Trainer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawSummarizeTraining_Trainer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRateTrainingClient() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawRateTrainingClient()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMonthlyReport() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawMonthlyReport()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTrainerPackageCreator() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1024), false, 0)
        StyleKit.drawTrainerPackageCreator()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRegisterAsTrainer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1268), false, 0)
        StyleKit.drawRegisterAsTrainer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Sign Up
    
    class func imageOfPeppAppSignUpPage() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawPeppAppSignUpPage()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// NOT IN USE
    
    class func imageOfTrainingRequestedCopy() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawTrainingRequestedCopy()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTrainingRequested2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawTrainingRequested2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPeppAppSignUpPage2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawPeppAppSignUpPage2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTrainerCalender() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawTrainerCalender()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOfIcncertified_trainer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 37), false, 0)
        StyleKit.drawIcncertified_trainer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMiscbtnnumbers() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
        StyleKit.drawMiscbtnnumbers()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcncheckinselected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 19), false, 0)
        StyleKit.drawIcncheckinselected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcncheckindeselected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 19), false, 0)
        StyleKit.drawIcncheckindeselected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMenuquickmenuTrainer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 40), false, 0)
        StyleKit.drawMenuquickmenuTrainer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMenuquickmenuClient() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 40), false, 0)
        StyleKit.drawMenuquickmenuClient()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbasecrossfit2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 28), false, 0)
        StyleKit.drawIcnbasecrossfit2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnsearchselected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 29), false, 0)
        StyleKit.drawIcnsearchselected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnprofiledeselected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 20), false, 0)
        StyleKit.drawIcnprofiledeselected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnprofileselected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 20), false, 0)
        StyleKit.drawIcnprofileselected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnfilter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 39), false, 0)
        StyleKit.drawIcnfilter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnsearchdeselected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 29), false, 0)
        StyleKit.drawIcnsearchdeselected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcncalenderselected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 22), false, 0)
        StyleKit.drawIcncalenderselected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcncalenderdeselectednotification() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 22), false, 0)
        StyleKit.drawIcncalenderdeselectednotification()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcncalenderdeselected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 22), false, 0)
        StyleKit.drawIcncalenderdeselected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMenuHolder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 40), false, 0)
        StyleKit.drawMenuHolder()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalendermonth() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 336, height: 290), false, 0)
        StyleKit.drawCalendermonth()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalenderdaybooked() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
        StyleKit.drawCalenderdaybooked()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalenderdaybookableCopy() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
        StyleKit.drawCalenderdaybookableCopy()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalenderdaybookable() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
        StyleKit.drawCalenderdaybookable()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalenderday() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
        StyleKit.drawCalenderday()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnsocialmediafacebook() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 15), false, 0)
        StyleKit.drawIcnsocialmediafacebook()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnsocialmediatwitter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 15), false, 0)
        StyleKit.drawIcnsocialmediatwitter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnsocialmediainstagram() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 15), false, 0)
        StyleKit.drawIcnsocialmediainstagram()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbasefighting() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 15), false, 0)
        StyleKit.drawIcnbasefighting()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbaseyoga() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 27, height: 17), false, 0)
        StyleKit.drawIcnbaseyoga()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbasegym() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 14), false, 0)
        StyleKit.drawIcnbasegym()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbasecrossfit() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 28), false, 0)
        StyleKit.drawIcnbasecrossfit()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbaserunning() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 20), false, 0)
        StyleKit.drawIcnbaserunning()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnburgermenuclose() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 10), false, 0)
        StyleKit.drawIcnburgermenuclose()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnburgermenuopen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 10), false, 0)
        StyleKit.drawIcnburgermenuopen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBox_latestsessions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 282, height: 398), false, 0)
        StyleKit.drawBox_latestsessions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCellsSlider() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawCellsSlider()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcn_circel_DEselected_bg() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcn_circel_DEselected_bg()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcn_circel_selected_bg() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcn_circel_selected_bg()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBox_booking_userimg() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 73, height: 73), false, 0)
        StyleKit.drawBox_booking_userimg()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBox_bookingMyBookingsTrainer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 316, height: 175), false, 0)
        StyleKit.drawBox_bookingMyBookingsTrainer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBox_bookingMyBookingsClient() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 316, height: 175), false, 0)
        StyleKit.drawBox_bookingMyBookingsClient()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBox_bookingrequested() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 316, height: 175), false, 0)
        StyleKit.drawBox_bookingrequested()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingfightingcircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingfightingcircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingyogacircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingyogacircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntraininggymcircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntraininggymcircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingcrossfitcircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingcrossfitcircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingrunningcircelselected_blue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingrunningcircelselected_blue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingrunningcircelselected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingrunningcircelselected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingrunningcircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingrunningcircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMiscBigButton2Background() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 295, height: 50), false, 0)
        StyleKit.drawMiscBigButton2Background()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMiscBigButton2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 295, height: 50), false, 0)
        StyleKit.drawMiscBigButton2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMiscBigButtonBackground() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 295, height: 50), false, 0)
        StyleKit.drawMiscBigButtonBackground()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMiscBigButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 295, height: 50), false, 0)
        StyleKit.drawMiscBigButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBtn_workoutgroups_selectable_selected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 98, height: 44), false, 0)
        StyleKit.drawBtn_workoutgroups_selectable_selected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBtn_workoutgroups_selectable_background() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 98, height: 44), false, 0)
        StyleKit.drawBtn_workoutgroups_selectable_background()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBtn_workoutgroups_selectable() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 98, height: 44), false, 0)
        StyleKit.drawBtn_workoutgroups_selectable()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfInput_txtfield() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 310, height: 44), false, 0)
        StyleKit.drawInput_txtfield()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIco_staroutlined() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 12, height: 12), false, 0)
        StyleKit.drawIco_staroutlined()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIco_starfilled() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 12, height: 12), false, 0)
        StyleKit.drawIco_starfilled()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTrainer_Profileview() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 232, height: 110), false, 0)
        StyleKit.drawTrainer_Profileview()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProfile_mapview() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 120, height: 150), false, 0)
        StyleKit.drawProfile_mapview()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImg_profiles() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 73, height: 73), false, 0)
        StyleKit.drawImg_profiles()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIco_swipe_up() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 19), false, 0)
        StyleKit.drawIco_swipe_up()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_severalOptions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_severalOptions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_crossfit() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_crossfit()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_yoga() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_yoga()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_gym_averageSpots() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_gym_averageSpots()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_gym() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_gym()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_fighting_manySpots() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_fighting_manySpots()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_fighting() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_fighting()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_running_hoover() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 129, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_running_hoover()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_running_Selected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_running_Selected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_running() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_running()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
